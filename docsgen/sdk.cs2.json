{
    "coreclasses": {
        "page": "# Core Classes\n\nThis is the list of items available for Core Classes API.\n\n## Classes\n\n<Catalog filter=\"coreclasses.cchecktransmitinfo,coreclasses.chandle,coreclasses.color,coreclasses.qangle,coreclasses.vector,coreclasses.vector2d,coreclasses.vector4d\"></Catalog>",
        "title": "Core Classes",
        "icon": "list"
    },
    "coreclasses.cchecktransmitinfo": {
        "page": "# CCheckTransmitInfo\n\nThis class contains informations about the entity transmissions.\n\n<Tabs defaultValue=\"lua\">\n      <TabsList class=\"grid w-full grid-cols-3 flex\">\n        <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n      </TabsList>\n    <TabsContent value=\"lua\">\n## Constructor\n```lua\n--- @param ptr_or_cchectransmitinfo CCheckTransmitInfo|Memory\n--- @return CCheckTransmitInfo\nlocal cchecktransmitinfo = CCheckTransmitInfo(ptr_or_cchectransmitinfo)\n```\n# Functions\nHere are listed all the functions.\n## GetPlayers\n```lua\n--- @return table\n cchecktransmitinfo:GetPlayers()\n```\n## GetEntities\n```lua\n--- @return table\n cchecktransmitinfo:GetEntities()\n```\n## SetEntities\n```lua\n--- @param value table\n--- @return nil\n cchecktransmitinfo:SetEntities(value)\n```\n## AddEntityIndex\n```lua\n--- @param entityIndex number\n--- @return nil\n cchecktransmitinfo:AddEntityIndex(entityIndex)\n```\n## RemoveEntityIndex\n```lua\n--- @param entityIndex number\n--- @return nil\n cchecktransmitinfo:RemoveEntityIndex(entityIndex)\n```\n## Clear\n```lua\n--- @return nil\n cchecktransmitinfo:Clear()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n## Constructor\n```js\n/**\n * @param {CCheckTransmitInfo|Memory} ptr_or_cchectransmitinfo\n * @return CCheckTransmitInfo\n */\nlet cchecktransmitinfo = CCheckTransmitInfo(ptr_or_cchectransmitinfo)\n```\n# Functions\nHere are listed all the functions.\n## GetPlayers\n```js\n/**\n * @return Object.<number, number>\n */\n cchecktransmitinfo.GetPlayers()\n```\n## GetEntities\n```js\n/**\n * @return number[]\n */\n cchecktransmitinfo.GetEntities()\n```\n## SetEntities\n```js\n/**\n * @param {number[]} value\n * @return void\n */\n cchecktransmitinfo.SetEntities(value)\n```\n## AddEntityIndex\n```js\n/**\n * @param {number} entityIndex\n * @return void\n */\n cchecktransmitinfo.AddEntityIndex(entityIndex)\n```\n## RemoveEntityIndex\n```js\n/**\n * @param {number} entityIndex\n * @return void\n */\n cchecktransmitinfo.RemoveEntityIndex(entityIndex)\n```\n## Clear\n```js\n/**\n * @return void\n */\n cchecktransmitinfo.Clear()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n## Constructor\n```cs\nvar cchecktransmitinfo = CoreClasses.CCheckTransmitInfo(CCheckTransmitInfo|Memory ptr_or_cchectransmitinfo)\n```\n# Functions\nHere are listed all the functions.\n## GetPlayers\n```cs\nDictionary<int, int> cchecktransmitinfo.GetPlayers()\n```\n## GetEntities\n```cs\nint32[] cchecktransmitinfo.GetEntities()\n```\n## SetEntities\n```cs\nvoid cchecktransmitinfo.SetEntities(int32[] value)\n```\n## AddEntityIndex\n```cs\nvoid cchecktransmitinfo.AddEntityIndex(int entityIndex)\n```\n## RemoveEntityIndex\n```cs\nvoid cchecktransmitinfo.RemoveEntityIndex(int entityIndex)\n```\n## Clear\n```cs\nvoid cchecktransmitinfo.Clear()\n```\n\n</TabsContent>\n    </Tabs>",
        "title": "CCheckTransmitInfo"
    },
    "coreclasses.chandle": {
        "page": "# CHandle\n\nThis class represents the CHandle object from C++.\n\n<Tabs defaultValue=\"lua\">\n      <TabsList class=\"grid w-full grid-cols-3 flex\">\n        <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n      </TabsList>\n    <TabsContent value=\"lua\">\n## Constructor\n```lua\n--- @param ptr string\n--- @return CHandle\nlocal chandle = CHandle(ptr)\n```\n# Functions\nHere are listed all the functions.\n## GetPtr\n```lua\n--- @return string\n chandle:GetPtr()\n```\n## SetPtr\n```lua\n--- @param ptr string\n--- @return nil\n chandle:SetPtr(ptr)\n```\n## GetHandlePtr\n```lua\n--- @return string\n chandle:GetHandlePtr()\n```\n## IsValid\n```lua\n--- @return boolean\n chandle:IsValid()\n```\n## GetEntryIndex\n```lua\n--- @return number\n chandle:GetEntryIndex()\n```\n## GetSerialNumber\n```lua\n--- @return number\n chandle:GetSerialNumber()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n## Constructor\n```js\n/**\n * @param {string} ptr\n * @return CHandle\n */\nlet chandle = CHandle(ptr)\n```\n# Functions\nHere are listed all the functions.\n## GetPtr\n```js\n/**\n * @return string\n */\n chandle.GetPtr()\n```\n## SetPtr\n```js\n/**\n * @param {string} ptr\n * @return void\n */\n chandle.SetPtr(ptr)\n```\n## GetHandlePtr\n```js\n/**\n * @return string\n */\n chandle.GetHandlePtr()\n```\n## IsValid\n```js\n/**\n * @return bool\n */\n chandle.IsValid()\n```\n## GetEntryIndex\n```js\n/**\n * @return number\n */\n chandle.GetEntryIndex()\n```\n## GetSerialNumber\n```js\n/**\n * @return number\n */\n chandle.GetSerialNumber()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n## Constructor\n```cs\nvar chandle = CoreClasses.CHandle(string ptr)\n```\n# Functions\nHere are listed all the functions.\n## GetPtr\n```cs\nstring chandle.GetPtr()\n```\n## SetPtr\n```cs\nvoid chandle.SetPtr(string ptr)\n```\n## GetHandlePtr\n```cs\nstring chandle.GetHandlePtr()\n```\n## IsValid\n```cs\nbool chandle.IsValid()\n```\n## GetEntryIndex\n```cs\nint chandle.GetEntryIndex()\n```\n## GetSerialNumber\n```cs\nint chandle.GetSerialNumber()\n```\n\n</TabsContent>\n    </Tabs>",
        "title": "CHandle"
    },
    "coreclasses.color": {
        "page": "# Color\n\nThis class represents the Color object from C++.\n\n<Tabs defaultValue=\"lua\">\n      <TabsList class=\"grid w-full grid-cols-3 flex\">\n        <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n      </TabsList>\n    <TabsContent value=\"lua\">\n## Constructor\n```lua\n--- @param r number\n--- @param g number\n--- @param b number\n--- @param a number\n--- @return Color\nlocal color = Color(r, g, b, a)\n```\n# Properties\nHere are listed all the properties.\n## r \n```lua\n--- @type number\ncolor.r\n```\n## g \n```lua\n--- @type number\ncolor.g\n```\n## b \n```lua\n--- @type number\ncolor.b\n```\n## a \n```lua\n--- @type number\ncolor.a\n```\n# Functions\nHere are listed all the functions.\n## GetPtr\n```lua\n--- @return string\n color:GetPtr()\n```\nThis class supports doing operations on them: addition, division, multiplication, substraction.\n</TabsContent>\n<TabsContent value=\"js\">\n## Constructor\n```js\n/**\n * @param {number} r\n * @param {number} g\n * @param {number} b\n * @param {number} a\n * @return Color\n */\nlet color = Color(r, g, b, a)\n```\n# Properties\nHere are listed all the properties.\n## r \n```js\n/** @type number */\ncolor.r\n```\n## g \n```js\n/** @type number */\ncolor.g\n```\n## b \n```js\n/** @type number */\ncolor.b\n```\n## a \n```js\n/** @type number */\ncolor.a\n```\n# Functions\nHere are listed all the functions.\n## GetPtr\n```js\n/**\n * @return string\n */\n color.GetPtr()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n## Constructor\n```cs\nvar color = CoreClasses.Color(byte r, byte g, byte b, byte a)\n```\n# Properties\nHere are listed all the properties.\n## r \n```cs\n// @type byte\ncolor.r\n```\n## g \n```cs\n// @type byte\ncolor.g\n```\n## b \n```cs\n// @type byte\ncolor.b\n```\n## a \n```cs\n// @type byte\ncolor.a\n```\n# Functions\nHere are listed all the functions.\n## GetPtr\n```cs\nstring color.GetPtr()\n```\n\n</TabsContent>\n    </Tabs>",
        "title": "Color"
    },
    "coreclasses.qangle": {
        "page": "# QAngle\n\nA QAngle is an object which stores coordinates regarding the angle.\n\n<Tabs defaultValue=\"lua\">\n      <TabsList class=\"grid w-full grid-cols-3 flex\">\n        <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n      </TabsList>\n    <TabsContent value=\"lua\">\n## Constructor\n```lua\n--- @param x number\n--- @param y number\n--- @param z number\n--- @return QAngle\nlocal qangle = QAngle(x, y, z)\n```\n# Properties\nHere are listed all the properties.\n## x \n```lua\n--- @type number\nqangle.x\n```\n## y \n```lua\n--- @type number\nqangle.y\n```\n## z \n```lua\n--- @type number\nqangle.z\n```\n# Functions\nHere are listed all the functions.\n## GetPtr\n```lua\n--- @return string\n qangle:GetPtr()\n```\nThis class supports doing operations on them: addition, division, multiplication, substraction.\n</TabsContent>\n<TabsContent value=\"js\">\n## Constructor\n```js\n/**\n * @param {number} x\n * @param {number} y\n * @param {number} z\n * @return QAngle\n */\nlet qangle = QAngle(x, y, z)\n```\n# Properties\nHere are listed all the properties.\n## x \n```js\n/** @type number */\nqangle.x\n```\n## y \n```js\n/** @type number */\nqangle.y\n```\n## z \n```js\n/** @type number */\nqangle.z\n```\n# Functions\nHere are listed all the functions.\n## GetPtr\n```js\n/**\n * @return string\n */\n qangle.GetPtr()\n```\n## add\n```js\n/**\n * @param {QAngle} value\n * @return QAngle\n */\n qangle.add(value)\n```\n## equal\n```js\n/**\n * @param {QAngle} value\n * @return bool\n */\n qangle.equal(value)\n```\n## length\n```js\n/**\n * @return number\n */\n qangle.length()\n```\n## unm\n```js\n/**\n * @param {QAngle} value\n * @return QAngle\n */\n qangle.unm(value)\n```\n## sub\n```js\n/**\n * @param {QAngle} value\n * @return QAngle\n */\n qangle.sub(value)\n```\n## mul\n```js\n/**\n * @param {QAngle} value\n * @return QAngle\n */\n qangle.mul(value)\n```\n## div\n```js\n/**\n * @param {QAngle} value\n * @return QAngle\n */\n qangle.div(value)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n## Constructor\n```cs\nvar qangle = CoreClasses.QAngle(float x, float y, float z)\n```\n# Properties\nHere are listed all the properties.\n## x \n```cs\n// @type float\nqangle.x\n```\n## y \n```cs\n// @type float\nqangle.y\n```\n## z \n```cs\n// @type float\nqangle.z\n```\n# Functions\nHere are listed all the functions.\n## GetPtr\n```cs\nstring qangle.GetPtr()\n```\n\n</TabsContent>\n    </Tabs>",
        "title": "QAngle"
    },
    "coreclasses.vector": {
        "page": "# Vector\n\nA vector is an object which stores coordinates.\n\n<Tabs defaultValue=\"lua\">\n      <TabsList class=\"grid w-full grid-cols-3 flex\">\n        <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n      </TabsList>\n    <TabsContent value=\"lua\">\n## Constructor\n```lua\n--- @param x number\n--- @param y number\n--- @param z number\n--- @return Vector\nlocal vector = Vector(x, y, z)\n```\n# Properties\nHere are listed all the properties.\n## x \n```lua\n--- @type number\nvector.x\n```\n## y \n```lua\n--- @type number\nvector.y\n```\n## z \n```lua\n--- @type number\nvector.z\n```\n# Functions\nHere are listed all the functions.\n## GetPtr\n```lua\n--- @return string\n vector:GetPtr()\n```\nThis class supports doing operations on them: addition, division, multiplication, substraction.\n</TabsContent>\n<TabsContent value=\"js\">\n## Constructor\n```js\n/**\n * @param {number} x\n * @param {number} y\n * @param {number} z\n * @return Vector\n */\nlet vector = Vector(x, y, z)\n```\n# Properties\nHere are listed all the properties.\n## x \n```js\n/** @type number */\nvector.x\n```\n## y \n```js\n/** @type number */\nvector.y\n```\n## z \n```js\n/** @type number */\nvector.z\n```\n# Functions\nHere are listed all the functions.\n## GetPtr\n```js\n/**\n * @return string\n */\n vector.GetPtr()\n```\n## add\n```js\n/**\n * @param {Vector} value\n * @return Vector\n */\n vector.add(value)\n```\n## equal\n```js\n/**\n * @param {Vector} value\n * @return bool\n */\n vector.equal(value)\n```\n## length\n```js\n/**\n * @return number\n */\n vector.length()\n```\n## unm\n```js\n/**\n * @param {Vector} value\n * @return Vector\n */\n vector.unm(value)\n```\n## sub\n```js\n/**\n * @param {Vector} value\n * @return Vector\n */\n vector.sub(value)\n```\n## mul\n```js\n/**\n * @param {Vector} value\n * @return Vector\n */\n vector.mul(value)\n```\n## div\n```js\n/**\n * @param {Vector} value\n * @return Vector\n */\n vector.div(value)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n## Constructor\n```cs\nvar vector = CoreClasses.Vector(float x, float y, float z)\n```\n# Properties\nHere are listed all the properties.\n## x \n```cs\n// @type float\nvector.x\n```\n## y \n```cs\n// @type float\nvector.y\n```\n## z \n```cs\n// @type float\nvector.z\n```\n# Functions\nHere are listed all the functions.\n## GetPtr\n```cs\nstring vector.GetPtr()\n```\n\n</TabsContent>\n    </Tabs>",
        "title": "Vector"
    },
    "coreclasses.vector2d": {
        "page": "# Vector2D\n\nA vector is an object which stores coordinates.\n\n<Tabs defaultValue=\"lua\">\n      <TabsList class=\"grid w-full grid-cols-3 flex\">\n        <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n      </TabsList>\n    <TabsContent value=\"lua\">\n## Constructor\n```lua\n--- @param x number\n--- @param y number\n--- @return Vector2D\nlocal vector2d = Vector2D(x, y)\n```\n# Properties\nHere are listed all the properties.\n## x \n```lua\n--- @type number\nvector2d.x\n```\n## y \n```lua\n--- @type number\nvector2d.y\n```\n# Functions\nHere are listed all the functions.\n## GetPtr\n```lua\n--- @return string\n vector2d:GetPtr()\n```\nThis class supports doing operations on them: addition, division, multiplication, substraction.\n</TabsContent>\n<TabsContent value=\"js\">\n## Constructor\n```js\n/**\n * @param {number} x\n * @param {number} y\n * @return Vector2D\n */\nlet vector2d = Vector2D(x, y)\n```\n# Properties\nHere are listed all the properties.\n## x \n```js\n/** @type number */\nvector2d.x\n```\n## y \n```js\n/** @type number */\nvector2d.y\n```\n# Functions\nHere are listed all the functions.\n## GetPtr\n```js\n/**\n * @return string\n */\n vector2d.GetPtr()\n```\n## add\n```js\n/**\n * @param {Vector2D} value\n * @return Vector2D\n */\n vector2d.add(value)\n```\n## equal\n```js\n/**\n * @param {Vector2D} value\n * @return bool\n */\n vector2d.equal(value)\n```\n## length\n```js\n/**\n * @return number\n */\n vector2d.length()\n```\n## unm\n```js\n/**\n * @param {Vector2D} value\n * @return Vector2D\n */\n vector2d.unm(value)\n```\n## sub\n```js\n/**\n * @param {Vector2D} value\n * @return Vector2D\n */\n vector2d.sub(value)\n```\n## mul\n```js\n/**\n * @param {Vector2D} value\n * @return Vector2D\n */\n vector2d.mul(value)\n```\n## div\n```js\n/**\n * @param {Vector2D} value\n * @return Vector2D\n */\n vector2d.div(value)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n## Constructor\n```cs\nvar vector2d = CoreClasses.Vector2D(float x, float y)\n```\n# Properties\nHere are listed all the properties.\n## x \n```cs\n// @type float\nvector2d.x\n```\n## y \n```cs\n// @type float\nvector2d.y\n```\n# Functions\nHere are listed all the functions.\n## GetPtr\n```cs\nstring vector2d.GetPtr()\n```\n\n</TabsContent>\n    </Tabs>",
        "title": "Vector2D"
    },
    "coreclasses.vector4d": {
        "page": "# Vector4D\n\nA vector is an object which stores coordinates.\n\n<Tabs defaultValue=\"lua\">\n      <TabsList class=\"grid w-full grid-cols-3 flex\">\n        <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n      </TabsList>\n    <TabsContent value=\"lua\">\n## Constructor\n```lua\n--- @param x number\n--- @param y number\n--- @param z number\n--- @param w number\n--- @return Vector4D\nlocal vector4d = Vector4D(x, y, z, w)\n```\n# Properties\nHere are listed all the properties.\n## x \n```lua\n--- @type number\nvector4d.x\n```\n## y \n```lua\n--- @type number\nvector4d.y\n```\n## z \n```lua\n--- @type number\nvector4d.z\n```\n## w \n```lua\n--- @type number\nvector4d.w\n```\n# Functions\nHere are listed all the functions.\n## GetPtr\n```lua\n--- @return string\n vector4d:GetPtr()\n```\nThis class supports doing operations on them: addition, division, multiplication, substraction.\n</TabsContent>\n<TabsContent value=\"js\">\n## Constructor\n```js\n/**\n * @param {number} x\n * @param {number} y\n * @param {number} z\n * @param {number} w\n * @return Vector4D\n */\nlet vector4d = Vector4D(x, y, z, w)\n```\n# Properties\nHere are listed all the properties.\n## x \n```js\n/** @type number */\nvector4d.x\n```\n## y \n```js\n/** @type number */\nvector4d.y\n```\n## z \n```js\n/** @type number */\nvector4d.z\n```\n## w \n```js\n/** @type number */\nvector4d.w\n```\n# Functions\nHere are listed all the functions.\n## GetPtr\n```js\n/**\n * @return string\n */\n vector4d.GetPtr()\n```\n## add\n```js\n/**\n * @param {Vector4D} value\n * @return Vector4D\n */\n vector4d.add(value)\n```\n## equal\n```js\n/**\n * @param {Vector4D} value\n * @return bool\n */\n vector4d.equal(value)\n```\n## length\n```js\n/**\n * @return number\n */\n vector4d.length()\n```\n## unm\n```js\n/**\n * @param {Vector4D} value\n * @return Vector4D\n */\n vector4d.unm(value)\n```\n## sub\n```js\n/**\n * @param {Vector4D} value\n * @return Vector4D\n */\n vector4d.sub(value)\n```\n## mul\n```js\n/**\n * @param {Vector4D} value\n * @return Vector4D\n */\n vector4d.mul(value)\n```\n## div\n```js\n/**\n * @param {Vector4D} value\n * @return Vector4D\n */\n vector4d.div(value)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n## Constructor\n```cs\nvar vector4d = CoreClasses.Vector4D(float x, float y, float z, float w)\n```\n# Properties\nHere are listed all the properties.\n## x \n```cs\n// @type float\nvector4d.x\n```\n## y \n```cs\n// @type float\nvector4d.y\n```\n## z \n```cs\n// @type float\nvector4d.z\n```\n## w \n```cs\n// @type float\nvector4d.w\n```\n# Functions\nHere are listed all the functions.\n## GetPtr\n```cs\nstring vector4d.GetPtr()\n```\n\n</TabsContent>\n    </Tabs>",
        "title": "Vector4D"
    }
}