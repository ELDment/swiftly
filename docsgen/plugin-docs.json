{
    "commands": {
        "page": "# Commands\n\nThis is the list of items available for Commands API.\n\n## Functions\n\n<Catalog filter=\"commands.getallcommands,commands.getcommands,commands.register,commands.registeralias,commands.registerrawalias,commands.replytocommand,commands.unregister,commands.unregisteralias\"></Catalog>",
        "title": "Commands",
        "icon": "laptop"
    },
    "commands.getallcommands": {
        "page": "# GetAllCommands\n\nReturns a list of the commands registered by all the plugins.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return table\n commands:GetAllCommands()\n```\n\n### Example\n```lua\nlocal list = commands:GetAllCommands()\nfor i = 1, #list do\n    print(string.format(\"Command %d is %s\", i, list[i]))\nend\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return string[]\n */\n commands.GetAllCommands()\n```\n\n### Example\n```js\nconst list = commands.GetAllCommands()\nfor (let i = 0; i < list.length; i++) {\n    console.log(`Command ${i + 1} is ${list[i]}`)\n}\n\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nstring[] Commands.GetAllCommands()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetAllCommands"
    },
    "commands.getcommands": {
        "page": "# GetCommands\n\nReturns a list of the commands registered by this plugin.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return table\n commands:GetCommands()\n```\n\n### Example\n```lua\nlocal list = commands:GetCommands()\nfor i = 1, #list do\n    print(string.format(\"Command %d is %s\", i, list[i]))\nend\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return string[]\n */\n commands.GetCommands()\n```\n\n### Example\n```js\nconst list = commands.GetCommands()\nfor (let i = 0; i < list.length; i++) {\n    console.log(`Command ${i + 1} is ${list[i]}`)\n}\n\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nstring[] Commands.GetCommands()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetCommands"
    },
    "commands.register": {
        "page": "# Register\n\nRegisters a new command through Swiftly Commands.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param command_name string\n--- @param callback fun(playerid:number,arguments:table,arguments_count:number,silent:boolean,prefix:string)\n--- @return nil\n commands:Register(command_name, callback)\n```\n\n### Example\n```lua\ncommands:Register(\"testcmd\", function(playerid, arguments, arguments_count, silent, prefix)\n    print(\"Hello World!\")\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} command_name\n * @param {(playerid:number, arguments:string[], arguments_count:number, silent:bool, prefix:string) => void} callback\n * @return void\n */\n commands.Register(command_name, callback)\n```\n\n### Example\n```js\ncommands.Register(\"testcmd\", (playerid, arguments, arguments_count, silent, prefix) => {\n    console.log(\"Hello World!\")\n})\n\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Commands.Register(string command_name, Func<int,string[],int,bool,string, void> callback)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Register"
    },
    "commands.registeralias": {
        "page": "# RegisterAlias\n\nRegisters an alias for a command registered through Swiftly Commands.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param command_name string\n--- @param alias string\n--- @return nil\n commands:RegisterAlias(command_name, alias)\n```\n\n### Example\n```lua\ncommands:RegisterAlias(\"testcmd\", \"consolecmd\")\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} command_name\n * @param {string} alias\n * @return void\n */\n commands.RegisterAlias(command_name, alias)\n```\n\n### Example\n```js\ncommands.RegisterAlias(\"testcmd\", \"consolecmd\")\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Commands.RegisterAlias(string command_name, string alias)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "RegisterAlias"
    },
    "commands.registerrawalias": {
        "page": "# RegisterRawAlias\n\nRegisters a raw alias (without sw_ in console) for a command registered through Swiftly Commands.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param command_name string\n--- @param alias string\n--- @return nil\n commands:RegisterRawAlias(command_name, alias)\n```\n\n### Example\n```lua\ncommands:RegisterRawAlias(\"testcmd\", \"consolecmd\")\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} command_name\n * @param {string} alias\n * @return void\n */\n commands.RegisterRawAlias(command_name, alias)\n```\n\n### Example\n```js\ncommands.RegisterRawAlias(\"testcmd\", \"consolecmd\")\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Commands.RegisterRawAlias(string command_name, string alias)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "RegisterRawAlias"
    },
    "commands.replytocommand": {
        "page": "# ReplyToCommand\n\nReplies to a command used by a client or console.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param playerid number\n--- @param prefix string\n--- @param text string\n--- @return nil\n ReplyToCommand(playerid, prefix, text)\n```\n\n### Example\n```lua\ncommands:Register(\"replycmd\", function(playerid, arguments, arguments_count, silent, prefix)\n    ReplyToCommand(playerid, \"[PREFIX]\", \"Test Message\")\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {number} playerid\n * @param {string} prefix\n * @param {string} text\n * @return void\n */\n ReplyToCommand(playerid, prefix, text)\n```\n\n### Example\n```js\ncommands.Register(\"replycmd\", (playerid, arguments, arguments_count, silent, prefix) => {\n    ReplyToCommand(playerid, \"[PREFIX]\", \"Test Message\")\n})\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Generic.ReplyToCommand(int playerid, string prefix, string text)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "ReplyToCommand"
    },
    "commands.unregister": {
        "page": "# Unregister\n\nUnregisters a command registered through Swiftly Commands.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param command_name string\n--- @return nil\n commands:Unregister(command_name)\n```\n\n### Example\n```lua\ncommands:Unregister(\"testcmd\")\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} command_name\n * @return void\n */\n commands.Unregister(command_name)\n```\n\n### Example\n```js\ncommands.Unregister(\"testcmd\")\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Commands.Unregister(string command_name)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Unregister"
    },
    "commands.unregisteralias": {
        "page": "# UnregisterAlias\n\nUnregisters an alias for a command registered through Swiftly Commands.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param alias string\n--- @return nil\n commands:UnregisterAlias(alias)\n```\n\n### Example\n```lua\ncommands:UnregisterAlias(\"consolecmd\")\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} alias\n * @return void\n */\n commands.UnregisterAlias(alias)\n```\n\n### Example\n```js\ncommands.UnregisterAlias(\"consolecmd\")\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Commands.UnregisterAlias(string alias)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "UnregisterAlias"
    },
    "configuration": {
        "page": "# Configuration\n\nThis is the list of items available for Configuration API.\n\n## Functions\n\n<Catalog filter=\"configuration.create,configuration.exists,configuration.fetch,configuration.fetcharraysize,configuration.reload\"></Catalog>",
        "title": "Configuration",
        "icon": "cog"
    },
    "configuration.create": {
        "page": "# Create\n\nCreates the plugin configuration file.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param configuration_key string\n--- @param value table\n--- @return nil\n config:Create(configuration_key, value)\n```\n> [!note]\n> The config_key field supports nested configuration. Example: `folder1/folder2/config_key`, resulting in fetching to `folder1.folder2.config_key`.\n\nThe value needs to be a pair of key-values table in initial state, after it can also include lists and nested tables.\n\n### Example\n```lua\n-- This will create a configuration at addons/swiftly/configs/plugins/configuration.json\nAddEventHandler(\"OnPluginStart\", function(event)\n    config:Create(\"configuration\", {\n        test = \"Test\",\n        test2 = {\n            test3 = \"Test3\"\n        },\n        test3 = { 1, 3, 5, 10 }\n    })\n    return EventResult.Continue\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} configuration_key\n * @param {Object.<string, any>} value\n * @return void\n */\n config.Create(configuration_key, value)\n```\n> [!note]\n> The config_key field supports nested configuration. Example: `folder1/folder2/config_key`, resulting in fetching to `folder1.folder2.config_key`.\n\nThe value needs to be a pair of key-values object in initial state, after it can also include lists and nested objects.\n\n### Example\n```js\n// This will create a configuration at addons/swiftly/configs/plugins/configuration.json\nAddEventHandler(\"OnPluginStart\", (event) => {\n    config.Create(\"configuration\", {\n        test: \"Test\",\n        test2: {\n            test3: \"Test3\"\n        },\n        test3: [1, 3, 5, 10]\n    });\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Configuration.Create(string configuration_key, Dictionary<string, object> value)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Create"
    },
    "configuration.exists": {
        "page": "# Exists\n\nChecks if the configuration key exists.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param key string\n--- @return boolean\n config:Exists(key)\n```\n\n### Example\n```lua\ncommands:Register(\"configexists\", function(playerid, arguments, arguments_count, silent, prefix)\n    if config:Exists(\"configuration.test\") then\n        print(\"Configuration key 'test' exists!\")\n    else\n        print(\"Configuration 'test' does not exist!\")\n    end\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} key\n * @return bool\n */\n config.Exists(key)\n```\n\n### Example\n```js\ncommands.Register(\"configexists\", (playerid, arguments, arguments_count, silent, prefix) => {\n    if (config.Exists(\"configuration.test\")) {\n        console.log(\"Configuration key 'test' exists!\");\n    } else {\n        console.log(\"Configuration 'test' does not exist!\");\n    }\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nbool Configuration.Exists(string key)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Exists"
    },
    "configuration.fetch": {
        "page": "# Fetch\n\nReturns the configuration value for the specified key.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param key string\n--- @return any\n config:Fetch(key)\n```\n> [!note]\n> If the key is invalid or the key is not an array key, it returns nil.\n\n### Example\n```lua\ncommands:Register(\"configfetch\", function(playerid, arguments, arguments_count, silent, prefix)\n    local value = config:Fetch(\"configuration.test2\")\n    if value then\n        if type(value) == \"table\" then\n            print(\"Configuration is a table:\")\n            for k, v in pairs(value) do\n                print(k, v)\n            end\n        else\n            print(\"Configuration value:\", value)\n        end\n    else\n        print(\"Configuration key not found.\")\n    end\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} key\n * @return any\n */\n config.Fetch(key)\n```\n> [!note]\n> If the key is invalid or the key is not an array key, it returns null.\n\n### Example\n```js\ncommands.Register(\"configfetch\", (playerid, arguments, arguments_count, silent, prefix) => {\n    let value = config.Fetch(\"configuration.test\");\n    if (value) {\n        if (typeof (value) == \"object\") {\n            console.log(`Configuration is an object: ${JSON.stringify(value)}`);\n        } else {\n            console.log(`Configuration value: ${value}`);\n        }\n    } else {\n        console.log(\"Configuration key not found!\");\n    }\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nobject Configuration.Fetch(string key)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Fetch"
    },
    "configuration.fetcharraysize": {
        "page": "# FetchArraySize\n\nReturns the array size of a config value.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param key string\n--- @return number\n config:FetchArraySize(key)\n```\n> [!note]\n> If the key is invalid or the key is not an array key, it returns 0.\n\n### Example\n```lua\ncommands:Register(\"configfetchsize\", function(playerid, arguments, arguments_count, silent, prefix)\n    local size = config:FetchArraySize(\"configuration.test3\")\n    if size > 0 then\n        print(\"Array size:\", size)\n    else\n        print(\"Configuration key is not an array or does not exist.\")\n    end\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} key\n * @return number\n */\n config.FetchArraySize(key)\n```\n> [!note]\n> If the key is invalid or the key is not an array key, it returns 0.\n\n### Example\n```js\ncommands.Register(\"configfetchsize\", (playerid, arguments, arguments_count, silent, prefix) => {\n    let size = config.FetchArraySize(\"configuration.test3\")\n    if (size > 0) {\n        console.log(\"Configuration key 'test3' exists and the array size is \" + size);\n    } else {\n        console.log(\"Configuration 'test3' does not exist or is not an array!\");\n    }\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nint Configuration.FetchArraySize(string key)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "FetchArraySize"
    },
    "configuration.reload": {
        "page": "# Reload\n\nReloads the configuration for the specified key.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param key string\n--- @return nil\n config:Reload(key)\n```\n\n### Example\n```lua\ncommands:Register(\"configreload\", function(playerid, arguments, arguments_count, silent, prefix)\n    config:Reload(\"configuration\")\n    print(\"Configuration reloaded for 'configuration'\")\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} key\n * @return void\n */\n config.Reload(key)\n```\n\n### Example\n```js\ncommands.Register(\"configreload\", (playerid, arguments, arguments_count, silent, prefix) => {\n    config.Reload(\"configuration\");\n    console.log(\"Configuration reloaded for 'configuration'\");\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Configuration.Reload(string key)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Reload"
    },
    "convars": {
        "page": "# Convars\n\nThis is the list of items available for Convars API.\n\n## Functions\n\n<Catalog filter=\"convars.addflags,convars.create,convars.createfake,convars.delete,convars.deletefake,convars.exists,convars.existsfake,convars.get,convars.getflags,convars.gettype,convars.hasflags,convars.removeflags,convars.set\"></Catalog>",
        "title": "Convars",
        "icon": "puzzle-piece"
    },
    "convars.addflags": {
        "page": "# AddFlags\n\nAdds the flags to the convar.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param name string\n--- @param flags number\n--- @return nil\n convar:AddFlags(name, flags)\n```\n### Flags\n\nThe `flags` field can be combined with multiple flags using the OR operator (`|`).\nValues needed for the flags are available at ConvarFlags.\n\n### Example\n```lua\nconvar:AddFlags(\"sv_cheats\", ConvarFlags.FCVAR_NOTIFY | ConvarFlags.FCVAR_REPLICATED)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} name\n * @param {number} flags\n * @return void\n */\n convar.AddFlags(name, flags)\n```\n### Flags\n\nThe `flags` field can be combined with multiple flags using the OR operator (`|`).\nValues needed for the flags are available at ConvarFlags.\n\n### Example\n```js\nconvar.AddFlags(\"sv_cheats\", ConvarFlags.FCVAR_NOTIFY | ConvarFlags.FCVAR_REPLICATED)\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Convars.AddFlags(string name, long flags)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "AddFlags"
    },
    "convars.create": {
        "page": "# Create\n\nCreates a convar.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param name string\n--- @param description string\n--- @param cvar_type EConVarType\n--- @param flags number\n--- @param default_value any|nil\n--- @param min_value any|nil\n--- @param max_value any|nil\n--- @return nil\n convar:Create(name, description, cvar_type, flags, default_value, min_value, max_value)\n```\n\n### Example\n```lua\nconvar:Create(\"parachute\", \"Used for parachutes\", EConVarType.EConVarType_Bool, ConvarFlags.FCVAR_CHEAT, false)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} name\n * @param {string} description\n * @param {EConVarType} cvar_type\n * @param {number} flags\n * @param {any?} default_value\n * @param {any?} min_value\n * @param {any?} max_value\n * @return void\n */\n convar.Create(name, description, cvar_type, flags, default_value, min_value, max_value)\n```\n\n### Example\n```js\nconvar.Create(\"parachute\", \"Used for parachutes\", EConVarType.EConVarType_Bool, ConvarFlags.FCVAR_CHEAT, false)\n\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Convars.Create(string name, string description, EConVarType cvar_type, long flags, any? default_value, any? min_value, any? max_value)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Create"
    },
    "convars.createfake": {
        "page": "# CreateFake\n\nCreates a fake convar.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param name string\n--- @param cvar_type EConVarType\n--- @param default_value any\n--- @param protected boolean|nil\n--- @return nil\n convar:CreateFake(name, cvar_type, default_value, protected)\n```\nIf the protected is set to true, no data will be sent by the server to the client about this convar\n\n### Example\n```lua\nconvar:CreateFake(\"parachute\", EConVarType.EConVarType_Bool, false, false)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} name\n * @param {EConVarType} cvar_type\n * @param {any} default_value\n * @param {bool?} protected\n * @return void\n */\n convar.CreateFake(name, cvar_type, default_value, protected)\n```\nIf the protected is set to true, no data will be sent by the server to the client about this convar\n\n### Example\n```js\nconvar.CreateFake(\"parachute\", EConVarType.EConVarType_Bool, false, false)\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Convars.CreateFake(string name, EConVarType cvar_type, object default_value, bool? protected)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "CreateFake"
    },
    "convars.delete": {
        "page": "# Delete\n\nDeletes a convar created by plugins.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param name string\n--- @return nil\n convar:Delete(name)\n```\n\n### Example\n```lua\nconvar:Delete(\"parachute\")\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} name\n * @return void\n */\n convar.Delete(name)\n```\n\n### Example\n```js\nconvar.Delete(\"parachute\")\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Convars.Delete(string name)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Delete"
    },
    "convars.deletefake": {
        "page": "# DeleteFake\n\nDeletes a fake convar.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param name string\n--- @return nil\n convar:DeleteFake(name)\n```\n\n### Example\n```lua\nconvar:DeleteFake(\"parachute\")\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} name\n * @return void\n */\n convar.DeleteFake(name)\n```\n\n### Example\n```js\nconvar.DeleteFake(\"parachute\")\n\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Convars.DeleteFake(string name)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "DeleteFake"
    },
    "convars.exists": {
        "page": "# Exists\n\nChecks if a convar exists.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param name string\n--- @return boolean\n convar:Exists(name)\n```\n\n### Example\n```lua\nif convar:Exists(\"parachute\") then\n    print(\"The fake convar 'parachute' exists.\")\nend\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} name\n * @return bool\n */\n convar.Exists(name)\n```\n\n### Example\n```js\nif (convar.Exists(\"parachute\")) {\n    console.log(\"The fake convar 'parachute' exists.\")\n}\n\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nbool Convars.Exists(string name)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Exists"
    },
    "convars.existsfake": {
        "page": "# ExistsFake\n\nChecks if a fake convar exists.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param name string\n--- @return boolean\n convar:ExistsFake(name)\n```\n\n### Example\n```lua\nif convar:ExistsFake(\"parachute\") then\n    print(\"The fake convar 'parachute' exists.\")\nend\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} name\n * @return bool\n */\n convar.ExistsFake(name)\n```\n\n### Example\n```js\nif (convar.ExistsFake(\"parachute\")) {\n    console.log(\"The fake convar 'parachute' exists.\")\n}\n\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nbool Convars.ExistsFake(string name)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "ExistsFake"
    },
    "convars.get": {
        "page": "# Get\n\nReturns the convar value.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param name string\n--- @return any\n convar:Get(name)\n```\n\n### Example\n```lua\nif convar:Get(\"sv_cheats\") then\n    print(\"The server is running with cheats enabled.\")\nend\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} name\n * @return any\n */\n convar.Get(name)\n```\n\n### Example\n```js\nif (convar.Get(\"sv_cheats\")) {\n    console.log(\"The server is running with cheats enabled.\")\n}\n\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nobject Convars.Get(string name)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Get"
    },
    "convars.getflags": {
        "page": "# GetFlags\n\nReturns the convar flags.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param name string\n--- @return number\n convar:GetFlags(name)\n```\n### Flags\n\nThe value returned is a bit representation of the flags enabled for the convar.\nValues needed for the flags are available at ConvarFlags.\n\n### Example\n```lua\nlocal flags = convar:GetFlags(\"sv_cheats\")\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} name\n * @return number\n */\n convar.GetFlags(name)\n```\n### Flags\n\nThe value returned is a bit representation of the flags enabled for the convar.\nValues needed for the flags are available at ConvarFlags.\n\n### Example\n```js\nlet flags = convar.GetFlags(\"sv_cheats\")\n\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nlong Convars.GetFlags(string name)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetFlags"
    },
    "convars.gettype": {
        "page": "# GetType\n\nReturns the convar type.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param name string\n--- @return EConVarType\n convar:GetType(name)\n```\n\n### Example\n```lua\nif convar:GetType(\"sv_cheats\") == EConVarType.EConVarType_Bool then\n    print(\"sv_cheats is a boolean convar\")\nend\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} name\n * @return EConVarType\n */\n convar.GetType(name)\n```\n\n### Example\n```js\nif (convar.GetType(\"sv_cheats\") == EConVarType.EConVarType_Bool) {\n    console.log(\"sv_cheats is a boolean convar\")\n}\n\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nEConVarType Convars.GetType(string name)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetType"
    },
    "convars.hasflags": {
        "page": "# HasFlags\n\nChecks if a convar has the flags.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param name string\n--- @param flags number\n--- @return boolean\n convar:HasFlags(name, flags)\n```\n### Flags\n\nThe `flags` field can be combined with multiple flags using the OR operator (`|`).\nValues needed for the flags are available at ConvarFlags.\n\n### Example\n```lua\nif convar:HasFlags(\"sv_cheats\", ConvarFlags.FCVAR_NOTIFY) then\n    print(\"sv_cheats is notifying the server for changes.\")\nend\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} name\n * @param {number} flags\n * @return bool\n */\n convar.HasFlags(name, flags)\n```\n### Flags\n\nThe `flags` field can be combined with multiple flags using the OR operator (`|`).\nValues needed for the flags are available at ConvarFlags.\n\n### Example\n```js\nif (convar.HasFlags(\"sv_cheats\", ConvarFlags.FCVAR_NOTIFY)) {\n    console.log(\"sv_cheats is notifying the server for changes.\")\n}\n\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nbool Convars.HasFlags(string name, long flags)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "HasFlags"
    },
    "convars.removeflags": {
        "page": "# RemoveFlags\n\nRemoves the flags to the convar.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param name string\n--- @param flags number\n--- @return nil\n convar:RemoveFlags(name, flags)\n```\n### Flags\n\nThe `flags` field can be combined with multiple flags using the OR operator (`|`).\nValues needed for the flags are available at ConvarFlags.\n\n### Example\n```lua\nconvar:RemoveFlags(\"sv_cheats\", ConvarFlags.FCVAR_NOTIFY | ConvarFlags.FCVAR_REPLICATED)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} name\n * @param {number} flags\n * @return void\n */\n convar.RemoveFlags(name, flags)\n```\n### Flags\n\nThe `flags` field can be combined with multiple flags using the OR operator (`|`).\nValues needed for the flags are available at ConvarFlags.\n\n### Example\n```js\nconvar.RemoveFlags(\"sv_cheats\", ConvarFlags.FCVAR_NOTIFY | ConvarFlags.FCVAR_REPLICATED)\n\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Convars.RemoveFlags(string name, long flags)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "RemoveFlags"
    },
    "convars.set": {
        "page": "# Set\n\nSets a convar value.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param name string\n--- @param value string\n--- @return nil\n convar:Set(name, value)\n```\n\n### Example\n```lua\nconvar:Set(\"sv_cheats\", \"true\")\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} name\n * @param {string} value\n * @return void\n */\n convar.Set(name, value)\n```\n\n### Example\n```js\nconvar.Set(\"sv_cheats\", \"true\")\n\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Convars.Set(string name, string value)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Set"
    },
    "database": {
        "page": "# Database\n\nThis is the list of items available for Database API.\n\n## Classes\n\n<Catalog filter=\"database.database,database.querybuilder\"></Catalog>## Informations\n\n<Catalog filter=\"database.querybuilder-rules\"></Catalog>",
        "title": "Database",
        "icon": "database"
    },
    "database.database": {
        "page": "# Database\n\nThis is the Database class.\n\n<Tabs defaultValue=\"lua\">\n      <TabsList class=\"grid w-full grid-cols-3 flex\">\n        <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n      </TabsList>\n    <TabsContent value=\"lua\">\n## Constructor\n```lua\n--- @param connection_name string\n--- @return Database\nlocal database = db:Database(connection_name)\n```\n# Functions\nHere are listed all the functions.\n## IsConnected\n```lua\n--- @return boolean\n database:IsConnected()\n```\n## QueryBuilder\n```lua\n--- @return QueryBuilder\n database:QueryBuilder()\n```\n## EscapeString\n> [!note]\n> If the database is not connected it will return the same value.\n```lua\n--- @param value string\n--- @return string\n database:EscapeString(value)\n```\n## Query\n```lua\n--- @param query string\n--- @param callback fun(err:string,result:table)\n--- @return nil\n database:Query(query, callback)\n```\n## QueryParams\n> [!note]\n> If the database is not connected it will never execute.\n\n### Params\nThe parameters can be used by the following format inside the query string:\n```\n@key\n[key]\n{key}\n```\n\nInside the parameters value it needs to be format of key and value.\n\nThe values can be a string, a number or a bool. It will automatically convert to string form and perform EscapeString to it so that there would be no chance for SQL Injection.\n\n> [!warning]\n> Works only with SQL databases.\n```lua\n--- @param query string\n--- @param params table\n--- @param callback fun(err:string,result:table)\n--- @return nil\n database:QueryParams(query, params, callback)\n```\n\n### Example\n```lua\nAddEventHandler(\"OnPluginStart\", function(event)\n    db = Database(\"CONNECTION_NAME\")\n\n    if not db:IsConnected() then return end\n    db:Query(\"select * from users\", function(err, result)\n        if err then return print(err) end\n\n        for i = 1, #result do\n            print(\"Row \" .. i .. \": \" .. json.encode(result[i]))\n        end\n    end)\n\n    return EventResult.Continue\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n## Constructor\n```js\n/**\n * @param {string} connection_name\n * @return Database\n */\nlet database = db.Database(connection_name)\n```\n# Functions\nHere are listed all the functions.\n## IsConnected\n```js\n/**\n * @return bool\n */\n database.IsConnected()\n```\n## QueryBuilder\n```js\n/**\n * @return QueryBuilder\n */\n database.QueryBuilder()\n```\n## EscapeString\n> [!note]\n> If the database is not connected it will return the same value.\n```js\n/**\n * @param {string} value\n * @return string\n */\n database.EscapeString(value)\n```\n## Query\n```js\n/**\n * @param {string} query\n * @param {(err:string, result:any[]) => void} callback\n * @return void\n */\n database.Query(query, callback)\n```\n## QueryParams\n> [!note]\n> If the database is not connected it will never execute.\n\n### Params\nThe parameters can be used by the following format inside the query string:\n```\n@key\n[key]\n{key}\n```\n\nInside the parameters value it needs to be format of key and value.\n\nThe values can be a string, a number or a bool. It will automatically convert to string form and perform EscapeString to it so that there would be no chance for SQL Injection.\n\n> [!warning]\n> Works only with SQL databases.\n```js\n/**\n * @param {string} query\n * @param {Object.<string, any>} params\n * @param {(err:string, result:any[]) => void} callback\n * @return void\n */\n database.QueryParams(query, params, callback)\n```\n\n### Example\n```js\nAddEventHandler(\"OnPluginStart\", (event) => {\n    db = Database(\"CONNECTION_NAME\")\n\n    if (!db.IsConnected()) return;\n    db.Query(\"select * from users\", (err, result) => {\n        if (err) return console.log(err);\n\n        for (let i = 0; i < result.length; i++) {\n            console.log(`Row ${i + 1}: ${JSON.stringify(result[i])}`)\n        }\n    })\n\n    return EventResult.Continue\n})\n\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n## Constructor\n```cs\nvar database = Database.Database(string connection_name)\n```\n# Functions\nHere are listed all the functions.\n## IsConnected\n```cs\nbool database.IsConnected()\n```\n## QueryBuilder\n```cs\nQueryBuilder database.QueryBuilder()\n```\n## EscapeString\n> [!note]\n> If the database is not connected it will return the same value.\n```cs\nstring database.EscapeString(string value)\n```\n## Query\n```cs\nvoid database.Query(string query, Func<string,any[], void> callback)\n```\n## QueryParams\n> [!note]\n> If the database is not connected it will never execute.\n\n### Params\nThe parameters can be used by the following format inside the query string:\n```\n@key\n[key]\n{key}\n```\n\nInside the parameters value it needs to be format of key and value.\n\nThe values can be a string, a number or a bool. It will automatically convert to string form and perform EscapeString to it so that there would be no chance for SQL Injection.\n\n> [!warning]\n> Works only with SQL databases.\n```cs\nvoid database.QueryParams(string query, Dictionary<string, object> params, Func<string,any[], void> callback)\n```\n\n</TabsContent>\n    </Tabs>",
        "title": "Database"
    },
    "database.querybuilder-rules": {
        "page": "Below will be listed all the query builder rules available.\n\n|       Rule      |                                                                           Description                                                                           |\n|:---------------:|:---------------------------------------------------------------------------------------------------------------------------------------------------------------:|\n|    `nullable`   |                                                                  Marks the column as nullable.                                                                  |\n|    `integer`    |                                                               Sets the column to an integer type.                                                               |\n|     `string`    |                                                                Sets the column to a string type.                                                                |\n|    `boolean`    |                                                                Sets the column to a boolean type.                                                               |\n|      `date`     |                                                                 Sets the column to a date type.                                                                 |\n|    `datetime`   |                                                               Sets the column to a datetime type.                                                               |\n|   `min:VALUE`   | Sets the minimum value for the column. If the column is an integer, and the value is greater or equal than 0, it will change automatically to unsigned integer. |\n|   `max:VALUE`   |                                                               Sets the maximum length of a string.                                                              |\n|      `json`     |                                                                 Marks the column as a JSON type.                                                                |\n|     `float`     |                                                                Marks the column as a float type.                                                                |\n| `default:VALUE` |                                                               Sets the default value for a column.                                                              |\n|     `unique`    |                                                                   Marks the column as unique.                                                                   |\n|    `primary`    |                                                                   Marks the column as primary.                                                                  |\n|     `index`     |                                                                    Marks the column as index.                                                                   |\n| `autoincrement` |                                                                Sets the column to auto increment.                                                               |",
        "title": "Query Builder Rules"
    },
    "database.querybuilder": {
        "page": "# QueryBuilder\n\nThis is a class to build an SQL query.\n\n<Tabs defaultValue=\"lua\">\n      <TabsList class=\"grid w-full grid-cols-3 flex\">\n        <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n      </TabsList>\n    <TabsContent value=\"lua\">\n# Functions\nHere are listed all the functions.\n## Table\n```lua\n--- @param table_name string\n--- @return QueryBuilder\n querybuilder:Table(table_name)\n```\n## Select\n```lua\n--- @param columns table\n--- @return QueryBuilder\n querybuilder:Select(columns)\n```\n## Insert\n`values` is a Key-Value Map (Key: Column, Value: Data)\n```lua\n--- @param values table\n--- @return QueryBuilder\n querybuilder:Insert(values)\n```\n## Update\n`values` is a Key-Value Map (Key: Column, Value: Data)\n```lua\n--- @param values table\n--- @return QueryBuilder\n querybuilder:Update(values)\n```\n## Delete\n```lua\n--- @return QueryBuilder\n querybuilder:Delete()\n```\n## Where\n```lua\n--- @param column string\n--- @param operator string\n--- @param value any\n--- @return QueryBuilder\n querybuilder:Where(column, operator, value)\n```\n## Where\n```lua\n--- @param column string\n--- @param operator string\n--- @param value any\n--- @return QueryBuilder\n querybuilder:Where(column, operator, value)\n```\n## OrWhere\n```lua\n--- @param column string\n--- @param operator string\n--- @param value any\n--- @return QueryBuilder\n querybuilder:OrWhere(column, operator, value)\n```\n## Join\n```lua\n--- @param table_name string\n--- @param condition string\n--- @param join_type string\n--- @return QueryBuilder\n querybuilder:Join(table_name, condition, join_type)\n```\n## OrderBy\n`columns` is a Key-Value Map (Key: Column, Value: Direction)\n```lua\n--- @param columns table\n--- @return QueryBuilder\n querybuilder:OrderBy(columns)\n```\n## Limit\n```lua\n--- @param count number\n--- @return QueryBuilder\n querybuilder:Limit(count)\n```\n## GroupBy\n```lua\n--- @param columns table\n--- @return QueryBuilder\n querybuilder:GroupBy(columns)\n```\n## Create\n`values` is a Key-Value Map (Key: Column, Value: Column Rules)\n```lua\n--- @param values table\n--- @return QueryBuilder\n querybuilder:Create(values)\n```\n## Alter\n`add_columns` and `modify_columns` are a Key-Value Map (Key: Column, Value: Column Rules)\n`remove_columns` is a list of columns to be remove\n```lua\n--- @param add_columns table\n--- @param remove_columns table\n--- @param modify_columns table\n--- @return QueryBuilder\n querybuilder:Alter(add_columns, remove_columns, modify_columns)\n```\n## Drop\n```lua\n--- @return QueryBuilder\n querybuilder:Drop()\n```\n## OnDuplicate\n`values` is a Key-Value Map (Key: Column, Value: Data)\n```lua\n--- @param update_value table\n--- @return QueryBuilder\n querybuilder:OnDuplicate(update_value)\n```\n## Having\n```lua\n--- @param condition string\n--- @return QueryBuilder\n querybuilder:Having(condition)\n```\n## Distinct\n```lua\n--- @return QueryBuilder\n querybuilder:Distinct()\n```\n## Offset\n```lua\n--- @param offset number\n--- @return QueryBuilder\n querybuilder:Offset(offset)\n```\n## Union\n```lua\n--- @param query string\n--- @param all boolean\n--- @return QueryBuilder\n querybuilder:Union(query, all)\n```\n## Execute\n```lua\n--- @param callback fun(err:string,result:table)\n--- @return QueryBuilder\n querybuilder:Execute(callback)\n```\n\n### Example\n```lua\nAddEventHandler(\"OnPluginStart\", function(event)\n    db = Database(\"CONNECTION_NAME\")\n\n    if not db:IsConnected() then return end\n\n    db:QueryBuilder():Table(\"users\"):Create({\n        steamid = \"string|max:128|unique\",\n        name = \"string\"\n    }):Execute()\n\n    return EventResult.Continue\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n# Functions\nHere are listed all the functions.\n## Table\n```js\n/**\n * @param {string} table_name\n * @return QueryBuilder\n */\n querybuilder.Table(table_name)\n```\n## Select\n```js\n/**\n * @param {string[]} columns\n * @return QueryBuilder\n */\n querybuilder.Select(columns)\n```\n## Insert\n`values` is a Key-Value Map (Key: Column, Value: Data)\n```js\n/**\n * @param {Object.<string, any>} values\n * @return QueryBuilder\n */\n querybuilder.Insert(values)\n```\n## Update\n`values` is a Key-Value Map (Key: Column, Value: Data)\n```js\n/**\n * @param {Object.<string, any>} values\n * @return QueryBuilder\n */\n querybuilder.Update(values)\n```\n## Delete\n```js\n/**\n * @return QueryBuilder\n */\n querybuilder.Delete()\n```\n## Where\n```js\n/**\n * @param {string} column\n * @param {string} operator\n * @param {any} value\n * @return QueryBuilder\n */\n querybuilder.Where(column, operator, value)\n```\n## Where\n```js\n/**\n * @param {string} column\n * @param {string} operator\n * @param {any} value\n * @return QueryBuilder\n */\n querybuilder.Where(column, operator, value)\n```\n## OrWhere\n```js\n/**\n * @param {string} column\n * @param {string} operator\n * @param {any} value\n * @return QueryBuilder\n */\n querybuilder.OrWhere(column, operator, value)\n```\n## Join\n```js\n/**\n * @param {string} table_name\n * @param {string} condition\n * @param {string} join_type\n * @return QueryBuilder\n */\n querybuilder.Join(table_name, condition, join_type)\n```\n## OrderBy\n`columns` is a Key-Value Map (Key: Column, Value: Direction)\n```js\n/**\n * @param {Object.<string, string>} columns\n * @return QueryBuilder\n */\n querybuilder.OrderBy(columns)\n```\n## Limit\n```js\n/**\n * @param {number} count\n * @return QueryBuilder\n */\n querybuilder.Limit(count)\n```\n## GroupBy\n```js\n/**\n * @param {string[]} columns\n * @return QueryBuilder\n */\n querybuilder.GroupBy(columns)\n```\n## Create\n`values` is a Key-Value Map (Key: Column, Value: Column Rules)\n```js\n/**\n * @param {Object.<string, string>} values\n * @return QueryBuilder\n */\n querybuilder.Create(values)\n```\n## Alter\n`add_columns` and `modify_columns` are a Key-Value Map (Key: Column, Value: Column Rules)\n`remove_columns` is a list of columns to be remove\n```js\n/**\n * @param {Object.<string, string>} add_columns\n * @param {Object.<string, string>} remove_columns\n * @param {Object.<string, string>} modify_columns\n * @return QueryBuilder\n */\n querybuilder.Alter(add_columns, remove_columns, modify_columns)\n```\n## Drop\n```js\n/**\n * @return QueryBuilder\n */\n querybuilder.Drop()\n```\n## OnDuplicate\n`values` is a Key-Value Map (Key: Column, Value: Data)\n```js\n/**\n * @param {Object.<string, any>} update_value\n * @return QueryBuilder\n */\n querybuilder.OnDuplicate(update_value)\n```\n## Having\n```js\n/**\n * @param {string} condition\n * @return QueryBuilder\n */\n querybuilder.Having(condition)\n```\n## Distinct\n```js\n/**\n * @return QueryBuilder\n */\n querybuilder.Distinct()\n```\n## Offset\n```js\n/**\n * @param {number} offset\n * @return QueryBuilder\n */\n querybuilder.Offset(offset)\n```\n## Union\n```js\n/**\n * @param {string} query\n * @param {bool} all\n * @return QueryBuilder\n */\n querybuilder.Union(query, all)\n```\n## Execute\n```js\n/**\n * @param {(err:string, result:any[]) => void} callback\n * @return QueryBuilder\n */\n querybuilder.Execute(callback)\n```\n\n### Example\n```js\nAddEventHandler(\"OnPluginStart\", (event) => {\n    db = Database(\"CONNECTION_NAME\")\n\n    if (!db.IsConnected()) return;\n\n    db.QueryBuilder().Table(\"users\").Create({\n        steamid: \"string|max:128|unique\",\n        name: \"string\"\n    }).Execute()\n\n    return EventResult.Continue\n})\n\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n# Functions\nHere are listed all the functions.\n## Table\n```cs\nQueryBuilder querybuilder.Table(string table_name)\n```\n## Select\n```cs\nQueryBuilder querybuilder.Select(string[]? columns)\n```\n## Insert\n`values` is a Key-Value Map (Key: Column, Value: Data)\n```cs\nQueryBuilder querybuilder.Insert(Dictionary<string, object> values)\n```\n## Update\n`values` is a Key-Value Map (Key: Column, Value: Data)\n```cs\nQueryBuilder querybuilder.Update(Dictionary<string, object> values)\n```\n## Delete\n```cs\nQueryBuilder querybuilder.Delete()\n```\n## Where\n```cs\nQueryBuilder querybuilder.Where(string column, string operator, object value)\n```\n## Where\n```cs\nQueryBuilder querybuilder.Where(string column, string operator, object value)\n```\n## OrWhere\n```cs\nQueryBuilder querybuilder.OrWhere(string column, string operator, object value)\n```\n## Join\n```cs\nQueryBuilder querybuilder.Join(string table_name, string condition, string join_type)\n```\n## OrderBy\n`columns` is a Key-Value Map (Key: Column, Value: Direction)\n```cs\nQueryBuilder querybuilder.OrderBy(Dictionary<string, string> columns)\n```\n## Limit\n```cs\nQueryBuilder querybuilder.Limit(int count)\n```\n## GroupBy\n```cs\nQueryBuilder querybuilder.GroupBy(string[] columns)\n```\n## Create\n`values` is a Key-Value Map (Key: Column, Value: Column Rules)\n```cs\nQueryBuilder querybuilder.Create(Dictionary<string, string> values)\n```\n## Alter\n`add_columns` and `modify_columns` are a Key-Value Map (Key: Column, Value: Column Rules)\n`remove_columns` is a list of columns to be remove\n```cs\nQueryBuilder querybuilder.Alter(Dictionary<string, string> add_columns, Dictionary<string, string> remove_columns, Dictionary<string, string> modify_columns)\n```\n## Drop\n```cs\nQueryBuilder querybuilder.Drop()\n```\n## OnDuplicate\n`values` is a Key-Value Map (Key: Column, Value: Data)\n```cs\nQueryBuilder querybuilder.OnDuplicate(Dictionary<string, object> update_value)\n```\n## Having\n```cs\nQueryBuilder querybuilder.Having(string condition)\n```\n## Distinct\n```cs\nQueryBuilder querybuilder.Distinct()\n```\n## Offset\n```cs\nQueryBuilder querybuilder.Offset(int offset)\n```\n## Union\n```cs\nQueryBuilder querybuilder.Union(string query, bool all)\n```\n## Execute\n```cs\nQueryBuilder querybuilder.Execute(Func<string,any[], void> callback)\n```\n\n</TabsContent>\n    </Tabs>",
        "title": "QueryBuilder"
    },
    "entities": {
        "page": "# Entities\n\nThis is the list of items available for Entities API.\n\n## Functions\n\n<Catalog filter=\"entities.addhookentityoutput,entities.createentitybyname,entities.findentitiesbyclassname\"></Catalog>## Classes\n\n<Catalog filter=\"entities.centitykeyvalues\"></Catalog>",
        "title": "Entities",
        "icon": "user"
    },
    "entities.addhookentityoutput": {
        "page": "# AddHookEntityOutput\n\nAdds a hook output for an entity.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param class_name string\n--- @param output string\n--- @return HookHandle\n AddHookEntityOutput(class_name, output)\n```\n\n### Example\n```lua\nlocal output = AddHookEntityOutput(\"weapon_knife\", \"*\")\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} class_name\n * @param {string} output\n * @return HookHandle\n */\n AddHookEntityOutput(class_name, output)\n```\n\n### Example\n```js\nconst output = AddHookEntityOutput(\"weapon_knife\", \"*\")\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nHookHandle Generic.AddHookEntityOutput(string class_name, string output)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "AddHookEntityOutput"
    },
    "entities.centitykeyvalues": {
        "page": "# CEntityKeyValues\n\nThis is a class to build an entity spawn key values.\n\n<Tabs defaultValue=\"lua\">\n      <TabsList class=\"grid w-full grid-cols-3 flex\">\n        <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n      </TabsList>\n    <TabsContent value=\"lua\">\n## Constructor\n```lua\n--- @return CEntityKeyValues\nlocal centitykeyvalues = CEntityKeyValues()\n```\n# Functions\nHere are listed all the functions.\n## GetBool\n```lua\n--- @param key string\n--- @return boolean\n centitykeyvalues:GetBool(key)\n```\n## GetInt\n```lua\n--- @param key string\n--- @return number\n centitykeyvalues:GetInt(key)\n```\n## GetUint\n```lua\n--- @param key string\n--- @return number\n centitykeyvalues:GetUint(key)\n```\n## GetInt64\n```lua\n--- @param key string\n--- @return number\n centitykeyvalues:GetInt64(key)\n```\n## GetUint64\n```lua\n--- @param key string\n--- @return number\n centitykeyvalues:GetUint64(key)\n```\n## GetFloat\n```lua\n--- @param key string\n--- @return number\n centitykeyvalues:GetFloat(key)\n```\n## GetDouble\n```lua\n--- @param key string\n--- @return number\n centitykeyvalues:GetDouble(key)\n```\n## GetString\n```lua\n--- @param key string\n--- @return string\n centitykeyvalues:GetString(key)\n```\n## GetPtr\n```lua\n--- @param key string\n--- @return Memory\n centitykeyvalues:GetPtr(key)\n```\n## GetStringToken\n```lua\n--- @param key string\n--- @return number\n centitykeyvalues:GetStringToken(key)\n```\n## GetColor\n```lua\n--- @param key string\n--- @return Color\n centitykeyvalues:GetColor(key)\n```\n## GetVector\n```lua\n--- @param key string\n--- @return Vector\n centitykeyvalues:GetVector(key)\n```\n## GetVector2D\n```lua\n--- @param key string\n--- @return Vector2D\n centitykeyvalues:GetVector2D(key)\n```\n## GetVector4D\n```lua\n--- @param key string\n--- @return Vector4D\n centitykeyvalues:GetVector4D(key)\n```\n## GetQAngle\n```lua\n--- @param key string\n--- @return QAngle\n centitykeyvalues:GetQAngle(key)\n```\n## SetBool\n```lua\n--- @param key string\n--- @param value boolean\n--- @return nil\n centitykeyvalues:SetBool(key, value)\n```\n## SetInt\n```lua\n--- @param key string\n--- @param value number\n--- @return nil\n centitykeyvalues:SetInt(key, value)\n```\n## SetUint\n```lua\n--- @param key string\n--- @param value number\n--- @return nil\n centitykeyvalues:SetUint(key, value)\n```\n## SetInt64\n```lua\n--- @param key string\n--- @param value number\n--- @return nil\n centitykeyvalues:SetInt64(key, value)\n```\n## SetUint64\n```lua\n--- @param key string\n--- @param value number\n--- @return nil\n centitykeyvalues:SetUint64(key, value)\n```\n## SetFloat\n```lua\n--- @param key string\n--- @param value number\n--- @return nil\n centitykeyvalues:SetFloat(key, value)\n```\n## SetDouble\n```lua\n--- @param key string\n--- @param value number\n--- @return nil\n centitykeyvalues:SetDouble(key, value)\n```\n## SetString\n```lua\n--- @param key string\n--- @param value string\n--- @return nil\n centitykeyvalues:SetString(key, value)\n```\n## SetPtr\n```lua\n--- @param key string\n--- @param value Memory\n--- @return nil\n centitykeyvalues:SetPtr(key, value)\n```\n## SetStringToken\n```lua\n--- @param key string\n--- @param value number\n--- @return nil\n centitykeyvalues:SetStringToken(key, value)\n```\n## SetColor\n```lua\n--- @param key string\n--- @param value Color\n--- @return nil\n centitykeyvalues:SetColor(key, value)\n```\n## SetVector\n```lua\n--- @param key string\n--- @param value Vector\n--- @return nil\n centitykeyvalues:SetVector(key, value)\n```\n## SetVector2D\n```lua\n--- @param key string\n--- @param value Vector2D\n--- @return nil\n centitykeyvalues:SetVector2D(key, value)\n```\n## SetVector4D\n```lua\n--- @param key string\n--- @param value Vector4D\n--- @return nil\n centitykeyvalues:SetVector4D(key, value)\n```\n## SetQAngle\n```lua\n--- @param key string\n--- @param value QAngle\n--- @return nil\n centitykeyvalues:SetQAngle(key, value)\n```\n\n### Example\n```lua\nlocal particle = CreateEntityByName(\"info_particle_system\")\nlocal particleSystem = CParticleSystem(particle)\nlocal keyvals = CEntityKeyValues()\n\n-- The effect needs to be precached\nkeyvals:SetString(\"effect_name\", \"particles/cs2fixes/player_beacon.vpcf\")\nkeyvals:SetInt(\"tint_cp\", 1)\nkeyvals:SetVector(\"origin\", Vector(2.3, 4.5, 6.7))\nkeyvals:SetBool(\"start_active\", true)\n\nparticleSystem.Tint = Color(0, 186, 105, 255)\nparticleSystem:Spawn(keyvals)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n## Constructor\n```js\n/**\n * @return CEntityKeyValues\n */\nlet centitykeyvalues = CEntityKeyValues()\n```\n# Functions\nHere are listed all the functions.\n## GetBool\n```js\n/**\n * @param {string} key\n * @return bool\n */\n centitykeyvalues.GetBool(key)\n```\n## GetInt\n```js\n/**\n * @param {string} key\n * @return number\n */\n centitykeyvalues.GetInt(key)\n```\n## GetUint\n```js\n/**\n * @param {string} key\n * @return number\n */\n centitykeyvalues.GetUint(key)\n```\n## GetInt64\n```js\n/**\n * @param {string} key\n * @return number\n */\n centitykeyvalues.GetInt64(key)\n```\n## GetUint64\n```js\n/**\n * @param {string} key\n * @return number\n */\n centitykeyvalues.GetUint64(key)\n```\n## GetFloat\n```js\n/**\n * @param {string} key\n * @return number\n */\n centitykeyvalues.GetFloat(key)\n```\n## GetDouble\n```js\n/**\n * @param {string} key\n * @return number\n */\n centitykeyvalues.GetDouble(key)\n```\n## GetString\n```js\n/**\n * @param {string} key\n * @return string\n */\n centitykeyvalues.GetString(key)\n```\n## GetPtr\n```js\n/**\n * @param {string} key\n * @return Memory\n */\n centitykeyvalues.GetPtr(key)\n```\n## GetStringToken\n```js\n/**\n * @param {string} key\n * @return number\n */\n centitykeyvalues.GetStringToken(key)\n```\n## GetColor\n```js\n/**\n * @param {string} key\n * @return Color\n */\n centitykeyvalues.GetColor(key)\n```\n## GetVector\n```js\n/**\n * @param {string} key\n * @return Vector\n */\n centitykeyvalues.GetVector(key)\n```\n## GetVector2D\n```js\n/**\n * @param {string} key\n * @return Vector2D\n */\n centitykeyvalues.GetVector2D(key)\n```\n## GetVector4D\n```js\n/**\n * @param {string} key\n * @return Vector4D\n */\n centitykeyvalues.GetVector4D(key)\n```\n## GetQAngle\n```js\n/**\n * @param {string} key\n * @return QAngle\n */\n centitykeyvalues.GetQAngle(key)\n```\n## SetBool\n```js\n/**\n * @param {string} key\n * @param {bool} value\n * @return void\n */\n centitykeyvalues.SetBool(key, value)\n```\n## SetInt\n```js\n/**\n * @param {string} key\n * @param {number} value\n * @return void\n */\n centitykeyvalues.SetInt(key, value)\n```\n## SetUint\n```js\n/**\n * @param {string} key\n * @param {number} value\n * @return void\n */\n centitykeyvalues.SetUint(key, value)\n```\n## SetInt64\n```js\n/**\n * @param {string} key\n * @param {number} value\n * @return void\n */\n centitykeyvalues.SetInt64(key, value)\n```\n## SetUint64\n```js\n/**\n * @param {string} key\n * @param {number} value\n * @return void\n */\n centitykeyvalues.SetUint64(key, value)\n```\n## SetFloat\n```js\n/**\n * @param {string} key\n * @param {number} value\n * @return void\n */\n centitykeyvalues.SetFloat(key, value)\n```\n## SetDouble\n```js\n/**\n * @param {string} key\n * @param {number} value\n * @return void\n */\n centitykeyvalues.SetDouble(key, value)\n```\n## SetString\n```js\n/**\n * @param {string} key\n * @param {string} value\n * @return void\n */\n centitykeyvalues.SetString(key, value)\n```\n## SetPtr\n```js\n/**\n * @param {string} key\n * @param {Memory} value\n * @return void\n */\n centitykeyvalues.SetPtr(key, value)\n```\n## SetStringToken\n```js\n/**\n * @param {string} key\n * @param {number} value\n * @return void\n */\n centitykeyvalues.SetStringToken(key, value)\n```\n## SetColor\n```js\n/**\n * @param {string} key\n * @param {Color} value\n * @return void\n */\n centitykeyvalues.SetColor(key, value)\n```\n## SetVector\n```js\n/**\n * @param {string} key\n * @param {Vector} value\n * @return void\n */\n centitykeyvalues.SetVector(key, value)\n```\n## SetVector2D\n```js\n/**\n * @param {string} key\n * @param {Vector2D} value\n * @return void\n */\n centitykeyvalues.SetVector2D(key, value)\n```\n## SetVector4D\n```js\n/**\n * @param {string} key\n * @param {Vector4D} value\n * @return void\n */\n centitykeyvalues.SetVector4D(key, value)\n```\n## SetQAngle\n```js\n/**\n * @param {string} key\n * @param {QAngle} value\n * @return void\n */\n centitykeyvalues.SetQAngle(key, value)\n```\n\n### Example\n```js\nconst particle = CreateEntityByName(\"info_particle_system\")\nconst particleSystem = CParticleSystem(particle)\nconst keyvals = CEntityKeyValues()\n\n// The effect needs to be precached\nkeyvals.SetString(\"effect_name\", \"particles/cs2fixes/player_beacon.vpcf\")\nkeyvals.SetInt(\"tint_cp\", 1)\nkeyvals.SetVector(\"origin\", Vector(2.3, 4.5, 6.7))\nkeyvals.SetBool(\"start_active\", true)\n\nparticleSystem.Tint = Color(0, 186, 105, 255)\nparticleSystem.Spawn(keyvals)\n\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n## Constructor\n```cs\nvar centitykeyvalues = Entities.CEntityKeyValues()\n```\n# Functions\nHere are listed all the functions.\n## GetBool\n```cs\nbool centitykeyvalues.GetBool(string key)\n```\n## GetInt\n```cs\nint centitykeyvalues.GetInt(string key)\n```\n## GetUint\n```cs\nuint centitykeyvalues.GetUint(string key)\n```\n## GetInt64\n```cs\nlong centitykeyvalues.GetInt64(string key)\n```\n## GetUint64\n```cs\nulong centitykeyvalues.GetUint64(string key)\n```\n## GetFloat\n```cs\nfloat centitykeyvalues.GetFloat(string key)\n```\n## GetDouble\n```cs\ndouble centitykeyvalues.GetDouble(string key)\n```\n## GetString\n```cs\nstring centitykeyvalues.GetString(string key)\n```\n## GetPtr\n```cs\nMemory centitykeyvalues.GetPtr(string key)\n```\n## GetStringToken\n```cs\nuint centitykeyvalues.GetStringToken(string key)\n```\n## GetColor\n```cs\nColor centitykeyvalues.GetColor(string key)\n```\n## GetVector\n```cs\nVector centitykeyvalues.GetVector(string key)\n```\n## GetVector2D\n```cs\nVector2D centitykeyvalues.GetVector2D(string key)\n```\n## GetVector4D\n```cs\nVector4D centitykeyvalues.GetVector4D(string key)\n```\n## GetQAngle\n```cs\nQAngle centitykeyvalues.GetQAngle(string key)\n```\n## SetBool\n```cs\nvoid centitykeyvalues.SetBool(string key, bool value)\n```\n## SetInt\n```cs\nvoid centitykeyvalues.SetInt(string key, int value)\n```\n## SetUint\n```cs\nvoid centitykeyvalues.SetUint(string key, uint value)\n```\n## SetInt64\n```cs\nvoid centitykeyvalues.SetInt64(string key, long value)\n```\n## SetUint64\n```cs\nvoid centitykeyvalues.SetUint64(string key, ulong value)\n```\n## SetFloat\n```cs\nvoid centitykeyvalues.SetFloat(string key, float value)\n```\n## SetDouble\n```cs\nvoid centitykeyvalues.SetDouble(string key, double value)\n```\n## SetString\n```cs\nvoid centitykeyvalues.SetString(string key, string value)\n```\n## SetPtr\n```cs\nvoid centitykeyvalues.SetPtr(string key, Memory value)\n```\n## SetStringToken\n```cs\nvoid centitykeyvalues.SetStringToken(string key, uint value)\n```\n## SetColor\n```cs\nvoid centitykeyvalues.SetColor(string key, Color value)\n```\n## SetVector\n```cs\nvoid centitykeyvalues.SetVector(string key, Vector value)\n```\n## SetVector2D\n```cs\nvoid centitykeyvalues.SetVector2D(string key, Vector2D value)\n```\n## SetVector4D\n```cs\nvoid centitykeyvalues.SetVector4D(string key, Vector4D value)\n```\n## SetQAngle\n```cs\nvoid centitykeyvalues.SetQAngle(string key, QAngle value)\n```\n\n</TabsContent>\n    </Tabs>",
        "title": "CEntityKeyValues"
    },
    "entities.createentitybyname": {
        "page": "# CreateEntityByName\n\nCreates an entity by the provided class name.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param class_name string\n--- @return CEntityInstance\n CreateEntityByName(class_name)\n```\n\n### Example\n```lua\nlocal ent = CreateEntityByName(\"prop_dynamic_override\")\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} class_name\n * @return CEntityInstance\n */\n CreateEntityByName(class_name)\n```\n\n### Example\n```js\nconst ent = CreateEntityByName(\"prop_dynamic_override\")\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nCEntityInstance Generic.CreateEntityByName(string class_name)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "CreateEntityByName"
    },
    "entities.findentitiesbyclassname": {
        "page": "# FindEntitiesByClassname\n\nReturns all the `CEntityInstance` for all the entities available with the specified classname.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param class_name string\n--- @return table\n FindEntitiesByClassname(class_name)\n```\n\n### Example\n```lua\nlocal teams = FindEntitiesByClassname(\"cs_team_manager\")\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} class_name\n * @return CEntityInstance[]\n */\n FindEntitiesByClassname(class_name)\n```\n\n### Example\n```js\nconst teams = FindEntitiesByClassname(\"cs_team_manager\")\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nCEntityInstance[] Generic.FindEntitiesByClassname(string class_name)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "FindEntitiesByClassname"
    },
    "events": {
        "page": "# Events\n\nThis is the list of items available for Events API.\n\n## Functions\n\n<Catalog filter=\"events.addeventhandler,events.removeeventhandler,events.triggerevent\"></Catalog>## Classes\n\n<Catalog filter=\"events.event\"></Catalog>",
        "title": "Events",
        "icon": "code"
    },
    "events.addeventhandler": {
        "page": "# AddEventHandler\n\nAdds a new event handler for the specified event.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param event_name string\n--- @param callback fun(event:Event,...:any):EventResult|nil\n--- @return EventHandler\n AddEventHandler(event_name, callback)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} event_name\n * @param {(event:Event, ...:any) => EventResult?} callback\n * @return EventHandler\n */\n AddEventHandler(event_name, callback)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nEventHandler Generic.AddEventHandler(string event_name, Func<Event,object, EventResult?> callback)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "AddEventHandler"
    },
    "events.event": {
        "page": "# Event\n\nThis is the Event class.\nGenerates an event object to trigger a game event from the Source2 game.\n\n<Tabs defaultValue=\"lua\">\n      <TabsList class=\"grid w-full grid-cols-3 flex\">\n        <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n      </TabsList>\n    <TabsContent value=\"lua\">\n## Constructor\n```lua\n--- @param event_name string\n--- @return Event\nlocal event = Event(event_name)\n```\n# Functions\nHere are listed all the functions.\n## GetInvokingPlugin\n```lua\n--- @return string\n event:GetInvokingPlugin()\n```\n## IsGameEvent\n```lua\n--- @return boolean\n event:IsGameEvent()\n```\n## IsHook\n```lua\n--- @return boolean\n event:IsHook()\n```\n## SetBool\n```lua\n--- @param key string\n--- @param value boolean\n--- @return nil\n event:SetBool(key, value)\n```\n## SetInt\n```lua\n--- @param key string\n--- @param value number\n--- @return nil\n event:SetInt(key, value)\n```\n## SetUint64\n```lua\n--- @param key string\n--- @param value number\n--- @return nil\n event:SetUint64(key, value)\n```\n## SetFloat\n```lua\n--- @param key string\n--- @param value number\n--- @return nil\n event:SetFloat(key, value)\n```\n## SetString\n```lua\n--- @param key string\n--- @param value string\n--- @return nil\n event:SetString(key, value)\n```\n## GetBool\n```lua\n--- @param key string\n--- @return boolean\n event:GetBool(key)\n```\n## GetInt\n```lua\n--- @param key string\n--- @return number\n event:GetInt(key)\n```\n## GetUint64\n```lua\n--- @param key string\n--- @return number\n event:GetUint64(key)\n```\n## GetFloat\n```lua\n--- @param key string\n--- @return number\n event:GetFloat(key)\n```\n## GetString\n```lua\n--- @param key string\n--- @return string\n event:GetString(key)\n```\n## GetReturn\n```lua\n--- @return any\n event:GetReturn()\n```\n## SetReturn\n```lua\n--- @param value any\n--- @return nil\n event:SetReturn(value)\n```\n## FireEvent\n```lua\n--- @param dont_broadcast boolean\n--- @return nil\n event:FireEvent(dont_broadcast)\n```\n## FireEventToClient\n```lua\n--- @param playerid number\n--- @return nil\n event:FireEventToClient(playerid)\n```\n## SetHookBoolean\n```lua\n--- @param index number\n--- @param value boolean\n--- @return nil\n event:SetHookBoolean(index, value)\n```\n## SetHookInt\n```lua\n--- @param index number\n--- @param value number\n--- @return nil\n event:SetHookInt(index, value)\n```\n## SetHookUInt\n```lua\n--- @param index number\n--- @param value number\n--- @return nil\n event:SetHookUInt(index, value)\n```\n## SetHookUInt64\n```lua\n--- @param index number\n--- @param value number\n--- @return nil\n event:SetHookUInt64(index, value)\n```\n## SetHookInt64\n```lua\n--- @param index number\n--- @param value number\n--- @return nil\n event:SetHookInt64(index, value)\n```\n## SetHookFloat\n```lua\n--- @param index number\n--- @param value number\n--- @return nil\n event:SetHookFloat(index, value)\n```\n## SetHookDouble\n```lua\n--- @param index number\n--- @param value number\n--- @return nil\n event:SetHookDouble(index, value)\n```\n## SetHookString\n```lua\n--- @param index number\n--- @param value string\n--- @return nil\n event:SetHookString(index, value)\n```\n## SetHookPointer\n```lua\n--- @param index number\n--- @param value Memory\n--- @return nil\n event:SetHookPointer(index, value)\n```\n## GetHookBoolean\n```lua\n--- @param index number\n--- @return boolean\n event:GetHookBoolean(index)\n```\n## GetHookInt\n```lua\n--- @param index number\n--- @return number\n event:GetHookInt(index)\n```\n## GetHookUInt\n```lua\n--- @param index number\n--- @return number\n event:GetHookUInt(index)\n```\n## GetHookInt64\n```lua\n--- @param index number\n--- @return number\n event:GetHookInt64(index)\n```\n## GetHookUInt64\n```lua\n--- @param index number\n--- @return number\n event:GetHookUInt64(index)\n```\n## GetHookFloat\n```lua\n--- @param index number\n--- @return number\n event:GetHookFloat(index)\n```\n## GetHookDouble\n```lua\n--- @param index number\n--- @return number\n event:GetHookDouble(index)\n```\n## GetHookString\n```lua\n--- @param index number\n--- @return string\n event:GetHookString(index)\n```\n## GetHookPointer\n```lua\n--- @param index number\n--- @return Memory\n event:GetHookPointer(index)\n```\n## GetHookReturn\n```lua\n--- @return any\n event:GetHookReturn()\n```\n## SetHookReturn\n```lua\n--- @param value any\n--- @return \n event:SetHookReturn(value)\n```\n## GetNoBroadcast\n```lua\n--- @return boolean\n event:GetNoBroadcast()\n```\n## SetNoBroadcast\n```lua\n--- @param value boolean\n--- @return nil\n event:SetNoBroadcast(value)\n```\n\n### Example\n```lua\nAddEventHandler(\"OnPlayerDeath\", function(event)\n    local playerid = event:GetInt(\"userid\")     -- Retrieve the ID of the player who died.\n    local attackerid = event:GetInt(\"attacker\") -- Retrieve the ID of the player who attacked.\n    local headshot = event:GetBool(\"headshot\")  -- Check if the kill was a headshot.\n    local noscope = event:GetBool(\"noscope\")    -- Check if the kill was performed without a scope.\n\n    event:SetBool(\"headshot\", true)\n    event:SetBool(\"wipe\", true)\n    event:SetBool(\"noscope\", true)\n    return EventResult.Continue\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n## Constructor\n```js\n/**\n * @param {string} event_name\n * @return Event\n */\nlet event = Event(event_name)\n```\n# Functions\nHere are listed all the functions.\n## GetInvokingPlugin\n```js\n/**\n * @return string\n */\n event.GetInvokingPlugin()\n```\n## IsGameEvent\n```js\n/**\n * @return bool\n */\n event.IsGameEvent()\n```\n## IsHook\n```js\n/**\n * @return bool\n */\n event.IsHook()\n```\n## SetBool\n```js\n/**\n * @param {string} key\n * @param {bool} value\n * @return void\n */\n event.SetBool(key, value)\n```\n## SetInt\n```js\n/**\n * @param {string} key\n * @param {number} value\n * @return void\n */\n event.SetInt(key, value)\n```\n## SetUint64\n```js\n/**\n * @param {string} key\n * @param {number} value\n * @return void\n */\n event.SetUint64(key, value)\n```\n## SetFloat\n```js\n/**\n * @param {string} key\n * @param {number} value\n * @return void\n */\n event.SetFloat(key, value)\n```\n## SetString\n```js\n/**\n * @param {string} key\n * @param {string} value\n * @return void\n */\n event.SetString(key, value)\n```\n## GetBool\n```js\n/**\n * @param {string} key\n * @return bool\n */\n event.GetBool(key)\n```\n## GetInt\n```js\n/**\n * @param {string} key\n * @return number\n */\n event.GetInt(key)\n```\n## GetUint64\n```js\n/**\n * @param {string} key\n * @return number\n */\n event.GetUint64(key)\n```\n## GetFloat\n```js\n/**\n * @param {string} key\n * @return number\n */\n event.GetFloat(key)\n```\n## GetString\n```js\n/**\n * @param {string} key\n * @return string\n */\n event.GetString(key)\n```\n## GetReturn\n```js\n/**\n * @return any\n */\n event.GetReturn()\n```\n## SetReturn\n```js\n/**\n * @param {any} value\n * @return void\n */\n event.SetReturn(value)\n```\n## FireEvent\n```js\n/**\n * @param {bool} dont_broadcast\n * @return void\n */\n event.FireEvent(dont_broadcast)\n```\n## FireEventToClient\n```js\n/**\n * @param {number} playerid\n * @return void\n */\n event.FireEventToClient(playerid)\n```\n## SetHookBoolean\n```js\n/**\n * @param {number} index\n * @param {bool} value\n * @return void\n */\n event.SetHookBoolean(index, value)\n```\n## SetHookInt\n```js\n/**\n * @param {number} index\n * @param {number} value\n * @return void\n */\n event.SetHookInt(index, value)\n```\n## SetHookUInt\n```js\n/**\n * @param {number} index\n * @param {number} value\n * @return void\n */\n event.SetHookUInt(index, value)\n```\n## SetHookUInt64\n```js\n/**\n * @param {number} index\n * @param {number} value\n * @return void\n */\n event.SetHookUInt64(index, value)\n```\n## SetHookInt64\n```js\n/**\n * @param {number} index\n * @param {number} value\n * @return void\n */\n event.SetHookInt64(index, value)\n```\n## SetHookFloat\n```js\n/**\n * @param {number} index\n * @param {number} value\n * @return void\n */\n event.SetHookFloat(index, value)\n```\n## SetHookDouble\n```js\n/**\n * @param {number} index\n * @param {number} value\n * @return void\n */\n event.SetHookDouble(index, value)\n```\n## SetHookString\n```js\n/**\n * @param {number} index\n * @param {string} value\n * @return void\n */\n event.SetHookString(index, value)\n```\n## SetHookPointer\n```js\n/**\n * @param {number} index\n * @param {Memory} value\n * @return void\n */\n event.SetHookPointer(index, value)\n```\n## GetHookBoolean\n```js\n/**\n * @param {number} index\n * @return bool\n */\n event.GetHookBoolean(index)\n```\n## GetHookInt\n```js\n/**\n * @param {number} index\n * @return number\n */\n event.GetHookInt(index)\n```\n## GetHookUInt\n```js\n/**\n * @param {number} index\n * @return number\n */\n event.GetHookUInt(index)\n```\n## GetHookInt64\n```js\n/**\n * @param {number} index\n * @return number\n */\n event.GetHookInt64(index)\n```\n## GetHookUInt64\n```js\n/**\n * @param {number} index\n * @return number\n */\n event.GetHookUInt64(index)\n```\n## GetHookFloat\n```js\n/**\n * @param {number} index\n * @return number\n */\n event.GetHookFloat(index)\n```\n## GetHookDouble\n```js\n/**\n * @param {number} index\n * @return number\n */\n event.GetHookDouble(index)\n```\n## GetHookString\n```js\n/**\n * @param {number} index\n * @return string\n */\n event.GetHookString(index)\n```\n## GetHookPointer\n```js\n/**\n * @param {number} index\n * @return Memory\n */\n event.GetHookPointer(index)\n```\n## GetHookReturn\n```js\n/**\n * @return any\n */\n event.GetHookReturn()\n```\n## SetHookReturn\n```js\n/**\n * @param {any} value\n * @return \n */\n event.SetHookReturn(value)\n```\n## GetNoBroadcast\n```js\n/**\n * @return bool\n */\n event.GetNoBroadcast()\n```\n## SetNoBroadcast\n```js\n/**\n * @param {bool} value\n * @return void\n */\n event.SetNoBroadcast(value)\n```\n\n### Example\n```js\nAddEventHandler(\"OnPlayerDeath\", (event) => {\n    let playerid = event.GetInt(\"userid\") // Retrieve the ID of the player who died.\n    let attackerid = event.GetInt(\"attacker\") // Retrieve the ID of the player who attacked.\n    let headshot = event.GetBool(\"headshot\") // Check if the kill was a headshot.\n    let noscope = event.GetBool(\"noscope\") // Check if the kill was performed without a scope.\n\n    event.SetBool(\"headshot\", true)\n    event.SetBool(\"wipe\", true)\n    event.SetBool(\"noscope\", true)\n    return EventResult.Continue\n})\n\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n## Constructor\n```cs\nvar event = Events.Event(string event_name)\n```\n# Functions\nHere are listed all the functions.\n## GetInvokingPlugin\n```cs\nstring event.GetInvokingPlugin()\n```\n## IsGameEvent\n```cs\nbool event.IsGameEvent()\n```\n## IsHook\n```cs\nbool event.IsHook()\n```\n## SetBool\n```cs\nvoid event.SetBool(string key, bool value)\n```\n## SetInt\n```cs\nvoid event.SetInt(string key, int value)\n```\n## SetUint64\n```cs\nvoid event.SetUint64(string key, ulong value)\n```\n## SetFloat\n```cs\nvoid event.SetFloat(string key, float value)\n```\n## SetString\n```cs\nvoid event.SetString(string key, string value)\n```\n## GetBool\n```cs\nbool event.GetBool(string key)\n```\n## GetInt\n```cs\nint event.GetInt(string key)\n```\n## GetUint64\n```cs\nulong event.GetUint64(string key)\n```\n## GetFloat\n```cs\nfloat event.GetFloat(string key)\n```\n## GetString\n```cs\nstring event.GetString(string key)\n```\n## GetReturn\n```cs\nobject event.GetReturn()\n```\n## SetReturn\n```cs\nvoid event.SetReturn(object value)\n```\n## FireEvent\n```cs\nvoid event.FireEvent(bool dont_broadcast)\n```\n## FireEventToClient\n```cs\nvoid event.FireEventToClient(int playerid)\n```\n## SetHookBoolean\n```cs\nvoid event.SetHookBoolean(uint index, bool value)\n```\n## SetHookInt\n```cs\nvoid event.SetHookInt(uint index, int value)\n```\n## SetHookUInt\n```cs\nvoid event.SetHookUInt(uint index, uint value)\n```\n## SetHookUInt64\n```cs\nvoid event.SetHookUInt64(uint index, ulong value)\n```\n## SetHookInt64\n```cs\nvoid event.SetHookInt64(uint index, long value)\n```\n## SetHookFloat\n```cs\nvoid event.SetHookFloat(uint index, float value)\n```\n## SetHookDouble\n```cs\nvoid event.SetHookDouble(uint index, double value)\n```\n## SetHookString\n```cs\nvoid event.SetHookString(uint index, string value)\n```\n## SetHookPointer\n```cs\nvoid event.SetHookPointer(uint index, Memory value)\n```\n## GetHookBoolean\n```cs\nbool event.GetHookBoolean(uint index)\n```\n## GetHookInt\n```cs\nint event.GetHookInt(uint index)\n```\n## GetHookUInt\n```cs\nuint event.GetHookUInt(uint index)\n```\n## GetHookInt64\n```cs\nlong event.GetHookInt64(uint index)\n```\n## GetHookUInt64\n```cs\nulong event.GetHookUInt64(uint index)\n```\n## GetHookFloat\n```cs\nfloat event.GetHookFloat(uint index)\n```\n## GetHookDouble\n```cs\ndouble event.GetHookDouble(uint index)\n```\n## GetHookString\n```cs\nstring event.GetHookString(uint index)\n```\n## GetHookPointer\n```cs\nMemory event.GetHookPointer(uint index)\n```\n## GetHookReturn\n```cs\nobject event.GetHookReturn()\n```\n## SetHookReturn\n```cs\n event.SetHookReturn(object value)\n```\n## GetNoBroadcast\n```cs\nbool event.GetNoBroadcast()\n```\n## SetNoBroadcast\n```cs\nvoid event.SetNoBroadcast(bool value)\n```\n\n</TabsContent>\n    </Tabs>",
        "title": "Event"
    },
    "events.removeeventhandler": {
        "page": "# RemoveEventHandler\n\nRemoves the specified event handler.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param handler EventHandler\n--- @return nil\n RemoveEventHandler(handler)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {EventHandler} handler\n * @return void\n */\n RemoveEventHandler(handler)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Generic.RemoveEventHandler(EventHandler handler)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "RemoveEventHandler"
    },
    "events.triggerevent": {
        "page": "# TriggerEvent\n\nTriggers an event and returns the event result and the event data.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param event_name string\n--- @param ... any\n--- @return EventResult,Event\n TriggerEvent(event_name, ...)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} event_name\n * @param {any} ...\n * @return [EventResult, Event]\n */\n TriggerEvent(event_name, ...)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\n(EventResult, Event) Generic.TriggerEvent(string event_name, object ...)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "TriggerEvent"
    },
    "events.core": {
        "page": "# Core Events\n\nThis is the list of items available for Core Events API.\n\n## Events\n\n<Catalog filter=\"events.core.findplayerbytarget,events.core.onallpluginsloaded,events.core.onclientchat,events.core.onclientcommand,events.core.onclientconnect,events.core.onclientconvarquery,events.core.onclientdisconnect,events.core.onclientkeystatechange,events.core.onclientprocessusercmds,events.core.onclientputinserver,events.core.onclientsteamauthorize,events.core.onclientsteamauthorizefail,events.core.onentityacceptinput,events.core.onentitycreated,events.core.onentitydeleted,events.core.onentityparentchanged,events.core.onentityspawned,events.core.ongametick,events.core.onmapload,events.core.onmapunload,events.core.onplayerchecktransmit,events.core.onplayerdamage,events.core.onplayerpostthink,events.core.onpluginstart,events.core.onpluginstop,events.core.onterminateround,events.core.onusermessagereceive,events.core.onusermessagesend\"></Catalog>",
        "title": "Core Events",
        "icon": "laptop-code"
    },
    "events.core.findplayerbytarget": {
        "page": "# FindPlayerByTarget\n\nThis game event is triggered when `FindPlayersByTarget` is being called.\n\n<Tabs defaultValue=\"lua\">\n          <TabsList class=\"grid w-full grid-cols-3 flex\">\n            <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n          </TabsList>\n        <TabsContent value=\"lua\">\n```lua\n--- @param event Event\n--- @param playerid number\n--- @param target string\n--- @return EventResult\n--- @event returns boolean via event:SetReturn\nAddEventHandler(\"FindPlayerByTarget\", function(event, playerid, target)\n    -- [[...]]\n    return EventResult.Continue;\nend)\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Event} event\n * @param {number} playerid\n * @param {string} target\n * @description Event returns bool via event.SetReturn\n * @return EventResult\n */\nAddEventHandler(\"FindPlayerByTarget\", (event, playerid, target) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\n// Event returns bool via event.SetReturn\n// The function returns an EventResult\nEvents.AddEventHandler(\"FindPlayerByTarget\", (Event @event, int playerid, string target) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n        </Tabs>",
        "title": "FindPlayerByTarget"
    },
    "events.core.onallpluginsloaded": {
        "page": "# OnAllPluginsLoaded\n\nThis game event is triggered when all the plugins are loaded.\n\n<Tabs defaultValue=\"lua\">\n          <TabsList class=\"grid w-full grid-cols-3 flex\">\n            <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n          </TabsList>\n        <TabsContent value=\"lua\">\n```lua\n--- @param event Event\n--- @return EventResult\n--- @event returns nil via event:SetReturn\nAddEventHandler(\"OnAllPluginsLoaded\", function(event)\n    -- [[...]]\n    return EventResult.Continue;\nend)\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Event} event\n * @description Event returns void via event.SetReturn\n * @return EventResult\n */\nAddEventHandler(\"OnAllPluginsLoaded\", (event) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\n// Event returns void via event.SetReturn\n// The function returns an EventResult\nEvents.AddEventHandler(\"OnAllPluginsLoaded\", (Event @event) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n        </Tabs>",
        "title": "OnAllPluginsLoaded"
    },
    "events.core.onclientchat": {
        "page": "# OnClientChat\n\nThis game event is triggered when a player sends a text message.\n\n<Tabs defaultValue=\"lua\">\n          <TabsList class=\"grid w-full grid-cols-3 flex\">\n            <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n          </TabsList>\n        <TabsContent value=\"lua\">\n```lua\n--- @param event Event\n--- @param playerid number\n--- @param text string\n--- @param teamonly boolean\n--- @return EventResult\n--- @event returns boolean via event:SetReturn\nAddEventHandler(\"OnClientChat\", function(event, playerid, text, teamonly)\n    -- [[...]]\n    return EventResult.Continue;\nend)\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Event} event\n * @param {number} playerid\n * @param {string} text\n * @param {bool} teamonly\n * @description Event returns bool via event.SetReturn\n * @return EventResult\n */\nAddEventHandler(\"OnClientChat\", (event, playerid, text, teamonly) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\n// Event returns bool via event.SetReturn\n// The function returns an EventResult\nEvents.AddEventHandler(\"OnClientChat\", (Event @event, int playerid, string text, bool teamonly) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n        </Tabs>",
        "title": "OnClientChat"
    },
    "events.core.onclientcommand": {
        "page": "# OnClientCommand\n\nThe event is triggered when a client sends a command.\n\n<Tabs defaultValue=\"lua\">\n          <TabsList class=\"grid w-full grid-cols-3 flex\">\n            <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n          </TabsList>\n        <TabsContent value=\"lua\">\n```lua\n--- @param event Event\n--- @param playerid number\n--- @param command string\n--- @return EventResult\n--- @event returns boolean via event:SetReturn\nAddEventHandler(\"OnClientCommand\", function(event, playerid, command)\n    -- [[...]]\n    return EventResult.Continue;\nend)\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Event} event\n * @param {number} playerid\n * @param {string} command\n * @description Event returns bool via event.SetReturn\n * @return EventResult\n */\nAddEventHandler(\"OnClientCommand\", (event, playerid, command) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\n// Event returns bool via event.SetReturn\n// The function returns an EventResult\nEvents.AddEventHandler(\"OnClientCommand\", (Event @event, int playerid, string command) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n        </Tabs>",
        "title": "OnClientCommand"
    },
    "events.core.onclientconnect": {
        "page": "# OnClientConnect\n\nThis game event is triggered when a client connects.\n\n<Tabs defaultValue=\"lua\">\n          <TabsList class=\"grid w-full grid-cols-3 flex\">\n            <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n          </TabsList>\n        <TabsContent value=\"lua\">\n```lua\n--- @param event Event\n--- @param playerid number\n--- @return EventResult\n--- @event returns boolean via event:SetReturn\nAddEventHandler(\"OnClientConnect\", function(event, playerid)\n    -- [[...]]\n    return EventResult.Continue;\nend)\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Event} event\n * @param {number} playerid\n * @description Event returns bool via event.SetReturn\n * @return EventResult\n */\nAddEventHandler(\"OnClientConnect\", (event, playerid) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\n// Event returns bool via event.SetReturn\n// The function returns an EventResult\nEvents.AddEventHandler(\"OnClientConnect\", (Event @event, int playerid) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n        </Tabs>",
        "title": "OnClientConnect"
    },
    "events.core.onclientconvarquery": {
        "page": "# OnClientConvarQuery\n\nThis game event is triggered when a player's convar is being queried.\n\n<Tabs defaultValue=\"lua\">\n          <TabsList class=\"grid w-full grid-cols-3 flex\">\n            <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n          </TabsList>\n        <TabsContent value=\"lua\">\n```lua\n--- @param event Event\n--- @param playerid number\n--- @param convar_name string\n--- @param convar_value string\n--- @return EventResult\n--- @event returns nil via event:SetReturn\nAddEventHandler(\"OnClientConvarQuery\", function(event, playerid, convar_name, convar_value)\n    -- [[...]]\n    return EventResult.Continue;\nend)\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Event} event\n * @param {number} playerid\n * @param {string} convar_name\n * @param {string} convar_value\n * @description Event returns void via event.SetReturn\n * @return EventResult\n */\nAddEventHandler(\"OnClientConvarQuery\", (event, playerid, convar_name, convar_value) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\n// Event returns void via event.SetReturn\n// The function returns an EventResult\nEvents.AddEventHandler(\"OnClientConvarQuery\", (Event @event, int playerid, string convar_name, string convar_value) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n        </Tabs>",
        "title": "OnClientConvarQuery"
    },
    "events.core.onclientdisconnect": {
        "page": "# OnClientDisconnect\n\nThis game event is triggered when a client disconnects.\n\n<Tabs defaultValue=\"lua\">\n          <TabsList class=\"grid w-full grid-cols-3 flex\">\n            <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n          </TabsList>\n        <TabsContent value=\"lua\">\n```lua\n--- @param event Event\n--- @param playerid number\n--- @return EventResult\n--- @event returns nil via event:SetReturn\nAddEventHandler(\"OnClientDisconnect\", function(event, playerid)\n    -- [[...]]\n    return EventResult.Continue;\nend)\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Event} event\n * @param {number} playerid\n * @description Event returns void via event.SetReturn\n * @return EventResult\n */\nAddEventHandler(\"OnClientDisconnect\", (event, playerid) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\n// Event returns void via event.SetReturn\n// The function returns an EventResult\nEvents.AddEventHandler(\"OnClientDisconnect\", (Event @event, int playerid) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n        </Tabs>",
        "title": "OnClientDisconnect"
    },
    "events.core.onclientkeystatechange": {
        "page": "# OnClientKeyStateChange\n\nThis game event is triggered when a key state changes for a client.\n\n<Tabs defaultValue=\"lua\">\n          <TabsList class=\"grid w-full grid-cols-3 flex\">\n            <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n          </TabsList>\n        <TabsContent value=\"lua\">\n```lua\n--- @param event Event\n--- @param playerid number\n--- @param key string\n--- @param pressed boolean\n--- @return EventResult\n--- @event returns nil via event:SetReturn\nAddEventHandler(\"OnClientKeyStateChange\", function(event, playerid, key, pressed)\n    -- [[...]]\n    return EventResult.Continue;\nend)\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Event} event\n * @param {number} playerid\n * @param {string} key\n * @param {bool} pressed\n * @description Event returns void via event.SetReturn\n * @return EventResult\n */\nAddEventHandler(\"OnClientKeyStateChange\", (event, playerid, key, pressed) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\n// Event returns void via event.SetReturn\n// The function returns an EventResult\nEvents.AddEventHandler(\"OnClientKeyStateChange\", (Event @event, int playerid, string key, bool pressed) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n        </Tabs>",
        "title": "OnClientKeyStateChange"
    },
    "events.core.onclientprocessusercmds": {
        "page": "# OnClientProcessUsercmds\n\nThis game event is triggered when the server receives usercmds from the client.\n\n<Tabs defaultValue=\"lua\">\n          <TabsList class=\"grid w-full grid-cols-3 flex\">\n            <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n          </TabsList>\n        <TabsContent value=\"lua\">\n```lua\n--- @param event Event\n--- @param playerid number\n--- @param cmds table\n--- @param numcmds number\n--- @param paused boolean\n--- @param margin number\n--- @return EventResult\n--- @event returns nil via event:SetReturn\nAddEventHandler(\"OnClientProcessUsercmds\", function(event, playerid, cmds, numcmds, paused, margin)\n    -- [[...]]\n    return EventResult.Continue;\nend)\n```\n### Commands\nThe commands are being of type CSGOUserCmdPB.\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Event} event\n * @param {number} playerid\n * @param {UserMessage[]} cmds\n * @param {number} numcmds\n * @param {bool} paused\n * @param {number} margin\n * @description Event returns void via event.SetReturn\n * @return EventResult\n */\nAddEventHandler(\"OnClientProcessUsercmds\", (event, playerid, cmds, numcmds, paused, margin) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n### Commands\nThe commands are being of type CSGOUserCmdPB.\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\n// Event returns void via event.SetReturn\n// The function returns an EventResult\nEvents.AddEventHandler(\"OnClientProcessUsercmds\", (Event @event, int playerid, UserMessage[] cmds, int numcmds, bool paused, float margin) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n        </Tabs>",
        "title": "OnClientProcessUsercmds"
    },
    "events.core.onclientputinserver": {
        "page": "# OnClientPutInServer\n\nThis game event is triggered when a client is being put in server.\n\n<Tabs defaultValue=\"lua\">\n          <TabsList class=\"grid w-full grid-cols-3 flex\">\n            <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n          </TabsList>\n        <TabsContent value=\"lua\">\n```lua\n--- @param event Event\n--- @param playerid number\n--- @param kind number\n--- @return EventResult\n--- @event returns nil via event:SetReturn\nAddEventHandler(\"OnClientPutInServer\", function(event, playerid, kind)\n    -- [[...]]\n    return EventResult.Continue;\nend)\n```\n## Available Kinds\n- `0` = `player`\n- `1` = `fake player (bot)`\n- `2` = `unknown`\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Event} event\n * @param {number} playerid\n * @param {number} kind\n * @description Event returns void via event.SetReturn\n * @return EventResult\n */\nAddEventHandler(\"OnClientPutInServer\", (event, playerid, kind) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n## Available Kinds\n- `0` = `player`\n- `1` = `fake player (bot)`\n- `2` = `unknown`\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\n// Event returns void via event.SetReturn\n// The function returns an EventResult\nEvents.AddEventHandler(\"OnClientPutInServer\", (Event @event, int playerid, int kind) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n        </Tabs>",
        "title": "OnClientPutInServer"
    },
    "events.core.onclientsteamauthorize": {
        "page": "# OnClientSteamAuthorize\n\nThis game event is triggered when a client is authorized by Steam.\n\n<Tabs defaultValue=\"lua\">\n          <TabsList class=\"grid w-full grid-cols-3 flex\">\n            <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n          </TabsList>\n        <TabsContent value=\"lua\">\n```lua\n--- @param event Event\n--- @param playerid number\n--- @return EventResult\n--- @event returns nil via event:SetReturn\nAddEventHandler(\"OnClientSteamAuthorize\", function(event, playerid)\n    -- [[...]]\n    return EventResult.Continue;\nend)\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Event} event\n * @param {number} playerid\n * @description Event returns void via event.SetReturn\n * @return EventResult\n */\nAddEventHandler(\"OnClientSteamAuthorize\", (event, playerid) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\n// Event returns void via event.SetReturn\n// The function returns an EventResult\nEvents.AddEventHandler(\"OnClientSteamAuthorize\", (Event @event, int playerid) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n        </Tabs>",
        "title": "OnClientSteamAuthorize"
    },
    "events.core.onclientsteamauthorizefail": {
        "page": "# OnClientSteamAuthorizeFail\n\nThis game event is triggered when a client is not authorized by Steam.\n\n<Tabs defaultValue=\"lua\">\n          <TabsList class=\"grid w-full grid-cols-3 flex\">\n            <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n          </TabsList>\n        <TabsContent value=\"lua\">\n```lua\n--- @param event Event\n--- @param playerid number\n--- @return EventResult\n--- @event returns nil via event:SetReturn\nAddEventHandler(\"OnClientSteamAuthorizeFail\", function(event, playerid)\n    -- [[...]]\n    return EventResult.Continue;\nend)\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Event} event\n * @param {number} playerid\n * @description Event returns void via event.SetReturn\n * @return EventResult\n */\nAddEventHandler(\"OnClientSteamAuthorizeFail\", (event, playerid) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\n// Event returns void via event.SetReturn\n// The function returns an EventResult\nEvents.AddEventHandler(\"OnClientSteamAuthorizeFail\", (Event @event, int playerid) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n        </Tabs>",
        "title": "OnClientSteamAuthorizeFail"
    },
    "events.core.onentityacceptinput": {
        "page": "# OnEntityAcceptInput\n\nThis game event is triggered when an entity receives an input.\n\n<Tabs defaultValue=\"lua\">\n          <TabsList class=\"grid w-full grid-cols-3 flex\">\n            <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n          </TabsList>\n        <TabsContent value=\"lua\">\n```lua\n--- @param event Event\n--- @param entity CEntityInstance\n--- @param inputname string\n--- @param activator CEntityInstance\n--- @param caller CEntityInstance\n--- @param value string\n--- @param outputID number\n--- @return EventResult\n--- @event returns boolean via event:SetReturn\nAddEventHandler(\"OnEntityAcceptInput\", function(event, entity, inputname, activator, caller, value, outputID)\n    -- [[...]]\n    return EventResult.Continue;\nend)\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Event} event\n * @param {CEntityInstance} entity\n * @param {string} inputname\n * @param {CEntityInstance} activator\n * @param {CEntityInstance} caller\n * @param {string} value\n * @param {number} outputID\n * @description Event returns bool via event.SetReturn\n * @return EventResult\n */\nAddEventHandler(\"OnEntityAcceptInput\", (event, entity, inputname, activator, caller, value, outputID) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\n// Event returns bool via event.SetReturn\n// The function returns an EventResult\nEvents.AddEventHandler(\"OnEntityAcceptInput\", (Event @event, CEntityInstance entity, string inputname, CEntityInstance activator, CEntityInstance caller, string value, int outputID) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n        </Tabs>",
        "title": "OnEntityAcceptInput"
    },
    "events.core.onentitycreated": {
        "page": "# OnEntityCreated\n\nThis game event is triggered when an entity is created on the server.\n\n<Tabs defaultValue=\"lua\">\n          <TabsList class=\"grid w-full grid-cols-3 flex\">\n            <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n          </TabsList>\n        <TabsContent value=\"lua\">\n```lua\n--- @param event Event\n--- @param entityptr CEntityInstance\n--- @return EventResult\n--- @event returns nil via event:SetReturn\nAddEventHandler(\"OnEntityCreated\", function(event, entityptr)\n    -- [[...]]\n    return EventResult.Continue;\nend)\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Event} event\n * @param {CEntityInstance} entityptr\n * @description Event returns void via event.SetReturn\n * @return EventResult\n */\nAddEventHandler(\"OnEntityCreated\", (event, entityptr) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\n// Event returns void via event.SetReturn\n// The function returns an EventResult\nEvents.AddEventHandler(\"OnEntityCreated\", (Event @event, CEntityInstance entityptr) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n        </Tabs>",
        "title": "OnEntityCreated"
    },
    "events.core.onentitydeleted": {
        "page": "# OnEntityDeleted\n\nThis game event is triggered when an entity is deleted from the server.\n\n<Tabs defaultValue=\"lua\">\n          <TabsList class=\"grid w-full grid-cols-3 flex\">\n            <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n          </TabsList>\n        <TabsContent value=\"lua\">\n```lua\n--- @param event Event\n--- @param entityptr CEntityInstance\n--- @return EventResult\n--- @event returns nil via event:SetReturn\nAddEventHandler(\"OnEntityDeleted\", function(event, entityptr)\n    -- [[...]]\n    return EventResult.Continue;\nend)\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Event} event\n * @param {CEntityInstance} entityptr\n * @description Event returns void via event.SetReturn\n * @return EventResult\n */\nAddEventHandler(\"OnEntityDeleted\", (event, entityptr) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\n// Event returns void via event.SetReturn\n// The function returns an EventResult\nEvents.AddEventHandler(\"OnEntityDeleted\", (Event @event, CEntityInstance entityptr) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n        </Tabs>",
        "title": "OnEntityDeleted"
    },
    "events.core.onentityparentchanged": {
        "page": "# OnEntityParentChanged\n\nThis game event is triggered when an entity parent has been changed.\n\n<Tabs defaultValue=\"lua\">\n          <TabsList class=\"grid w-full grid-cols-3 flex\">\n            <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n          </TabsList>\n        <TabsContent value=\"lua\">\n```lua\n--- @param event Event\n--- @param entityptr CEntityInstance\n--- @return EventResult\n--- @event returns nil via event:SetReturn\nAddEventHandler(\"OnEntityParentChanged\", function(event, entityptr)\n    -- [[...]]\n    return EventResult.Continue;\nend)\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Event} event\n * @param {CEntityInstance} entityptr\n * @description Event returns void via event.SetReturn\n * @return EventResult\n */\nAddEventHandler(\"OnEntityParentChanged\", (event, entityptr) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\n// Event returns void via event.SetReturn\n// The function returns an EventResult\nEvents.AddEventHandler(\"OnEntityParentChanged\", (Event @event, CEntityInstance entityptr) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n        </Tabs>",
        "title": "OnEntityParentChanged"
    },
    "events.core.onentityspawned": {
        "page": "# OnEntitySpawned\n\nThis game event is triggered when an entity is spawned on the server.\n\n<Tabs defaultValue=\"lua\">\n          <TabsList class=\"grid w-full grid-cols-3 flex\">\n            <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n          </TabsList>\n        <TabsContent value=\"lua\">\n```lua\n--- @param event Event\n--- @param entityptr CEntityInstance\n--- @return EventResult\n--- @event returns nil via event:SetReturn\nAddEventHandler(\"OnEntitySpawned\", function(event, entityptr)\n    -- [[...]]\n    return EventResult.Continue;\nend)\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Event} event\n * @param {CEntityInstance} entityptr\n * @description Event returns void via event.SetReturn\n * @return EventResult\n */\nAddEventHandler(\"OnEntitySpawned\", (event, entityptr) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\n// Event returns void via event.SetReturn\n// The function returns an EventResult\nEvents.AddEventHandler(\"OnEntitySpawned\", (Event @event, CEntityInstance entityptr) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n        </Tabs>",
        "title": "OnEntitySpawned"
    },
    "events.core.ongametick": {
        "page": "# OnGameTick\n\nThis game event is called at every server tick.\n\n<Tabs defaultValue=\"lua\">\n          <TabsList class=\"grid w-full grid-cols-3 flex\">\n            <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n          </TabsList>\n        <TabsContent value=\"lua\">\n```lua\n--- @param event Event\n--- @param simulating boolean\n--- @param bFirstTick boolean\n--- @param bLastTick boolean\n--- @return EventResult\n--- @event returns nil via event:SetReturn\nAddEventHandler(\"OnGameTick\", function(event, simulating, bFirstTick, bLastTick)\n    -- [[...]]\n    return EventResult.Continue;\nend)\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Event} event\n * @param {bool} simulating\n * @param {bool} bFirstTick\n * @param {bool} bLastTick\n * @description Event returns void via event.SetReturn\n * @return EventResult\n */\nAddEventHandler(\"OnGameTick\", (event, simulating, bFirstTick, bLastTick) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\n// Event returns void via event.SetReturn\n// The function returns an EventResult\nEvents.AddEventHandler(\"OnGameTick\", (Event @event, bool simulating, bool bFirstTick, bool bLastTick) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n        </Tabs>",
        "title": "OnGameTick"
    },
    "events.core.onmapload": {
        "page": "# OnMapLoad\n\nThis game event is triggered when a map loads.\n\n<Tabs defaultValue=\"lua\">\n          <TabsList class=\"grid w-full grid-cols-3 flex\">\n            <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n          </TabsList>\n        <TabsContent value=\"lua\">\n```lua\n--- @param event Event\n--- @param map string\n--- @return EventResult\n--- @event returns nil via event:SetReturn\nAddEventHandler(\"OnMapLoad\", function(event, map)\n    -- [[...]]\n    return EventResult.Continue;\nend)\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Event} event\n * @param {string} map\n * @description Event returns void via event.SetReturn\n * @return EventResult\n */\nAddEventHandler(\"OnMapLoad\", (event, map) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\n// Event returns void via event.SetReturn\n// The function returns an EventResult\nEvents.AddEventHandler(\"OnMapLoad\", (Event @event, string map) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n        </Tabs>",
        "title": "OnMapLoad"
    },
    "events.core.onmapunload": {
        "page": "# OnMapUnload\n\nThis game event is triggered when a map unloads.\n\n<Tabs defaultValue=\"lua\">\n          <TabsList class=\"grid w-full grid-cols-3 flex\">\n            <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n          </TabsList>\n        <TabsContent value=\"lua\">\n```lua\n--- @param event Event\n--- @param map string\n--- @return EventResult\n--- @event returns nil via event:SetReturn\nAddEventHandler(\"OnMapUnload\", function(event, map)\n    -- [[...]]\n    return EventResult.Continue;\nend)\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Event} event\n * @param {string} map\n * @description Event returns void via event.SetReturn\n * @return EventResult\n */\nAddEventHandler(\"OnMapUnload\", (event, map) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\n// Event returns void via event.SetReturn\n// The function returns an EventResult\nEvents.AddEventHandler(\"OnMapUnload\", (Event @event, string map) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n        </Tabs>",
        "title": "OnMapUnload"
    },
    "events.core.onplayerchecktransmit": {
        "page": "# OnPlayerCheckTransmit\n\nThis game event is triggered when a player checks for transmitting entities.\n\n<Tabs defaultValue=\"lua\">\n          <TabsList class=\"grid w-full grid-cols-3 flex\">\n            <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n          </TabsList>\n        <TabsContent value=\"lua\">\n```lua\n--- @param event Event\n--- @param playerid number\n--- @param transmitinfo CCheckTransmitInfo\n--- @return EventResult\n--- @event returns nil via event:SetReturn\nAddEventHandler(\"OnPlayerCheckTransmit\", function(event, playerid, transmitinfo)\n    -- [[...]]\n    return EventResult.Continue;\nend)\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Event} event\n * @param {number} playerid\n * @param {CCheckTransmitInfo} transmitinfo\n * @description Event returns void via event.SetReturn\n * @return EventResult\n */\nAddEventHandler(\"OnPlayerCheckTransmit\", (event, playerid, transmitinfo) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\n// Event returns void via event.SetReturn\n// The function returns an EventResult\nEvents.AddEventHandler(\"OnPlayerCheckTransmit\", (Event @event, int playerid, CCheckTransmitInfo transmitinfo) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n        </Tabs>",
        "title": "OnPlayerCheckTransmit"
    },
    "events.core.onplayerdamage": {
        "page": "# OnPlayerDamage\n\nThis game event is triggered when a player receives damage.\n\n<Tabs defaultValue=\"lua\">\n          <TabsList class=\"grid w-full grid-cols-3 flex\">\n            <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n          </TabsList>\n        <TabsContent value=\"lua\">\n```lua\n--- @param event Event\n--- @param playerid number\n--- @param attackerid number\n--- @param damageinfo CTakeDamageInfo\n--- @param inflictor CBaseEntity\n--- @param ability CBaseEntity\n--- @return EventResult\n--- @event returns boolean via event:SetReturn\nAddEventHandler(\"OnPlayerDamage\", function(event, playerid, attackerid, damageinfo, inflictor, ability)\n    -- [[...]]\n    return EventResult.Continue;\nend)\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Event} event\n * @param {number} playerid\n * @param {number} attackerid\n * @param {CTakeDamageInfo} damageinfo\n * @param {CBaseEntity} inflictor\n * @param {CBaseEntity} ability\n * @description Event returns bool via event.SetReturn\n * @return EventResult\n */\nAddEventHandler(\"OnPlayerDamage\", (event, playerid, attackerid, damageinfo, inflictor, ability) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\n// Event returns bool via event.SetReturn\n// The function returns an EventResult\nEvents.AddEventHandler(\"OnPlayerDamage\", (Event @event, int playerid, int attackerid, CTakeDamageInfo damageinfo, CBaseEntity inflictor, CBaseEntity ability) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n        </Tabs>",
        "title": "OnPlayerDamage"
    },
    "events.core.onplayerpostthink": {
        "page": "# OnPlayerPostThink\n\nThis game event is triggered when the hook CCSPlayerPawnBase_PostThink is being called.\n\n<Tabs defaultValue=\"lua\">\n          <TabsList class=\"grid w-full grid-cols-3 flex\">\n            <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n          </TabsList>\n        <TabsContent value=\"lua\">\n```lua\n--- @param event Event\n--- @param playerid number\n--- @return EventResult\n--- @event returns nil via event:SetReturn\nAddEventHandler(\"OnPlayerPostThink\", function(event, playerid)\n    -- [[...]]\n    return EventResult.Continue;\nend)\n```\n#### How can I stop the execution?\nSimply return `EventResult.Stop` and it will be blocked.\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Event} event\n * @param {number} playerid\n * @description Event returns void via event.SetReturn\n * @return EventResult\n */\nAddEventHandler(\"OnPlayerPostThink\", (event, playerid) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n#### How can I stop the execution?\nSimply return `EventResult.Stop` and it will be blocked.\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\n// Event returns void via event.SetReturn\n// The function returns an EventResult\nEvents.AddEventHandler(\"OnPlayerPostThink\", (Event @event, int playerid) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n        </Tabs>",
        "title": "OnPlayerPostThink"
    },
    "events.core.onpluginstart": {
        "page": "# OnPluginStart\n\nThis game event is triggered when the plugin starts.\n\n<Tabs defaultValue=\"lua\">\n          <TabsList class=\"grid w-full grid-cols-3 flex\">\n            <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n          </TabsList>\n        <TabsContent value=\"lua\">\n```lua\n--- @param event Event\n--- @return EventResult\n--- @event returns nil via event:SetReturn\nAddEventHandler(\"OnPluginStart\", function(event)\n    -- [[...]]\n    return EventResult.Continue;\nend)\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Event} event\n * @description Event returns void via event.SetReturn\n * @return EventResult\n */\nAddEventHandler(\"OnPluginStart\", (event) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\n// Event returns void via event.SetReturn\n// The function returns an EventResult\nEvents.AddEventHandler(\"OnPluginStart\", (Event @event) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n        </Tabs>",
        "title": "OnPluginStart"
    },
    "events.core.onpluginstop": {
        "page": "# OnPluginStop\n\nThis game event is triggered when the plugin stops.\n\n<Tabs defaultValue=\"lua\">\n          <TabsList class=\"grid w-full grid-cols-3 flex\">\n            <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n          </TabsList>\n        <TabsContent value=\"lua\">\n```lua\n--- @param event Event\n--- @return EventResult\n--- @event returns nil via event:SetReturn\nAddEventHandler(\"OnPluginStop\", function(event)\n    -- [[...]]\n    return EventResult.Continue;\nend)\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Event} event\n * @description Event returns void via event.SetReturn\n * @return EventResult\n */\nAddEventHandler(\"OnPluginStop\", (event) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\n// Event returns void via event.SetReturn\n// The function returns an EventResult\nEvents.AddEventHandler(\"OnPluginStop\", (Event @event) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n        </Tabs>",
        "title": "OnPluginStop"
    },
    "events.core.onterminateround": {
        "page": "# OnTerminateRound\n\nThis game event is triggered when CGameRules->TerminateRound is being called.\n\n<Tabs defaultValue=\"lua\">\n          <TabsList class=\"grid w-full grid-cols-3 flex\">\n            <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n          </TabsList>\n        <TabsContent value=\"lua\">\n```lua\n--- @param event Event\n--- @param delay number\n--- @param reason number\n--- @return EventResult\n--- @event returns boolean via event:SetReturn\nAddEventHandler(\"OnTerminateRound\", function(event, delay, reason)\n    -- [[...]]\n    return EventResult.Continue;\nend)\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Event} event\n * @param {number} delay\n * @param {number} reason\n * @description Event returns bool via event.SetReturn\n * @return EventResult\n */\nAddEventHandler(\"OnTerminateRound\", (event, delay, reason) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\n// Event returns bool via event.SetReturn\n// The function returns an EventResult\nEvents.AddEventHandler(\"OnTerminateRound\", (Event @event, float delay, int reason) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n        </Tabs>",
        "title": "OnTerminateRound"
    },
    "events.core.onusermessagereceive": {
        "page": "# OnUserMessageReceive\n\nThis game event is triggered when a user message is being received from a player.\n\n<Tabs defaultValue=\"lua\">\n          <TabsList class=\"grid w-full grid-cols-3 flex\">\n            <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n          </TabsList>\n        <TabsContent value=\"lua\">\n```lua\n--- @param event Event\n--- @param playerid number\n--- @param usermessage UserMessage\n--- @return EventResult\n--- @event returns nil via event:SetReturn\nAddEventHandler(\"OnUserMessageReceive\", function(event, playerid, usermessage)\n    -- [[...]]\n    return EventResult.Continue;\nend)\n```\n#### How can I stop the execution of a User Message?\nSimply return `EventResult.Stop` and it will be blocked.\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Event} event\n * @param {number} playerid\n * @param {UserMessage} usermessage\n * @description Event returns void via event.SetReturn\n * @return EventResult\n */\nAddEventHandler(\"OnUserMessageReceive\", (event, playerid, usermessage) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n#### How can I stop the execution of a User Message?\nSimply return `EventResult.Stop` and it will be blocked.\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\n// Event returns void via event.SetReturn\n// The function returns an EventResult\nEvents.AddEventHandler(\"OnUserMessageReceive\", (Event @event, int playerid, UserMessage usermessage) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n        </Tabs>",
        "title": "OnUserMessageReceive"
    },
    "events.core.onusermessagesend": {
        "page": "# OnUserMessageSend\n\nThis game event is triggered when a user message is being sent to a player.\n\n<Tabs defaultValue=\"lua\">\n          <TabsList class=\"grid w-full grid-cols-3 flex\">\n            <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n          </TabsList>\n        <TabsContent value=\"lua\">\n```lua\n--- @param event Event\n--- @param usermessage UserMessage\n--- @param isreliable boolean\n--- @return EventResult\n--- @event returns nil via event:SetReturn\nAddEventHandler(\"OnUserMessageSend\", function(event, usermessage, isreliable)\n    -- [[...]]\n    return EventResult.Continue;\nend)\n```\n> [!note]\n> The methods to get the clients are preset in UserMessage class: AddClient, RemoveClient, ClearClients, AddClients and GetClients.\n\n#### How can I stop the execution of a User Message?\nSimply return `EventResult.Stop` and it will be blocked.\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Event} event\n * @param {UserMessage} usermessage\n * @param {bool} isreliable\n * @description Event returns void via event.SetReturn\n * @return EventResult\n */\nAddEventHandler(\"OnUserMessageSend\", (event, usermessage, isreliable) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n> [!note]\n> The methods to get the clients are preset in UserMessage class: AddClient, RemoveClient, ClearClients, AddClients and GetClients.\n\n#### How can I stop the execution of a User Message?\nSimply return `EventResult.Stop` and it will be blocked.\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\n// Event returns void via event.SetReturn\n// The function returns an EventResult\nEvents.AddEventHandler(\"OnUserMessageSend\", (Event @event, UserMessage usermessage, bool isreliable) => {\n    // ...\n    return EventResult.Continue;\n})\n```\n</TabsContent>\n        </Tabs>",
        "title": "OnUserMessageSend"
    },
    "exports": {
        "page": "# Exports\n\nThis is the list of items available for Exports API.\n\n## Functions\n\n<Catalog filter=\"exports.call,exports.register\"></Catalog>",
        "title": "Exports",
        "icon": "file-export"
    },
    "exports.call": {
        "page": "# Call Export\n\nCalls the specified export.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param ... any\n--- @return any\n exports[\"PLUGIN_NAME\"]:EXPORT_NAME(...)\n```\n\n### Example\n```lua\ncommands:Register(\"testexport\", function(playerid, args, argsCount, silent, prefix)\n    local player = GetPlayer(playerid)\n    if not player or not player:IsValid() then return end\n\n    if not exports[\"admins\"]:HasFlags(playerid, \"b\") then\n        return player:SendMsg(MessageType.Chat, \"You don't have the right flag for this command!\")\n    end\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {any} ...\n * @return any\n */\n exports[\"PLUGIN_NAME\"].EXPORT_NAME(...)\n```\n\n### Example\n```js\ncommands.Register(\"testexport\", (playerid, arguments, arguments_count, silent, prefix) => {\n    let player = GetPlayer(playerid)\n    if (!player || !player.IsValid()) return\n\n    if (!exports[\"admins\"].HasFlags(playerid, \"b\")) {\n        return player.SendMsg(MessageType.Chat, \"You don't have the right flag for this command!\")\n    }\n})\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nobject Call(\"PLUGIN_NAME\", \"EXPORT_NAME\", object ...)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Call Export"
    },
    "exports.register": {
        "page": "# Register Export\n\nRegisters an export for this plugin.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param export_name string\n--- @param callback fun(...:any):any\n--- @return nil\n export(export_name, callback)\n```\n\n### Example\n```lua\nexport(\"GetCredits\", function(playerid)\n    local player = GetPlayer(playerid)\n    if not player then return 0 end\n    if player:IsFakeClient() then return 0 end\n\n    return player:GetVar(\"credits\")\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} export_name\n * @param {(...:any) => any} callback\n * @return void\n */\n exp(export_name, callback)\n```\n\n### Example\n```js\nexp(\"GetCredits\", (playerid) => {\n    let player = GetPlayer(playerid)\n    if (!player) return 0\n    if (player.IsFakeClient()) return 0\n    return player.GetVar(\"credits\")\n})\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Register(string export_name, Func<object, object> callback)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Register Export"
    },
    "files": {
        "page": "# Files\n\nThis is the list of items available for Files API.\n\n## Functions\n\n<Catalog filter=\"files.append,files.compress,files.createdirectory,files.decompress,files.delete,files.existspath,files.fetchdirectories,files.fetchfilenames,files.getbase,files.isdirectory,files.read,files.write\"></Catalog>",
        "title": "Files",
        "icon": "file"
    },
    "files.append": {
        "page": "# Append\n\nAppends the content to a file\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param path string\n--- @param content string\n--- @param hasdate boolean\n--- @return nil\n files:Append(path, content, hasdate)\n```\n> [!note]\n> The root of the Files API is located in `game/csgo`.\n\n\n### Example\n```lua\ncommands:Register(\"append\", function(playerid, args, argsCount, silent, prefix)\n    files:Append(\"test/test.log\", \"Test!\", true)\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} path\n * @param {string} content\n * @param {bool} hasdate\n * @return void\n */\n files.Append(path, content, hasdate)\n```\n> [!note]\n> The root of the Files API is located in `game/csgo`.\n\n\n### Example\n```js\ncommands.register(\"append\", (playerId, args, argc, silent, prefix) => {\n    files.Append(\"test/test.log\", \"Test!\", true);\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Files.Append(string path, string content, bool hasdate)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Append"
    },
    "files.compress": {
        "page": "# Compress\n\nCompresses a file.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param path string\n--- @param output string\n--- @return boolean\n files:Compress(path, output)\n```\n> [!note]\n> The root of the Files API is located in `game/csgo`.\n\n\n### Example\n```lua\ncommands:Register(\"compress\", function(playerid, args, argsCount, silent, prefix)\n    if files:Compress(\"logs/error.log\", \"archives/errors.zip\") then\n        print(\"Compression succeeded\")\n    else\n        print(\"Compression failed\")\n    end\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} path\n * @param {string} output\n * @return bool\n */\n files.Compress(path, output)\n```\n> [!note]\n> The root of the Files API is located in `game/csgo`.\n\n\n### Example\n```js\ncommands.register(\"compress\", (playerId, args, argc, silent, prefix) => {\n    if (files.Compress(\"logs/error.log\", \"archives/errors.zip\")) {\n        console.log(\"Compression succeeded\");\n    } else {\n        console.log(\"Compression failed\");\n    }\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nbool Files.Compress(string path, string output)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Compress"
    },
    "files.createdirectory": {
        "page": "# CreateDirectory\n\nCreates a directory. It returns true if the directory was created.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param path string\n--- @return boolean\n files:CreateDirectory(path)\n```\n> [!note]\n> The root of the Files API is located in `game/csgo`.\n\n\n### Example\n```lua\ncommands:Register(\"createdir\", function(playerid, args, argsCount, silent, prefix)\n    if files:CreateDirectory(\"addons/swiftly/plugins/test\") then\n        print(\"Directory created successfully\")\n    else\n        print(\"Failed to create directory\")\n    end\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} path\n * @return bool\n */\n files.CreateDirectory(path)\n```\n> [!note]\n> The root of the Files API is located in `game/csgo`.\n\n\n### Example\n```js\ncommands.register(\"createdir\", (playerId, args, argc, silent, prefix) => {\n    if (files.CreateDirectory(\"addons/swiftly/plugins/test\")) {\n        console.log(\"Directory created successfully\");\n    } else {\n        console.log(\"Failed to create directory\");\n    }\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nbool Files.CreateDirectory(string path)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "CreateDirectory"
    },
    "files.decompress": {
        "page": "# Decompress\n\nDecompresses a file.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param path string\n--- @param output string\n--- @return boolean\n files:Decompress(path, output)\n```\n> [!note]\n> The root of the Files API is located in `game/csgo`.\n\n\n### Example\n```lua\ncommands:Register(\"decompress\", function(playerid, args, argsCount, silent, prefix)\n    if files:Decompress(\"update.zip\", \"new_version/\") then\n        print(\"Decompression succeeded\")\n    else\n        print(\"Decompression failed\")\n    end\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} path\n * @param {string} output\n * @return bool\n */\n files.Decompress(path, output)\n```\n> [!note]\n> The root of the Files API is located in `game/csgo`.\n\n\n### Example\n```js\ncommands.register(\"decompress\", (playerId, args, argc, silent, prefix) => {\n    if (files.Decompress(\"update.zip\", \"new_version/\")) {\n        console.log(\"Decompression succeeded\");\n    } else {\n        console.log(\"Decompression failed\");\n    }\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nbool Files.Decompress(string path, string output)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Decompress"
    },
    "files.delete": {
        "page": "# Delete\n\nDeletes a file\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param path string\n--- @return nil\n files:Delete(path)\n```\n> [!note]\n> The root of the Files API is located in `game/csgo`.\n\n\n### Example\n```lua\ncommands:Register(\"delete\", function(playerid, args, argsCount, silent, prefix)\n    files:Delete(\"addons/swiftly/logs/log_1.log\")\n    print(\"File deleted\")\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} path\n * @return void\n */\n files.Delete(path)\n```\n> [!note]\n> The root of the Files API is located in `game/csgo`.\n\n\n### Example\n```js\ncommands.register(\"delete\", (playerId, args, argc, silent, prefix) => {\n    files.Delete(\"addons/swiftly/logs/log_1.log\");\n    console.log(\"File deleted\");\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Files.Delete(string path)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Delete"
    },
    "files.existspath": {
        "page": "# ExistsPath\n\nReturns if the path exists or not\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param path string\n--- @return boolean\n files:ExistsPath(path)\n```\n> [!note]\n> The root of the Files API is located in `game/csgo`.\n\n\n### Example\n```lua\ncommands:Register(\"exists\", function(playerid, args, argsCount, silent, prefix)\n    if files:ExistsPath(\"test.json\") then\n        print(\"Config file present\")\n    else\n        print(\"Config file not found\")\n    end\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} path\n * @return bool\n */\n files.ExistsPath(path)\n```\n> [!note]\n> The root of the Files API is located in `game/csgo`.\n\n\n### Example\n```js\ncommands.register(\"exists\", (playerId, args, argc, silent, prefix) => {\n    if (files.ExistsPath(\"test.json\")) {\n        console.log(\"Config file present\");\n    } else {\n        console.log(\"Config file not found\");\n    }\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nbool Files.ExistsPath(string path)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "ExistsPath"
    },
    "files.fetchdirectories": {
        "page": "# FetchDirectories\n\nReturns a list of all the directories in a directory.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param path string\n--- @return table\n files:FetchDirectories(path)\n```\n> [!note]\n> The root of the Files API is located in `game/csgo`.\n\n\n### Example\n```lua\ncommands:Register(\"fetchdirs\", function(playerid, args, argsCount, silent, prefix)\n    local dirs = files:FetchDirectories(\"addons/swiftly/plugins\")\n    for i = 1, #dirs do\n        print(\"Found plugin: \" .. dirs[i])\n    end\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} path\n * @return string[]\n */\n files.FetchDirectories(path)\n```\n> [!note]\n> The root of the Files API is located in `game/csgo`.\n\n\n### Example\n```js\ncommands.register(\"fetchdirs\", (playerId, args, argc, silent, prefix) => {\n    const dirs = files.FetchDirectories(\"addons/swiftly/plugins\");\n    for (let i = 0; i < dirs.length; i++) {\n        console.log(\"Found plugin: \" + dirs[i]);\n    }\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nstring[] Files.FetchDirectories(string path)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "FetchDirectories"
    },
    "files.fetchfilenames": {
        "page": "# FetchFileNames\n\nReturns a list of all the file names in a directory.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param path string\n--- @return table\n files:FetchFileNames(path)\n```\n> [!note]\n> The root of the Files API is located in `game/csgo`.\n\n\n### Example\n```lua\ncommands:Register(\"fetchfiles\", function(playerid, args, argsCount, silent, prefix)\n    local filesList = files:FetchFileNames(\"addons/swiftly/configs\")\n    print(\"All configs: \" .. table.concat(filesList, \", \"))\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} path\n * @return string[]\n */\n files.FetchFileNames(path)\n```\n> [!note]\n> The root of the Files API is located in `game/csgo`.\n\n\n### Example\n```js\ncommands.register(\"fetchfiles\", (playerId, args, argc, silent, prefix) => {\n    const filesList = files.FetchFileNames(\"addons/swiftly/configs\");\n    console.log(\"All configs: \" + filesList.join(\", \"));\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nstring[] Files.FetchFileNames(string path)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "FetchFileNames"
    },
    "files.getbase": {
        "page": "# GetBase\n\nReturns the base path of a file\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param path string\n--- @return string\n files:GetBase(path)\n```\n> [!note]\n> The root of the Files API is located in `game/csgo`.\n\n\n### Example\n```lua\ncommands:Register(\"getbase\", function(playerid, args, argsCount, silent, prefix)\n    local name = files:GetBase(\"cfg/autoexec.cfg\")\n    print(\"Base filename: \" .. name)\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} path\n * @return string\n */\n files.GetBase(path)\n```\n> [!note]\n> The root of the Files API is located in `game/csgo`.\n\n\n### Example\n```js\ncommands.register(\"getbase\", (playerId, args, argc, silent, prefix) => {\n    const name = files.GetBase(\"cfg/autoexec.cfg\");\n    console.log(\"Base filename: \" + name);\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nstring Files.GetBase(string path)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetBase"
    },
    "files.isdirectory": {
        "page": "# IsDirectory\n\nReturns if the path is a directory or not\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param path string\n--- @return boolean\n files:IsDirectory(path)\n```\n> [!note]\n> The root of the Files API is located in `game/csgo`.\n\n\n### Example\n```lua\ncommands:Register(\"isdir\", function(playerid, args, argsCount, silent, prefix)\n    if files:IsDirectory(\"test\") then\n        print(\"This is a folder\")\n    else\n        print(\"Not a folder\")\n    end\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} path\n * @return bool\n */\n files.IsDirectory(path)\n```\n> [!note]\n> The root of the Files API is located in `game/csgo`.\n\n\n### Example\n```js\ncommands.register(\"isdir\", (playerId, args, argc, silent, prefix) => {\n    if (files.IsDirectory(\"test\")) {\n        console.log(\"This is a folder\");\n    } else {\n        console.log(\"Not a folder\");\n    }\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nbool Files.IsDirectory(string path)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "IsDirectory"
    },
    "files.read": {
        "page": "# Read\n\nReads the content of a file\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param path string\n--- @return string\n files:Read(path)\n```\n> [!note]\n> The root of the Files API is located in `game/csgo`.\n\n\n### Example\n```lua\ncommands:Register(\"read\", function(playerid, args, argsCount, silent, prefix)\n    local content = files:Read(\"addons/swiftly/configs/settings.json\")\n    if content then\n        print(\"File contents: \" .. content)\n    else\n        print(\"Failed to read file\")\n    end\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} path\n * @return string\n */\n files.Read(path)\n```\n> [!note]\n> The root of the Files API is located in `game/csgo`.\n\n\n### Example\n```js\ncommands.register(\"read\", (playerId, args, argc, silent, prefix) => {\n    const content = files.Read(\"addons/swiftly/configs/settings.json\");\n    if (content) {\n        console.log(\"File contents: \" + content);\n    } else {\n        console.log(\"Failed to read file\");\n    }\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nstring Files.Read(string path)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Read"
    },
    "files.write": {
        "page": "# Write\n\nWrites the content to a file\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param path string\n--- @param content string\n--- @param hasdate boolean\n--- @return nil\n files:Write(path, content, hasdate)\n```\n> [!note]\n> The root of the Files API is located in `game/csgo`.\n\n\n### Example\n```lua\ncommands:Register(\"write\", function(playerid, args, argsCount, silent, prefix)\n    files:Write(\"addons/swiftly/important/important.txt\", \"Important data\", true)\n    print(\"File written\")\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} path\n * @param {string} content\n * @param {bool} hasdate\n * @return void\n */\n files.Write(path, content, hasdate)\n```\n> [!note]\n> The root of the Files API is located in `game/csgo`.\n\n\n### Example\n```js\ncommands.register(\"write\", (playerId, args, argc, silent, prefix) => {\n    files.Write(\"addons/swiftly/important/important.txt\", \"Important data\", true);\n    console.log(\"File written\");\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Files.Write(string path, string content, bool hasdate)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Write"
    },
    "generic": {
        "page": "# Generic\n\nThis is the list of items available for Generic API.\n\n## Functions\n\n<Catalog filter=\"generic.createtexttable,generic.getcurrentpluginname,generic.getgamename,generic.getpluginpath,generic.getpluginstate,generic.print\"></Catalog>",
        "title": "Generic",
        "icon": "circle-info"
    },
    "generic.createtexttable": {
        "page": "# CreateTextTable\n\nReturns a string table generated from provided arguments.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param data table\n--- @return string\n CreateTextTable(data)\n```\nThe data needs to be a table of tables:\n\n```lua\n{\n    { \"header col 1\", \"header col 2\" },\n    { \"col 1\", \"col 2\" },\n    -- ...\n}\n```\n\n### Example\n```lua\ncommands:Register(\"table\", function(playerid, args, argsCount, silent, prefix)\n    local tbl = CreateTextTable({\n        { \"Admin\",  \"Flag\", \"Group\" },\n        { \"blu\",    \"z\",    \"root\" },\n        { \"skuzzi\", \"b\",    \"helper\" },\n        { \"m3ntor\", \"a\",    \"moderator\" }\n    })\n    print(tbl)\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string[]} data\n * @return string\n */\n CreateTextTable(data)\n```\nThe data needs to be a table of tables:\n\n```js\n[\n    [ \"header col 1\", \"header col 2\" ],\n    [ \"col 1\", \"col 2\" ],\n    // ...\n]\n```\n\n### Example\n```js\ncommands.Register(\"table\", (playerid, args, argc, silent, prefix) => {\n    let tbl = CreateTextTable([\n        [\"Admin\", \"Flag\", \"Group\"],\n        [\"blu\", \"z\", \"root\"],\n        [\"skuzzi\", \"b\", \"helper\"],\n        [\"m3ntor\", \"a\", \"moderator\"]\n    ]);\n    console.log(tbl);\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nstring Generic.CreateTextTable(string[][] data)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "CreateTextTable"
    },
    "generic.getcurrentpluginname": {
        "page": "# GetCurrentPluginName\n\nReturns the current plugin name.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return string\n GetCurrentPluginName()\n```\n\n### Example\n```lua\ncommands:Register(\"pluginname\", function(playerid, args, argsCount, silent, prefix)\n    print(GetCurrentPluginName())\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return string\n */\n GetCurrentPluginName()\n```\n\n### Example\n```js\ncommands.Register(\"pluginname\", (playerid, args, argc, silent, prefix) => {\n    console.log(GetCurrentPluginName())\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nstring Generic.GetCurrentPluginName()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetCurrentPluginName"
    },
    "generic.getgamename": {
        "page": "# GetGameName\n\nReturns the current game.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return string\n GetGameName()\n```\nCurrent games:\n\n- `cs2`\n- `unknown`\n\n### Example\n```lua\ncommands:Register(\"getgamename\", function(playerid, args, argsCount, silent, prefix)\n    print(GetGameName())\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return string\n */\n GetGameName()\n```\nCurrent games:\n\n- `cs2`\n- `unknown`\n\n### Example\n```js\ncommands.Register(\"getpath\", (playerid, args, argc, silent, prefix) => {\n    console.log(GetGameName())\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nstring Generic.GetGameName()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetGameName"
    },
    "generic.getpluginpath": {
        "page": "# GetPluginPath\n\nReturns the path of a plugin.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param plugin_name string\n--- @return string\n GetPluginPath(plugin_name)\n```\n\n### Example\n```lua\ncommands:Register(\"getpath\", function(playerid, args, argsCount, silent, prefix)\n    print(GetPluginPath(\"admins\"))\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} plugin_name\n * @return string\n */\n GetPluginPath(plugin_name)\n```\n\n### Example\n```js\ncommands.Register(\"getpath\", (playerid, args, argc, silent, prefix) => {\n    console.log(GetPluginPath(\"admins\"))\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nstring Generic.GetPluginPath(string plugin_name)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetPluginPath"
    },
    "generic.getpluginstate": {
        "page": "# GetPluginState\n\nReturns the state of a plugin.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param plugin_name string\n--- @return PluginState_t\n GetPluginState(plugin_name)\n```\n\n### Example\n```lua\ncommands:Register(\"getpluginstate\", function(playerid, args, argsCount, silent, prefix)\n    print(GetPluginState(\"admins\"))\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} plugin_name\n * @return PluginState_t\n */\n GetPluginState(plugin_name)\n```\n\n### Example\n```js\ncommands.Register(\"getpluginstate\", (playerid, args, argc, silent, prefix) => {\n    console.log(GetPluginState(\"admins\"))\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nPluginState_t Generic.GetPluginState(string plugin_name)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetPluginState"
    },
    "generic.print": {
        "page": "# Print\n\nPrints values provided in the function.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param ... any\n--- @return nil\n print(...)\n```\n## Colors\n\nBelow there are listed all the supported colors by Swiftly:\n```\n{DEFAULT}\n{WHITE}\n{DARKRED}\n{LIGHTPURPLE}\n{GREEN}\n{OLIVE}\n{LIME}\n{RED}\n{LIGHTYELLOW}\n{YELLOW}\n{BLUEGREY}\n{LIGHTBLUE}\n{BLUE}\n{DARKBLUE}\n{PURPLE}\n{MAGENTA}\n{LIGHTRED}\n{GOLD}\n{ORANGE}\n```\n\n### Example\n```lua\nprint(\"hello {green}world{default}\")\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {any} ...\n * @return void\n */\n console.log(...)\n```\n## Colors\n\nBelow there are listed all the supported colors by Swiftly:\n```\n{DEFAULT}\n{WHITE}\n{DARKRED}\n{LIGHTPURPLE}\n{GREEN}\n{OLIVE}\n{LIME}\n{RED}\n{LIGHTYELLOW}\n{YELLOW}\n{BLUEGREY}\n{LIGHTBLUE}\n{BLUE}\n{DARKBLUE}\n{PURPLE}\n{MAGENTA}\n{LIGHTRED}\n{GOLD}\n{ORANGE}\n```\n\n### Example\n```js\nconsole.log(\"hello {green}world{default}\")\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Console.WriteLine(object ...)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Print"
    },
    "hooks": {
        "page": "# Hooks\n\nThis is the list of items available for Hooks API.\n\n## Functions\n\n<Catalog filter=\"hooks.addhook,hooks.addposthooklistener,hooks.addprehooklistener,hooks.addvhook,hooks.callhook\"></Catalog>",
        "title": "Hooks",
        "icon": "anchor"
    },
    "hooks.addhook": {
        "page": "# AddHook\n\nCreates a function hook.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param memory Memory\n--- @param args_list string\n--- @param return_type string\n--- @return HookHandle\n AddHook(memory, args_list, return_type)\n```\nBelow will be listed a table for all the data types for args list and return type:\n\n|         Data Types        | Value |\n|:-------------------------:|:-----:|\n|         `Pointer`         |  `p`  |\n|          `Float`          |  `f`  |\n|         `Boolean`         |  `b`  |\n|          `Double`         |  `d`  |\n|         `Integer`         |  `i`  |\n|     `Unsigned Integer`    |  `u`  |\n|       `string`       |  `s`  |\n|      `64-bit Integer`     |  `I`  |\n| `64-bit Unsigned Integer` |  `U`  |\n|           `Void`          |  `v`  |\n\n### Example\n```lua\nlocal mem_terminateround = Memory()\nmem_terminateround:LoadFromSignatureName(\"CGameRules_TerminateRound\")\nlocal hook_terminateround = AddHook(mem_terminateround, \"pufuu\", \"v\")\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Memory} memory\n * @param {string} args_list\n * @param {string} return_type\n * @return HookHandle\n */\n AddHook(memory, args_list, return_type)\n```\nBelow will be listed a table for all the data types for args list and return type:\n\n|         Data Types        | Value |\n|:-------------------------:|:-----:|\n|         `Pointer`         |  `p`  |\n|          `Float`          |  `f`  |\n|         `Boolean`         |  `b`  |\n|          `Double`         |  `d`  |\n|         `Integer`         |  `i`  |\n|     `Unsigned Integer`    |  `u`  |\n|       `string`       |  `s`  |\n|      `64-bit Integer`     |  `I`  |\n| `64-bit Unsigned Integer` |  `U`  |\n|           `Void`          |  `v`  |\n\n### Example\n```js\nlet mem_terminateround = Memory()\nmem_terminateround.LoadFromSignatureName(\"CGameRules_TerminateRound\")\nlet hook_terminateround = AddHook(mem_terminateround, \"pufuu\", \"v\")\n\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nHookHandle Generic.AddHook(Memory memory, string args_list, string return_type)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "AddHook"
    },
    "hooks.addposthooklistener": {
        "page": "# AddPostHookListener\n\nAdds a new hook listener after the hook is executed.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param hook_handle HookHandle\n--- @param callback fun(event:Event):EventResult|nil\n--- @return EventHandler\n AddPostHookListener(hook_handle, callback)\n```\n\n### Example\n```lua\nlocal mem_terminateround = Memory()\nmem_terminateround:LoadFromSignatureName(\"CGameRules_TerminateRound\")\nlocal hook_terminateround = AddHook(mem_terminateround, \"pufuu\", \"v\")\n\nAddPostHookListener(hook_terminateround, function(p_Event)\n    -- ...\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {HookHandle} hook_handle\n * @param {(event:Event) => EventResult?} callback\n * @return EventHandler\n */\n AddPostHookListener(hook_handle, callback)\n```\n\n### Example\n```js\nlet mem_terminateround = Memory()\nmem_terminateround.LoadFromSignatureName(\"CGameRules_TerminateRound\")\nlet hook_terminateround = AddHook(mem_terminateround, \"pufuu\", \"v\")\n\nAddPostHookListener(hook_terminateround, (p_Event) => {\n    // ...\n})\n\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nEventHandler Generic.AddPostHookListener(HookHandle hook_handle, Func<Event, EventResult?> callback)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "AddPostHookListener"
    },
    "hooks.addprehooklistener": {
        "page": "# AddPreHookListener\n\nAdds a new hook listener before the hook is executed.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param hook_handle HookHandle\n--- @param callback fun(event:Event):EventResult|nil\n--- @return EventHandler\n AddPreHookListener(hook_handle, callback)\n```\n\n### Example\n```lua\nlocal mem_terminateround = Memory()\nmem_terminateround:LoadFromSignatureName(\"CGameRules_TerminateRound\")\nlocal hook_terminateround = AddHook(mem_terminateround, \"pufuu\", \"v\")\n\nAddPreHookListener(hook_terminateround, function(p_Event)\n    -- ...\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {HookHandle} hook_handle\n * @param {(event:Event) => EventResult?} callback\n * @return EventHandler\n */\n AddPreHookListener(hook_handle, callback)\n```\n\n### Example\n```js\nlet mem_terminateround = Memory()\nmem_terminateround.LoadFromSignatureName(\"CGameRules_TerminateRound\")\nlet hook_terminateround = AddHook(mem_terminateround, \"pufuu\", \"v\")\n\nAddPreHookListener(hook_terminateround, (p_Event) => {\n    // ...\n})\n\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nEventHandler Generic.AddPreHookListener(HookHandle hook_handle, Func<Event, EventResult?> callback)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "AddPreHookListener"
    },
    "hooks.addvhook": {
        "page": "# AddHook\n\nCreates a virtual function hook.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param library string\n--- @param vtable_name string\n--- @param offset string\n--- @param args_list string\n--- @param return_type string\n--- @return HookHandle\n AddHook(library, vtable_name, offset, args_list, return_type)\n```\nBelow will be listed a table for all the data types for args list and return type:\n\n|         Data Types        | Value |\n|:-------------------------:|:-----:|\n|         `Pointer`         |  `p`  |\n|          `Float`          |  `f`  |\n|         `Boolean`         |  `b`  |\n|          `Double`         |  `d`  |\n|         `Integer`         |  `i`  |\n|     `Unsigned Integer`    |  `u`  |\n|       `string`       |  `s`  |\n|      `64-bit Integer`     |  `I`  |\n| `64-bit Unsigned Integer` |  `U`  |\n|           `Void`          |  `v`  |\n\n### Example\n```lua\nlocal hook_query = AddVHook(\"engine2\", \"CServerSideClient\", \"CServerSideClient_OnConVarQuery\", \"pp\", \"b\")\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} library\n * @param {string} vtable_name\n * @param {string} offset\n * @param {string} args_list\n * @param {string} return_type\n * @return HookHandle\n */\n AddHook(library, vtable_name, offset, args_list, return_type)\n```\nBelow will be listed a table for all the data types for args list and return type:\n\n|         Data Types        | Value |\n|:-------------------------:|:-----:|\n|         `Pointer`         |  `p`  |\n|          `Float`          |  `f`  |\n|         `Boolean`         |  `b`  |\n|          `Double`         |  `d`  |\n|         `Integer`         |  `i`  |\n|     `Unsigned Integer`    |  `u`  |\n|       `string`       |  `s`  |\n|      `64-bit Integer`     |  `I`  |\n| `64-bit Unsigned Integer` |  `U`  |\n|           `Void`          |  `v`  |\n\n### Example\n```js\nlet hook_query = AddVHook(\"engine2\", \"CServerSideClient\", \"CServerSideClient_OnConVarQuery\", \"pp\", \"b\")\n\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nHookHandle Generic.AddHook(string library, string vtable_name, string offset, string args_list, string return_type)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "AddHook"
    },
    "hooks.callhook": {
        "page": "# CallHook\n\nCalls a specific hook.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param hook_handle HookHandle\n--- @param ... any\n--- @return any\n CallHook(hook_handle, ...)\n```\n\n### Example\n```lua\nlocal mem_terminateround = Memory()\nmem_terminateround:LoadFromSignatureName(\"CGameRules_TerminateRound\")\nlocal hook_terminateround = AddHook(mem_terminateround, \"pufuu\", \"v\")\n\nCallHook(hook_terminateround, GetCCSGameRules(), 1, 5.0, 1, 1)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {HookHandle} hook_handle\n * @param {any} ...\n * @return any\n */\n CallHook(hook_handle, ...)\n```\n\n### Example\n```js\n\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nobject Generic.CallHook(HookHandle hook_handle, object ...)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "CallHook"
    },
    "logs": {
        "page": "# Logs\n\nThis is the list of items available for Logs API.\n\n## Functions\n\n<Catalog filter=\"logs.write\"></Catalog>",
        "title": "Logs",
        "icon": "list"
    },
    "logs.write": {
        "page": "# Write\n\nWrites a specific text in the plugin's log file.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param log_type LogType_t\n--- @param text string\n--- @return nil\n logger:Write(log_type, text)\n```\n\n### Example\n```lua\nAddEventHandler(\"OnPlayerConnectFull\", function(event)\n    local playerid = event:GetInt(\"userid\")\n    local player = GetPlayer(playerid)\n    if not player or not player:IsValid() then return end\n\n    if not player:CBasePlayerController():IsValid() then return end\n    logger:Write(LogType_t.Common, \"The player: \" .. player:CBasePlayerController().PlayerName .. \" joined the server!\")\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {LogType_t} log_type\n * @param {string} text\n * @return void\n */\n logger.Write(log_type, text)\n```\n\n### Example\n```js\nAddEventHandler(\"OnPlayerConnectFull\", (event) => {\n    let playerid = event.GetInt(\"userid\")\n    let player = GetPlayer(playerid)\n    if (!player || !player.IsValid()) return;\n\n    if (!player.CBasePlayerController().IsValid()) return;\n    logger.Write(LogType_t.Common, `The player: ${player.CBasePlayerController().PlayerName} joined the server!`)\n})\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Logs.Write(LogType_t log_type, string text)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Write"
    },
    "memory": {
        "page": "# Memory\n\nThis is the list of items available for Memory API.\n\n## Functions\n\n<Catalog filter=\"memory.accessedvtable,memory.accessindex,memory.accessindexfromoffset,memory.accessvtable,memory.accessvtablefromoffset,memory.addoffset,memory.addoffsetbyname,memory.allocate,memory.clear,memory.deallocate,memory.dereference,memory.getbool,memory.getdouble,memory.getfloat,memory.getint,memory.getint64,memory.getptr,memory.getuint,memory.getuint64,memory.isvalid,memory.loadfromaddress,memory.loadfromsignature,memory.loadfromsignaturename,memory.removeoffset,memory.removeoffsetbyname,memory.setbool,memory.setdouble,memory.setfloat,memory.setint,memory.setint64,memory.setuint,memory.setuint64\"></Catalog>",
        "title": "Memory",
        "icon": "memory"
    },
    "memory.accessedvtable": {
        "page": "# AccessedVTable\n\nReturns if the memory is in the VTable.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return boolean\n memory:AccessedVTable()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return bool\n */\n memory.AccessedVTable()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nbool Memory.AccessedVTable()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "AccessedVTable"
    },
    "memory.accessindex": {
        "page": "# AccessIndex\n\nAccesses the specified index.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param index number\n--- @return nil\n memory:AccessIndex(index)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {number} index\n * @return void\n */\n memory.AccessIndex(index)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Memory.AccessIndex(long index)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "AccessIndex"
    },
    "memory.accessindexfromoffset": {
        "page": "# AccessIndexFromOffset\n\nAccesses an index at the specified offset from `offsets.json`.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param offsetName string\n--- @return nil\n memory:AccessIndexFromOffset(offsetName)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} offsetName\n * @return void\n */\n memory.AccessIndexFromOffset(offsetName)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Memory.AccessIndexFromOffset(string offsetName)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "AccessIndexFromOffset"
    },
    "memory.accessvtable": {
        "page": "# AccessVTable\n\nAccesses the VTable at the specified offset.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param offset number\n--- @return nil\n memory:AccessVTable(offset)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {number} offset\n * @return void\n */\n memory.AccessVTable(offset)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Memory.AccessVTable(long offset)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "AccessVTable"
    },
    "memory.accessvtablefromoffset": {
        "page": "# AccessVTableFromOffset\n\nAccesses the VTable at the specified offset from `offsets.json`.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param offsetName string\n--- @return nil\n memory:AccessVTableFromOffset(offsetName)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} offsetName\n * @return void\n */\n memory.AccessVTableFromOffset(offsetName)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Memory.AccessVTableFromOffset(string offsetName)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "AccessVTableFromOffset"
    },
    "memory.addoffset": {
        "page": "# AddOffset\n\nAdds an offset to the pointer which is being hold.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param offset number\n--- @return nil\n memory:AddOffset(offset)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {number} offset\n * @return void\n */\n memory.AddOffset(offset)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Memory.AddOffset(long offset)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "AddOffset"
    },
    "memory.addoffsetbyname": {
        "page": "# AddOffsetByName\n\nAdds an offset to the pointer which is being hold by the name provided from `offsets.json`.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param offsetName string\n--- @return nil\n memory:AddOffsetByName(offsetName)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} offsetName\n * @return void\n */\n memory.AddOffsetByName(offsetName)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Memory.AddOffsetByName(string offsetName)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "AddOffsetByName"
    },
    "memory.allocate": {
        "page": "# Allocate\n\nAllocates memory based on the specified size.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param size number\n--- @return nil\n memory:Allocate(size)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {number} size\n * @return void\n */\n memory.Allocate(size)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Memory.Allocate(ulong size)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Allocate"
    },
    "memory.clear": {
        "page": "# Clear\n\nClears the pointer which is being hold by the class.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return nil\n memory:Clear()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return void\n */\n memory.Clear()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Memory.Clear()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Clear"
    },
    "memory.deallocate": {
        "page": "# Deallocate\n\nDeallocates the memory stored.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return nil\n memory:Deallocate()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return void\n */\n memory.Deallocate()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Memory.Deallocate()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Deallocate"
    },
    "memory.dereference": {
        "page": "# Dereferance\n\nDereferences the pointer.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return nil\n memory:Dereferance()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return void\n */\n memory.Dereferance()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Memory.Dereferance()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Dereferance"
    },
    "memory.getbool": {
        "page": "# GetBool\n\nReturns the boolean value at the memory address.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return boolean\n memory:GetBool()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return bool\n */\n memory.GetBool()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nbool Memory.GetBool()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetBool"
    },
    "memory.getdouble": {
        "page": "# GetDouble\n\nReturns the double value at the memory address.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return number\n memory:GetDouble()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return number\n */\n memory.GetDouble()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\ndouble Memory.GetDouble()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetDouble"
    },
    "memory.getfloat": {
        "page": "# GetFloat\n\nReturns the float value at the memory address.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return number\n memory:GetFloat()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return number\n */\n memory.GetFloat()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nfloat Memory.GetFloat()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetFloat"
    },
    "memory.getint": {
        "page": "# GetInt\n\nReturns the number value at the memory address.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return number\n memory:GetInt()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return number\n */\n memory.GetInt()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nint Memory.GetInt()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetInt"
    },
    "memory.getint64": {
        "page": "# GetInt64\n\nReturns the number 64-bit value at the memory address.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return number\n memory:GetInt64()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return number\n */\n memory.GetInt64()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nlong Memory.GetInt64()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetInt64"
    },
    "memory.getptr": {
        "page": "# GetPtr\n\nReturns the pointer which is being hold by the class.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return string\n memory:GetPtr()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return string\n */\n memory.GetPtr()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nstring Memory.GetPtr()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetPtr"
    },
    "memory.getuint": {
        "page": "# GetUInt\n\nReturns the number unsigned value at the memory address.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return number\n memory:GetUInt()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return number\n */\n memory.GetUInt()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nuint Memory.GetUInt()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetUInt"
    },
    "memory.getuint64": {
        "page": "# GetUInt64\n\nReturns the number unsigned 64-bit value at the memory address.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return number\n memory:GetUInt64()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return number\n */\n memory.GetUInt64()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nulong Memory.GetUInt64()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetUInt64"
    },
    "memory.isvalid": {
        "page": "# IsValid\n\nChecks if the pointer is null or not.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return boolean\n memory:IsValid()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return bool\n */\n memory.IsValid()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nbool Memory.IsValid()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "IsValid"
    },
    "memory.loadfromaddress": {
        "page": "# LoadFromAddress\n\nLoads the memory from a provided address.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param address string\n--- @return nil\n memory:LoadFromAddress(address)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} address\n * @return void\n */\n memory.LoadFromAddress(address)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Memory.LoadFromAddress(string address)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "LoadFromAddress"
    },
    "memory.loadfromsignature": {
        "page": "# LoadFromSignature\n\nLoads the memory from the provided signature.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param library string\n--- @param signature string\n--- @return nil\n memory:LoadFromSignature(library, signature)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} library\n * @param {string} signature\n * @return void\n */\n memory.LoadFromSignature(library, signature)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Memory.LoadFromSignature(string library, string signature)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "LoadFromSignature"
    },
    "memory.loadfromsignaturename": {
        "page": "# LoadFromSignatureName\n\nLoads the memory from the provided signature from `signatures.json`.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param signature string\n--- @return nil\n memory:LoadFromSignatureName(signature)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} signature\n * @return void\n */\n memory.LoadFromSignatureName(signature)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Memory.LoadFromSignatureName(string signature)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "LoadFromSignatureName"
    },
    "memory.removeoffset": {
        "page": "# RemoveOffset\n\nRemoves an offset to the pointer which is being hold.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param offset number\n--- @return nil\n memory:RemoveOffset(offset)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {number} offset\n * @return void\n */\n memory.RemoveOffset(offset)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Memory.RemoveOffset(long offset)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "RemoveOffset"
    },
    "memory.removeoffsetbyname": {
        "page": "# RemoveOffsetByName\n\nRemoves an offset to the pointer which is being hold by the name provided from `offsets.json`.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param offsetName string\n--- @return nil\n memory:RemoveOffsetByName(offsetName)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} offsetName\n * @return void\n */\n memory.RemoveOffsetByName(offsetName)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Memory.RemoveOffsetByName(string offsetName)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "RemoveOffsetByName"
    },
    "memory.setbool": {
        "page": "# SetBool\n\nSet the boolean value to the memory address.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param value boolean\n--- @return nil\n memory:SetBool(value)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {bool} value\n * @return void\n */\n memory.SetBool(value)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Memory.SetBool(bool value)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "SetBool"
    },
    "memory.setdouble": {
        "page": "# SetDouble\n\nSet the double value to the memory address.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param value number\n--- @return nil\n memory:SetDouble(value)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {number} value\n * @return void\n */\n memory.SetDouble(value)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Memory.SetDouble(double value)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "SetDouble"
    },
    "memory.setfloat": {
        "page": "# SetFloat\n\nSet the float value to the memory address.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param value number\n--- @return nil\n memory:SetFloat(value)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {number} value\n * @return void\n */\n memory.SetFloat(value)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Memory.SetFloat(float value)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "SetFloat"
    },
    "memory.setint": {
        "page": "# SetInt\n\nSet the number value to the memory address.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param value number\n--- @return nil\n memory:SetInt(value)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {number} value\n * @return void\n */\n memory.SetInt(value)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Memory.SetInt(int value)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "SetInt"
    },
    "memory.setint64": {
        "page": "# SetInt64\n\nSet the number 64-bit value to the memory address.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param value number\n--- @return nil\n memory:SetInt64(value)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {number} value\n * @return void\n */\n memory.SetInt64(value)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Memory.SetInt64(long value)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "SetInt64"
    },
    "memory.setuint": {
        "page": "# SetUInt\n\nSet the number unsigned value to the memory address.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param value number\n--- @return nil\n memory:SetUInt(value)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {number} value\n * @return void\n */\n memory.SetUInt(value)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Memory.SetUInt(uint value)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "SetUInt"
    },
    "memory.setuint64": {
        "page": "# SetUInt64\n\nSet the number unsigned 64-bit value to the memory address.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param value number\n--- @return nil\n memory:SetUInt64(value)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {number} value\n * @return void\n */\n memory.SetUInt64(value)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Memory.SetUInt64(ulong value)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "SetUInt64"
    },
    "menus": {
        "page": "# Menus\n\nThis is the list of items available for Menus API.\n\n## Functions\n\n<Catalog filter=\"menus.register,menus.registertemporary,menus.unregister\"></Catalog>",
        "title": "Menus",
        "icon": "book"
    },
    "menus.register": {
        "page": "# Register\n\nRegisters a menu by a specific ID.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param id string\n--- @param title string\n--- @param color string\n--- @param options table\n--- @param kind string|nil\n--- @return nil\n menus:Register(id, title, color, options, kind)\n```\n> [!note]\n> The color needs to be a hex string by the model RRGGBB.\n\n> Example: 344CEB \n\n> [!warning]\n> The options needs to be a pair of strings.\n\n```lua\n{\n    { \"option 1\", \"value 1\" },\n    { \"option 2\", \"value 2\" },\n    -- ...\n}\n```\n> [!warning]\n> The value can be replaced with a command from Swiftly and it's arguments, or it can be replaced with a menu id to open another menu.\n> The value can be also a blank string to not execute anything when it's selected. \n\n### Kinds\nAll menu kinds are available [here](/plugin-docs/configuration/menu#kinds).\n\n### Example\n```lua\ncommands:Register(\"menu\", function(playerid, args, argsCount, silent, prefix)\n    menus:Register(\"menu\", \"Admin Panel\", \"344CEB\", {\n        { \"Kick Player\", \"sw_kick #1\" },\n        { \"Mute Player\", \"sw_mute #1\" },\n        { \"Ban Player\",  \"sw_ban #1\" }\n    }, \"screen\") -- screen or center\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} id\n * @param {string} title\n * @param {string} color\n * @param {string[]} options\n * @param {string?} kind\n * @return void\n */\n menus.Register(id, title, color, options, kind)\n```\n> [!note]\n> The color needs to be a hex string by the model RRGGBB.\n\n> Example: 344CEB \n\n> [!warning]\n> The options needs to be a pair of strings.\n\n```js\n[\n    [ \"option 1\", \"value 1\" ],\n    [ \"option 2\", \"value 2\" ],\n    // ...\n]\n```\n> [!warning]\n> The value can be replaced with a command from Swiftly and it's arguments, or it can be replaced with a menu id to open another menu.\n> The value can be also a blank string to not execute anything when it's selected. \n\n### Kinds\nAll menu kinds are available [here](/plugin-docs/configuration/menu#kinds).\n\n### Example\n```js\ncommands.Register(\"menu\", (playerId, args, argc, silent, prefix) => {\n    menus.Register(`admin_menu`, \"Admin Panel\", \"344CEB\",\n        [\n            [\"Kick Player\", \"sw_kick #1\"],\n            [\"Mute Player\", \"sw_mute #1\"],\n            [\"Ban Player\", \"sw_ban #1\"]\n        ],\n        \"screen\" // or \"center\"\n    );\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Menus.Register(string id, string title, string color, string[][] options, string? kind)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Register"
    },
    "menus.registertemporary": {
        "page": "# RegisterTemporary\n\nRegisters a temporary menu by a specific ID.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param id string\n--- @param title string\n--- @param color string\n--- @param options table\n--- @param kind string|nil\n--- @return nil\n menus:RegisterTemporary(id, title, color, options, kind)\n```\n> [!note]\n> The color needs to be a hex string by the model RRGGBB.\n\n> Example: 344CEB \n\n> [!warning]\n> The options needs to be a pair of strings.\n\n```lua\n{\n    { \"option 1\", \"value 1\" },\n    { \"option 2\", \"value 2\" },\n    -- ...\n}\n```\n> [!warning]\n> The value can be replaced with a command from Swiftly and it's arguments, or it can be replaced with a menu id to open another menu.\n> The value can be also a blank string to not execute anything when it's selected. \n\n### Kinds\nAll menu kinds are available [here](/plugin-docs/configuration/menu#kinds).\n\n### Example\n```lua\ncommands:Register(\"tempmenu\", function(playerid, args, argsCount, silent, prefix)\n    menus:RegisterTemporary(string.format(\"temp_menu_%d\", playerid), \"Admin Panel\", \"344CEB\", {\n        { \"Kick Player\", \"sw_kick #1\" },\n        { \"Mute Player\", \"sw_mute #1\" },\n        { \"Ban Player\",  \"sw_ban #1\" }\n    }, \"screen\") -- screen or center\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} id\n * @param {string} title\n * @param {string} color\n * @param {string[]} options\n * @param {string?} kind\n * @return void\n */\n menus.RegisterTemporary(id, title, color, options, kind)\n```\n> [!note]\n> The color needs to be a hex string by the model RRGGBB.\n\n> Example: 344CEB \n\n> [!warning]\n> The options needs to be a pair of strings.\n\n```js\n[\n    [ \"option 1\", \"value 1\" ],\n    [ \"option 2\", \"value 2\" ],\n    // ...\n]\n```\n> [!warning]\n> The value can be replaced with a command from Swiftly and it's arguments, or it can be replaced with a menu id to open another menu.\n> The value can be also a blank string to not execute anything when it's selected. \n\n### Kinds\nAll menu kinds are available [here](/plugin-docs/configuration/menu#kinds).\n\n### Example\n```js\ncommands.Register(\"tempmenu\", (playerId, args, argc, silent, prefix) => {\n    menus.RegisterTemporary(`temp_menu_${playerId}`, playerId, \"Admin Panel\", \"344CEB\",\n        [\n            [\"Kick Player\", \"sw_kick #1\"],\n            [\"Mute Player\", \"sw_mute #1\"],\n            [\"Ban Player\", \"sw_ban #1\"]\n        ],\n        \"screen\" // or \"center\"\n    );\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Menus.RegisterTemporary(string id, string title, string color, string[][] options, string? kind)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "RegisterTemporary"
    },
    "menus.unregister": {
        "page": "# UnregisterMenu\n\nUnregistered a menu by the specified id.\n> [!note]\n> It can unregister only the menus which were created from the inside of the plugin. \n\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param id string\n--- @return nil\n menus:UnregisterMenu(id)\n```\n\n### Example\n```lua\ncommands:Register(\"removemenu\", function(playerid, args, argsCount, silent, prefix)\n    menus:Unregister(\"admin_menu\")\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} id\n * @return void\n */\n menus.UnregisterMenu(id)\n```\n\n### Example\n```js\ncommands.Register(\"removemenu\", (playerId, args, argc, silent, prefix) => {\n    menus.Unregister(\"admin_menu\")\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Menus.UnregisterMenu(string id)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "UnregisterMenu"
    },
    "player": {
        "page": "# Player\n\nThis is the list of items available for Player API.\n\n## Functions\n\n<Catalog filter=\"player.cbaseentity,player.cbaseplayercontroller,player.cbaseplayerpawn,player.ccsplayercontroller,player.ccsplayerpawn,player.ccsplayerpawnbase,player.changeteam,player.drop,player.executecommand,player.getchatcolor,player.getchattag,player.getchattagcolor,player.getconnectedtime,player.getconvar,player.getipaddress,player.getlistening,player.getnamecolor,player.getslot,player.getsteamid,player.getsteamid2,player.getvar,player.getvoiceflags,player.getweaponmanager,player.hidemenu,player.isfakeclient,player.isfirstspawn,player.isvalid,player.kill,player.performmenuaction,player.queryconvar,player.respawn,player.sendmsg,player.setchatcolor,player.setchattag,player.setchattagcolor,player.setconvar,player.setlistening,player.setnamecolor,player.setvar,player.setvoiceflags,player.showmenu,player.switchteam\"></Catalog>",
        "title": "Player",
        "icon": "user"
    },
    "player.cbaseentity": {
        "page": "# CBaseEntity\n\nReturns the player's CBaseEntity based of CCSPlayerPawn.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return CBaseEntity\n player:CBaseEntity()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return CBaseEntity\n */\n player.CBaseEntity()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nCBaseEntity Player.CBaseEntity()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "CBaseEntity"
    },
    "player.cbaseplayercontroller": {
        "page": "# CBasePlayerController\n\nReturns the player's CBasePlayerController.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return CBasePlayerController\n player:CBasePlayerController()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return CBasePlayerController\n */\n player.CBasePlayerController()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nCBasePlayerController Player.CBasePlayerController()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "CBasePlayerController"
    },
    "player.cbaseplayerpawn": {
        "page": "# CBasePlayerPawn\n\nReturns the player's CBasePlayerPawn.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return CBasePlayerPawn\n player:CBasePlayerPawn()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return CBasePlayerPawn\n */\n player.CBasePlayerPawn()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nCBasePlayerPawn Player.CBasePlayerPawn()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "CBasePlayerPawn"
    },
    "player.ccsplayercontroller": {
        "page": "# CCSPlayerController\n\nReturns the player's CCSPlayerController.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return CCSPlayerController\n player:CCSPlayerController()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return CCSPlayerController\n */\n player.CCSPlayerController()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nCCSPlayerController Player.CCSPlayerController()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "CCSPlayerController"
    },
    "player.ccsplayerpawn": {
        "page": "# CCSPlayerPawn\n\nReturns the player's CCSPlayerPawn.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return CCSPlayerPawn\n player:CCSPlayerPawn()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return CCSPlayerPawn\n */\n player.CCSPlayerPawn()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nCCSPlayerPawn Player.CCSPlayerPawn()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "CCSPlayerPawn"
    },
    "player.ccsplayerpawnbase": {
        "page": "# CCSPlayerPawnBase\n\nReturns the player's CCSPlayerPawnBase.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return CCSPlayerPawnBase\n player:CCSPlayerPawnBase()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return CCSPlayerPawnBase\n */\n player.CCSPlayerPawnBase()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nCCSPlayerPawnBase Player.CCSPlayerPawnBase()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "CCSPlayerPawnBase"
    },
    "player.changeteam": {
        "page": "# ChangeTeam\n\nChanges the player's team.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param team Team\n--- @return nil\n player:ChangeTeam(team)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Team} team\n * @return void\n */\n player.ChangeTeam(team)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Player.ChangeTeam(Team team)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "ChangeTeam"
    },
    "player.drop": {
        "page": "# Drop\n\nDrops the client from the server.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param reason DisconnectReason\n--- @param msg string|nil\n--- @return nil\n player:Drop(reason, msg)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {DisconnectReason} reason\n * @param {string?} msg\n * @return void\n */\n player.Drop(reason, msg)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Player.Drop(DisconnectReason reason, string? msg)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Drop"
    },
    "player.executecommand": {
        "page": "# ExecuteCommand\n\nExecutes a command on behalf of a player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param command string\n--- @return nil\n player:ExecuteCommand(command)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} command\n * @return void\n */\n player.ExecuteCommand(command)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Player.ExecuteCommand(string command)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "ExecuteCommand"
    },
    "player.getchatcolor": {
        "page": "# GetChatColor\n\nReturns the chat color of the player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return string\n player:GetChatColor()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return string\n */\n player.GetChatColor()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nstring Player.GetChatColor()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetChatColor"
    },
    "player.getchattag": {
        "page": "# GetChatTag\n\nReturns the chat tag of the player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return string\n player:GetChatTag()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return string\n */\n player.GetChatTag()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nstring Player.GetChatTag()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetChatTag"
    },
    "player.getchattagcolor": {
        "page": "# GetChatTagColor\n\nReturns the chat tag color of the player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return string\n player:GetChatTagColor()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return string\n */\n player.GetChatTagColor()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nstring Player.GetChatTagColor()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetChatTagColor"
    },
    "player.getconnectedtime": {
        "page": "# GetConnectedTime\n\nReturns the connected time of the player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return number\n player:GetConnectedTime()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return number\n */\n player.GetConnectedTime()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nulong Player.GetConnectedTime()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetConnectedTime"
    },
    "player.getconvar": {
        "page": "# GetConvar\n\nReturns the convar value of the player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param convar string\n--- @return string\n player:GetConvar(convar)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} convar\n * @return string\n */\n player.GetConvar(convar)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nstring Player.GetConvar(string convar)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetConvar"
    },
    "player.getipaddress": {
        "page": "# GetIPAddress\n\nReturns the IP address of the player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return string\n player:GetIPAddress()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return string\n */\n player.GetIPAddress()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nstring Player.GetIPAddress()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetIPAddress"
    },
    "player.getlistening": {
        "page": "# GetListening\n\nReturns the listening override of a specific player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param id number\n--- @return ListenOverride\n player:GetListening(id)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {number} id\n * @return ListenOverride\n */\n player.GetListening(id)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nListenOverride Player.GetListening(int id)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetListening"
    },
    "player.getnamecolor": {
        "page": "# GetNameColor\n\nReturns the name color of the player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return string\n player:GetNameColor()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return string\n */\n player.GetNameColor()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nstring Player.GetNameColor()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetNameColor"
    },
    "player.getslot": {
        "page": "# GetSlot\n\nReturns the slot of the player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return number\n player:GetSlot()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return number\n */\n player.GetSlot()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nint Player.GetSlot()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetSlot"
    },
    "player.getsteamid": {
        "page": "# GetSteamID\n\nReturns the SteamID64 of the player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return number\n player:GetSteamID()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return number\n */\n player.GetSteamID()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nulong Player.GetSteamID()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetSteamID"
    },
    "player.getsteamid2": {
        "page": "# GetSteamID2\n\nReturns the SteamID of the player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return string\n player:GetSteamID2()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return string\n */\n player.GetSteamID2()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nstring Player.GetSteamID2()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetSteamID2"
    },
    "player.getvar": {
        "page": "# GetVar\n\nReturns the variable value of the player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param key string\n--- @return any\n player:GetVar(key)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} key\n * @return any\n */\n player.GetVar(key)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nobject Player.GetVar(string key)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetVar"
    },
    "player.getvoiceflags": {
        "page": "# GetVoiceFlags\n\nReturns the voice flags of the player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return number\n player:GetVoiceFlags()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return number\n */\n player.GetVoiceFlags()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nulong Player.GetVoiceFlags()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetVoiceFlags"
    },
    "player.getweaponmanager": {
        "page": "# GetWeaponManager\n\nReturns the Weapon Manager for the player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return WeaponManager\n player:GetWeaponManager()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return WeaponManager\n */\n player.GetWeaponManager()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nWeaponManager Player.GetWeaponManager()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetWeaponManager"
    },
    "player.hidemenu": {
        "page": "# HideMenu\n\nHides the player menu.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return nil\n player:HideMenu()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return void\n */\n player.HideMenu()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Player.HideMenu()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "HideMenu"
    },
    "player.isfakeclient": {
        "page": "# IsFakeClient\n\nChecks if the player is a bot.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return boolean\n player:IsFakeClient()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return bool\n */\n player.IsFakeClient()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nbool Player.IsFakeClient()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "IsFakeClient"
    },
    "player.isfirstspawn": {
        "page": "# IsFirstSpawn\n\nChecks if the player is at the first spawn.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return boolean\n player:IsFirstSpawn()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return bool\n */\n player.IsFirstSpawn()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nbool Player.IsFirstSpawn()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "IsFirstSpawn"
    },
    "player.isvalid": {
        "page": "# IsValid\n\nChecks if it's a valid player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return boolean\n player:IsValid()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return bool\n */\n player.IsValid()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nbool Player.IsValid()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "IsValid"
    },
    "player.kill": {
        "page": "# Kill\n\nKills the player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return nil\n player:Kill()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return void\n */\n player.Kill()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Player.Kill()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Kill"
    },
    "player.performmenuaction": {
        "page": "# PerformMenuAction\n\nChecks if it's a valid player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param action string\n--- @param value number\n--- @return nil\n player:PerformMenuAction(action, value)\n```\n### Actions\nBelow are listed all the menu actions:\n- **useOption** -> Uses the option specified in the value parameter.\n- **scrollToOption** -> Scrolls to the option specified in the value parameter.\n\n> [!note]\n> There are a number of maximum 10 items on each page.\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} action\n * @param {number} value\n * @return void\n */\n player.PerformMenuAction(action, value)\n```\n### Actions\nBelow are listed all the menu actions:\n- **useOption** -> Uses the option specified in the value parameter.\n- **scrollToOption** -> Scrolls to the option specified in the value parameter.\n\n> [!note]\n> There are a number of maximum 10 items on each page.\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Player.PerformMenuAction(string action, int value)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "PerformMenuAction"
    },
    "player.queryconvar": {
        "page": "# QueryConvar\n\nQueries a convar from a player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param convar_name string\n--- @return nil\n player:QueryConvar(convar_name)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} convar_name\n * @return void\n */\n player.QueryConvar(convar_name)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Player.QueryConvar(string convar_name)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "QueryConvar"
    },
    "player.respawn": {
        "page": "# Respawn\n\nRespawns the player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return nil\n player:Respawn()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return void\n */\n player.Respawn()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Player.Respawn()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Respawn"
    },
    "player.sendmsg": {
        "page": "# SendMsg\n\nSends a message to the players.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param msgType MessageType\n--- @param text string\n--- @return nil\n player:SendMsg(msgType, text)\n```\n\n\n## Colors\nBelow there are listed all the supported colors by Swiftly:\n```\n{DEFAULT}\n{WHITE}\n{DARKRED}\n{LIGHTPURPLE}\n{GREEN}\n{OLIVE}\n{LIME}\n{RED}\n{GRAY}\n{GREY}\n{LIGHTYELLOW}\n{YELLOW}\n{SILVER}\n{BLUEGREY}\n{LIGHTBLUE}\n{BLUE}\n{DARKBLUE}\n{PURPLE}\n{MAGENTA}\n{LIGHTRED}\n{GOLD}\n{ORANGE}\n{TEAMCOLOR}\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {MessageType} msgType\n * @param {string} text\n * @return void\n */\n player.SendMsg(msgType, text)\n```\n\n\n## Colors\nBelow there are listed all the supported colors by Swiftly:\n```\n{DEFAULT}\n{WHITE}\n{DARKRED}\n{LIGHTPURPLE}\n{GREEN}\n{OLIVE}\n{LIME}\n{RED}\n{GRAY}\n{GREY}\n{LIGHTYELLOW}\n{YELLOW}\n{SILVER}\n{BLUEGREY}\n{LIGHTBLUE}\n{BLUE}\n{DARKBLUE}\n{PURPLE}\n{MAGENTA}\n{LIGHTRED}\n{GOLD}\n{ORANGE}\n{TEAMCOLOR}\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Player.SendMsg(MessageType msgType, string text)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "SendMsg"
    },
    "player.setchatcolor": {
        "page": "# SetChatColor\n\nSets the chat color of the player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param color string\n--- @return nil\n player:SetChatColor(color)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} color\n * @return void\n */\n player.SetChatColor(color)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Player.SetChatColor(string color)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "SetChatColor"
    },
    "player.setchattag": {
        "page": "# SetChatTag\n\nSets the chat tag of the player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param tag string\n--- @return nil\n player:SetChatTag(tag)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} tag\n * @return void\n */\n player.SetChatTag(tag)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Player.SetChatTag(string tag)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "SetChatTag"
    },
    "player.setchattagcolor": {
        "page": "# SetChatTagColor\n\nSets the chat tag color of the player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param color string\n--- @return nil\n player:SetChatTagColor(color)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} color\n * @return void\n */\n player.SetChatTagColor(color)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Player.SetChatTagColor(string color)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "SetChatTagColor"
    },
    "player.setconvar": {
        "page": "# SetConvar\n\nSets the convar value of the player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param convar string\n--- @param value string\n--- @return nil\n player:SetConvar(convar, value)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} convar\n * @param {string} value\n * @return void\n */\n player.SetConvar(convar, value)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Player.SetConvar(string convar, string value)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "SetConvar"
    },
    "player.setlistening": {
        "page": "# SetListening\n\nSets the listening override of a specific player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param id number\n--- @param override ListenOverride\n--- @return nil\n player:SetListening(id, override)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {number} id\n * @param {ListenOverride} override\n * @return void\n */\n player.SetListening(id, override)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Player.SetListening(int id, ListenOverride override)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "SetListening"
    },
    "player.setnamecolor": {
        "page": "# SetNameColor\n\nSets the name color of the player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param color string\n--- @return nil\n player:SetNameColor(color)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} color\n * @return void\n */\n player.SetNameColor(color)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Player.SetNameColor(string color)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "SetNameColor"
    },
    "player.setvar": {
        "page": "# SetVar\n\nSets the variable value of the player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param key string\n--- @param value any\n--- @return nil\n player:SetVar(key, value)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} key\n * @param {any} value\n * @return void\n */\n player.SetVar(key, value)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Player.SetVar(string key, object value)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "SetVar"
    },
    "player.setvoiceflags": {
        "page": "# SetVoiceFlags\n\nSets the voice flags of the player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param flags number\n--- @return nil\n player:SetVoiceFlags(flags)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {number} flags\n * @return void\n */\n player.SetVoiceFlags(flags)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Player.SetVoiceFlags(ulong flags)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "SetVoiceFlags"
    },
    "player.showmenu": {
        "page": "# ShowMenu\n\nShows the player a menu based of the provided id.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param menuid string\n--- @return nil\n player:ShowMenu(menuid)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} menuid\n * @return void\n */\n player.ShowMenu(menuid)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Player.ShowMenu(string menuid)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "ShowMenu"
    },
    "player.switchteam": {
        "page": "# SwitchTeam\n\nSwitches the player's team.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param team Team\n--- @return nil\n player:SwitchTeam(team)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {Team} team\n * @return void\n */\n player.SwitchTeam(team)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Player.SwitchTeam(Team team)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "SwitchTeam"
    },
    "pmanager": {
        "page": "# Player Manager\n\nThis is the list of items available for Player Manager API.\n\n## Functions\n\n<Catalog filter=\"pmanager.getplayercap,pmanager.getplayercount,pmanager.sendmsg\"></Catalog>",
        "title": "Player Manager",
        "icon": "users"
    },
    "pmanager.getplayercap": {
        "page": "# GetPlayerCap\n\nReturns the player maximum capacity for the server.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return number\n playermanager:GetPlayerCap()\n```\n\n### Example\n```lua\ncommands:Register(\"maxplayers\", function(playerid, args, argsCount, silent, prefix)\n    print(\"Maximum players: \" .. playermanager:GetPlayerCap())\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return number\n */\n playermanager.GetPlayerCap()\n```\n\n### Example\n```js\ncommands.Register(\"maxplayers\", (playerId, args, argc, silent, prefix) => {\n    console.log(`Maximum players: ${playermanager.GetPlayerCap()}`);\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nint PlayerManager.GetPlayerCap()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetPlayerCap"
    },
    "pmanager.getplayercount": {
        "page": "# GetPlayerCount\n\nReturns the number of players from the server.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return number\n playermanager:GetPlayerCount()\n```\n\n### Example\n```lua\ncommands:Register(\"players\", function(playerid, args, argsCount, silent, prefix)\n    print(\"There are: \" .. playermanager:GetPlayerCount() .. \" players online!\")\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return number\n */\n playermanager.GetPlayerCount()\n```\n\n### Example\n```js\ncommands.Register(\"players\", (playerId, args, argc, silent, prefix) => {\n    console.log(`There are: ${playermanager.GetPlayerCount()} online!`);\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nint PlayerManager.GetPlayerCount()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetPlayerCount"
    },
    "pmanager.sendmsg": {
        "page": "# SendMsg\n\nSends a message to all the online players.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param msgType MessageType\n--- @param text string\n--- @return nil\n playermanager:SendMsg(msgType, text)\n```\n\n\n## Colors\nBelow there are listed all the supported colors by Swiftly:\n```\n{DEFAULT}\n{WHITE}\n{DARKRED}\n{LIGHTPURPLE}\n{GREEN}\n{OLIVE}\n{LIME}\n{RED}\n{GRAY}\n{GREY}\n{LIGHTYELLOW}\n{YELLOW}\n{SILVER}\n{BLUEGREY}\n{LIGHTBLUE}\n{BLUE}\n{DARKBLUE}\n{PURPLE}\n{MAGENTA}\n{LIGHTRED}\n{GOLD}\n{ORANGE}\n{TEAMCOLOR}\n```\n\n### Example\n```lua\ncommands:Register(\"message\", function(playerid, args, argsCount, silent, prefix)\n    playermanager:SendMsg(MessageType.Chat, \"Hello there!\")\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {MessageType} msgType\n * @param {string} text\n * @return void\n */\n playermanager.SendMsg(msgType, text)\n```\n\n\n## Colors\nBelow there are listed all the supported colors by Swiftly:\n```\n{DEFAULT}\n{WHITE}\n{DARKRED}\n{LIGHTPURPLE}\n{GREEN}\n{OLIVE}\n{LIME}\n{RED}\n{GRAY}\n{GREY}\n{LIGHTYELLOW}\n{YELLOW}\n{SILVER}\n{BLUEGREY}\n{LIGHTBLUE}\n{BLUE}\n{DARKBLUE}\n{PURPLE}\n{MAGENTA}\n{LIGHTRED}\n{GOLD}\n{ORANGE}\n{TEAMCOLOR}\n```\n\n### Example\n```js\ncommands.Register(\"players\", (playerId, args, argc, silent, prefix) => {\n    playermanager.SendMsg(MessageType.Chat, \"Hello there!\")\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid PlayerManager.SendMsg(MessageType msgType, string text)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "SendMsg"
    },
    "precacher": {
        "page": "# Precacher\n\nThis is the list of items available for Precacher API.\n\n## Functions\n\n<Catalog filter=\"precacher.precacheitem,precacher.precachemodel,precacher.precachesound\"></Catalog>",
        "title": "Precacher",
        "icon": "hard-drive"
    },
    "precacher.precacheitem": {
        "page": "# PrecacheItem\n\nAdds any kind of item to the precacher (including sound and models).\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param path string\n--- @return nil\n precacher:PrecacheItem(path)\n```\n\n### Example\n```lua\nAddEventHandler(\"OnPluginStart\", function()\n    precacher:PrecacheItem(\"characters/models/ctm_fbi/ctm_fbi.vmdl\")\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} path\n * @return void\n */\n precacher.PrecacheItem(path)\n```\n\n### Example\n```js\nAddEventHandler(\"OnPluginStart\", (event) => {\n    precacher.PrecacheItem(\"characters/models/ctm_fbi/ctm_fbi.vmdl\")\n})\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Precacher.PrecacheItem(string path)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "PrecacheItem"
    },
    "precacher.precachemodel": {
        "page": "# PrecacheModel\n\nAdds a model to precache.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param path string\n--- @return nil\n precacher:PrecacheModel(path)\n```\n> [!warning]\n> This function is deprecated and replaced by PrecacheItem. It will be removed in v1.8.0.\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} path\n * @return void\n */\n precacher.PrecacheModel(path)\n```\n> [!warning]\n> This function is deprecated and replaced by PrecacheItem. It will be removed in v1.8.0.\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Precacher.PrecacheModel(string path)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "PrecacheModel"
    },
    "precacher.precachesound": {
        "page": "# PrecacheModel\n\nAdds a model to precache.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param path string\n--- @return nil\n precacher:PrecacheModel(path)\n```\n> [!warning]\n> This function is deprecated and replaced by PrecacheItem. It will be removed in v1.8.0.\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} path\n * @return void\n */\n precacher.PrecacheModel(path)\n```\n> [!warning]\n> This function is deprecated and replaced by PrecacheItem. It will be removed in v1.8.0.\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Precacher.PrecacheModel(string path)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "PrecacheModel"
    },
    "server": {
        "page": "# Server\n\nThis is the list of items available for Server API.\n\n## Functions\n\n<Catalog filter=\"server.changemap,server.execute,server.getcurrenttime,server.getip,server.getmap,server.getmaxplayers,server.gettickcount,server.ismapvalid,server.terminateround\"></Catalog>",
        "title": "Server",
        "icon": "server"
    },
    "server.changemap": {
        "page": "# ChangeMap\n\nChange the map in the specified one.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param map string\n--- @param workshop boolean\n--- @return nil\n server:ChangeMap(map, workshop)\n```\n\n### Example\n```lua\ncommands:Register(\"changemap\", function(playerid, args, argsCount, silent, prefix)\n    server:ChangeMap(\"de_dust2\", false)           -- Example for not-workshop map.\n    server:ChangeMap(\"random_workshop_map\", true) -- Example for workshop map\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} map\n * @param {bool} workshop\n * @return void\n */\n server.ChangeMap(map, workshop)\n```\n\n### Example\n```js\ncommands.Register(\"changemap\", (playerId, args, argc, silent, prefix) => {\n    server.ChangeMap(\"de_dust2\", false); // Example for not-workshop map.\n    server.ChangeMap(\"random_workshop_map\", true); // Example for workshop map\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Server.ChangeMap(string map, bool workshop)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "ChangeMap"
    },
    "server.execute": {
        "page": "# Execute\n\nExecutes a command in the server console.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param command string\n--- @return nil\n server:Execute(command)\n```\n\n### Example\n```lua\ncommands:Register(\"command\", function(playerid, args, argsCount, silent, prefix)\n    server:Execute(\"sv_cheats 1\")\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} command\n * @return void\n */\n server.Execute(command)\n```\n\n### Example\n```js\ncommands.Register(\"command\", (playerId, args, argc, silent, prefix) => {\n    server.Execute(\"sv_cheats 1\");\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Server.Execute(string command)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Execute"
    },
    "server.getcurrenttime": {
        "page": "# GetCurrentTime\n\nReturns the current time on the server.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return number\n server:GetCurrentTime()\n```\n\n### Example\n```lua\ncommands:Register(\"time\", function(playerid, args, argsCount, silent, prefix)\n    print(\"Current time: \" .. server:GetCurrentTime())\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return number\n */\n server.GetCurrentTime()\n```\n\n### Example\n```js\ncommands.Register(\"time\", (playerId, args, argc, silent, prefix) => {\n    console.log(`Current time: ${server.GetCurrentTime()}`);\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nfloat Server.GetCurrentTime()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetCurrentTime"
    },
    "server.getip": {
        "page": "# GetIP\n\nReturns the server's IP Address.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return string\n server:GetIP()\n```\n\n### Example\n```lua\ncommands:Register(\"ip\", function(playerid, args, argsCount, silent, prefix)\n    print(\"Server IP: \" .. server:GetIP())\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return string\n */\n server.GetIP()\n```\n\n### Example\n```js\ncommands.Register(\"ip\", (playerId, args, argc, silent, prefix) => {\n    console.log(`Server IP: ${server.GetIP()}`);\n});\n\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nstring Server.GetIP()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetIP"
    },
    "server.getmap": {
        "page": "# GetMap\n\nReturns the current map name.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return string\n server:GetMap()\n```\n\n### Example\n```lua\ncommands:Register(\"currentmap\", function(playerid, args, argsCount, silent, prefix)\n    print(\"Current map is: \" .. server:GetMap())\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return string\n */\n server.GetMap()\n```\n\n### Example\n```js\ncommands.Register(\"currentmap\", (playerId, args, argc, silent, prefix) => {\n    console.log(`Current map is: ${server.GetMap()}`);\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nstring Server.GetMap()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetMap"
    },
    "server.getmaxplayers": {
        "page": "# GetMaxPlayers\n\nReturns the maximum capacity of players on the server.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return number\n server:GetMaxPlayers()\n```\n\n### Example\n```lua\ncommands:Register(\"maxplayers\", function(playerid, args, argsCount, silent, prefix)\n    print(\"Max players: \" .. server:GetMaxPlayers())\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return number\n */\n server.GetMaxPlayers()\n```\n\n### Example\n```js\ncommands.Register(\"maxplayers\", (playerId, args, argc, silent, prefix) => {\n    console.log(`Max players: ${server.GetMaxPlayers()}`);\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nint Server.GetMaxPlayers()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetMaxPlayers"
    },
    "server.gettickcount": {
        "page": "# GetTickCount\n\nReturns the tick count on the server.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return number\n server:GetTickCount()\n```\n\n### Example\n```lua\ncommands:Register(\"tickcount\", function(playerid, args, argsCount, silent, prefix)\n    print(\"Tick count: \" .. server:GetTickCount())\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return number\n */\n server.GetTickCount()\n```\n\n### Example\n```js\ncommands.Register(\"tickcount\", (playerId, args, argc, silent, prefix) => {\n    console.log(`Tick count: ${server.GetTickCount()}`);\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nint Server.GetTickCount()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetTickCount"
    },
    "server.ismapvalid": {
        "page": "# IsMapValid\n\nReturns the current map name.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param map string\n--- @return boolean\n server:IsMapValid(map)\n```\n\n### Example\n```lua\ncommands:Register(\"isvalid\", function(playerid, args, argsCount, silent, prefix)\n    if server:IsMapValid(\"de_nuke\") then\n        print(\"The map de_nuke is valid!\")\n    else\n        print(\"The map de_nuke is not valid!\")\n    end\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} map\n * @return bool\n */\n server.IsMapValid(map)\n```\n\n### Example\n```js\ncommands.Register(\"isvalid\", (playerId, args, argc, silent, prefix) => {\n    if (server.IsMapValid(\"de_nuke\")) {\n        console.log(\"The map: de_nuke is valid\");\n    } else {\n        console.log(\"The map: de_nuke is not valid. \");\n    }\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nbool Server.IsMapValid(string map)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "IsMapValid"
    },
    "server.terminateround": {
        "page": "# TerminateRound\n\nEnds a round with a delay and with a reason.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param delay number\n--- @param reason RoundEndReason_t\n--- @return nil\n server:TerminateRound(delay, reason)\n```\n\n### Example\n```lua\ncommands:Register(\"endround\", function(playerid, args, argsCount, silent, prefix)\n    server:TerminateRound(0.5, RoundEndReason_t.TerroristsPlanted)\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {number} delay\n * @param {RoundEndReason_t} reason\n * @return void\n */\n server.TerminateRound(delay, reason)\n```\n\n### Example\n```js\ncommands.Register(\"endround\", (playerId, args, argc, silent, prefix) => {\n    server.TerminateRound(0.5, RoundEndReason_t.TerroristsPlanted);\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Server.TerminateRound(float delay, RoundEndReason_t reason)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "TerminateRound"
    },
    "timers": {
        "page": "# Timers\n\nThis is the list of items available for Timers API.\n\n## Functions\n\n<Catalog filter=\"timers.nexttick,timers.settimeout,timers.settimer,timers.stoptimer\"></Catalog>",
        "title": "Timers",
        "icon": "clock"
    },
    "timers.nexttick": {
        "page": "# NextTick\n\nExecutes the callback the next tick.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param callback fun()\n--- @return nil\n NextTick(callback)\n```\n\n### Example\n```lua\ncommands:Register(\"nexttick\", function(playerid, args, argsCount, silent, prefix)\n    NextTick(function()\n        print(\"This runs at next server tick!\")\n    end)\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {() => void} callback\n * @return void\n */\n NextTick(callback)\n```\n\n### Example\n```js\ncommands.Register(\"nexttick\", (playerid, args, argc, silent, prefix) => {\n    NextTick(() => {\n        console.log(\"This runs at next server tick!\")\n    })\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Generic.NextTick(Func<void> callback)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "NextTick"
    },
    "timers.settimeout": {
        "page": "# SetTimeout\n\nExecutes a callback after the specified delay.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param delay number\n--- @param callback fun()\n--- @return nil\n SetTimeout(delay, callback)\n```\n\n### Example\n```lua\ncommands:Register(\"settimeout\", function(playerid, args, argsCount, silent, prefix)\n    SetTimeout(3000, function()\n        print(\"3 seconds elapsed!\")\n    end)\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {number} delay\n * @param {() => void} callback\n * @return void\n */\n SetTimeout(delay, callback)\n```\n\n### Example\n```js\ncommands.Register(\"settimeout\", (playerid, args, argc, silent, prefix) => {\n    SetTimeout(3000, function () {\n        console.log(\"3 seconds elapsed!\")\n    });\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Generic.SetTimeout(long delay, Func<void> callback)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "SetTimeout"
    },
    "timers.settimer": {
        "page": "# SetTimer\n\nExecutes a callback at the specified interval.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param delay number\n--- @param callback fun()\n--- @return TimerHandle\n SetTimer(delay, callback)\n```\n\n### Example\n```lua\ncommands:Register(\"settimer\", function(playerid, args, argsCount, silent, prefix)\n    SetTimer(1000, function()\n        print(\"This runs every second!\")\n    end)\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {number} delay\n * @param {() => void} callback\n * @return TimerHandle\n */\n SetTimer(delay, callback)\n```\n\n### Example\n```js\ncommands.Register(\"settimer\", (playerid, args, argc, silent, prefix) => {\n    SetTimer(1000, function () {\n        console.log(\"This runs every second!\")\n    });\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nTimerHandle Generic.SetTimer(long delay, Func<void> callback)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "SetTimer"
    },
    "timers.stoptimer": {
        "page": "# StopTimer\n\nStops the timer.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param timerid TimerHandle\n--- @return nil\n StopTimer(timerid)\n```\n\n### Example\n```lua\ncommands:Register(\"startstop\", function(playerid, args, argsCount, silent, prefix)\n    local timer = SetTimer(1000, function() end)\n    SetTimeout(5000, function()\n        StopTimer(timer)\n    end)\n    -- Start and stop timer after 5 seconds.\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {TimerHandle} timerid\n * @return void\n */\n StopTimer(timerid)\n```\n\n### Example\n```js\ncommands.Register(\"startstop\", (playerid, args, argc, silent, prefix) => {\n    let timer = SetTimer(1000, function () { })\n    SetTimeout(5000, function () {\n        StopTimer(timer)\n    })\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Generic.StopTimer(TimerHandle timerid)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "StopTimer"
    },
    "translation": {
        "page": "# Translation\n\nThis is the list of items available for Translation API.\n\n## Functions\n\n<Catalog filter=\"translation.fetchtranslation\"></Catalog>",
        "title": "Translation",
        "icon": "globe"
    },
    "translation.fetchtranslation": {
        "page": "# FetchTranslation\n\nReturns the translation for the specified key.\n> [!warning]\n> the translation key is non-existent for the specified language in core.json, it returns the the translation key.\n\n> [!note]\n> Key Format: MAIN_TRANSLATION_KEY.TRANSLATION_KEY\n\n> Example: test_plugin.core.started\n\n\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param key string\n--- @param playerid number|nil\n--- @return string\n FetchTranslation(key, playerid)\n```\n\n### Example\n```lua\ncommands:Register(\"credits\", function(playerid, args, argsCount, silent, prefix)\n    local player = GetPlayer(playerid)\n    if not player or not player:IsValid() then return end\n    local credits = 50\n    player:SendMsg(MessageType.Chat, FetchTranslation(\"first_plugin.credits\", playerid):gsub(\"{credits}\", credits))\nend)\n\n--[[\nTranslation File: addons/swiftly/translations/translation.first_plugin.json\n\n{\n    \"credits\": {\n        \"en\": \"Your current credits are {credits}!\",\n        \"ro\": \"In momentul asta ai {credits} credite!\"\n    }\n}\n]]\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} key\n * @param {number?} playerid\n * @return string\n */\n FetchTranslation(key, playerid)\n```\n\n### Example\n```js\ncommands.Register(\"credits\", (playerid, args, argc, silent, prefix) => {\n    let player = GetPlayer(playerid)\n    if (!player || !player.IsValid()) return;\n    let credits = 50\n    player.SendMsg(MessageType.Chat, FetchTranslation(\"first_plugin.credits\", playerid).replace(\"{credits}\", String(credits)))\n});\n\n/*\nTranslation File: addons/swiftly/translations/translation.first_plugin.json\n\n{\n    \"credits\": {\n        \"en\": \"Your current credits are {credits}!\",\n        \"ro\": \"In momentul asta ai {credits} credite!\"\n    }\n}\n*/\n\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nstring Generic.FetchTranslation(string key, int32? playerid)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "FetchTranslation"
    },
    "types": {
        "page": "# Types\n\nThis is the list of items available for Types API.\n\n## Types\n\n<Catalog filter=\"types.collisiongroup,types.convarflags,types.disconnectreason,types.econvartype,types.eventresult,types.gamephase,types.listenoverride,types.logtype_t,types.messagetype,types.pluginstate_t,types.roundendreason_t,types.team,types.voiceflagvalue\"></Catalog>## Classes\n\n<Catalog filter=\"types.eventhandler,types.hookhandle,types.timerhandle\"></Catalog>",
        "title": "Types",
        "icon": "list"
    },
    "types.collisiongroup": {
        "page": "# CollisionGroup\n\nThese are the collision groups available.\n\n<Tabs defaultValue=\"lua\">\n      <TabsList class=\"grid w-full grid-cols-3 flex\">\n        <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n      </TabsList>\n    <TabsContent value=\"lua\">\n```lua\nCollisionGroup = {\n        COLLISION_GROUP_ALWAYS = 0,\n        COLLISION_GROUP_NONPHYSICAL = 1,\n        COLLISION_GROUP_TRIGGER = 2,\n        COLLISION_GROUP_CONDITIONALLY_SOLID = 3,\n        COLLISION_GROUP_FIRST_USER = 4,\n        COLLISION_GROUPS_MAX_ALLOWED = 64,\n        COLLISION_GROUP_DEFAULT = 4,\n        COLLISION_GROUP_DEBRIS = 5,\n        COLLISION_GROUP_INTERACTIVE_DEBRIS = 6,\n        COLLISION_GROUP_INTERACTIVE = 7,\n        COLLISION_GROUP_PLAYER = 8,\n        COLLISION_GROUP_BREAKABLE_GLASS = 9,\n        COLLISION_GROUP_VEHICLE = 10,\n        COLLISION_GROUP_PLAYER_MOVEMENT = 11,\n        COLLISION_GROUP_NPC = 12,\n        COLLISION_GROUP_IN_VEHICLE = 13,\n        COLLISION_GROUP_WEAPON = 14,\n        COLLISION_GROUP_VEHICLE_CLIP = 15,\n        COLLISION_GROUP_PROJECTILE = 16,\n        COLLISION_GROUP_DOOR_BLOCKER = 17,\n        COLLISION_GROUP_PASSABLE_DOOR = 18,\n        COLLISION_GROUP_DISSOLVING = 19,\n        COLLISION_GROUP_PUSHAWAY = 20,\n        COLLISION_GROUP_NPC_ACTOR = 21,\n        COLLISION_GROUP_NPC_SCRIPTED = 22,\n        COLLISION_GROUP_PZ_CLIP = 23,\n        COLLISION_GROUP_PROPS = 24,\n        LAST_SHARED_COLLISION_GROUP = 25\n}\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\nCollisionGroup = {\n        \"COLLISION_GROUP_ALWAYS\": 0,\n        \"COLLISION_GROUP_NONPHYSICAL\": 1,\n        \"COLLISION_GROUP_TRIGGER\": 2,\n        \"COLLISION_GROUP_CONDITIONALLY_SOLID\": 3,\n        \"COLLISION_GROUP_FIRST_USER\": 4,\n        \"COLLISION_GROUPS_MAX_ALLOWED\": 64,\n        \"COLLISION_GROUP_DEFAULT\": 4,\n        \"COLLISION_GROUP_DEBRIS\": 5,\n        \"COLLISION_GROUP_INTERACTIVE_DEBRIS\": 6,\n        \"COLLISION_GROUP_INTERACTIVE\": 7,\n        \"COLLISION_GROUP_PLAYER\": 8,\n        \"COLLISION_GROUP_BREAKABLE_GLASS\": 9,\n        \"COLLISION_GROUP_VEHICLE\": 10,\n        \"COLLISION_GROUP_PLAYER_MOVEMENT\": 11,\n        \"COLLISION_GROUP_NPC\": 12,\n        \"COLLISION_GROUP_IN_VEHICLE\": 13,\n        \"COLLISION_GROUP_WEAPON\": 14,\n        \"COLLISION_GROUP_VEHICLE_CLIP\": 15,\n        \"COLLISION_GROUP_PROJECTILE\": 16,\n        \"COLLISION_GROUP_DOOR_BLOCKER\": 17,\n        \"COLLISION_GROUP_PASSABLE_DOOR\": 18,\n        \"COLLISION_GROUP_DISSOLVING\": 19,\n        \"COLLISION_GROUP_PUSHAWAY\": 20,\n        \"COLLISION_GROUP_NPC_ACTOR\": 21,\n        \"COLLISION_GROUP_NPC_SCRIPTED\": 22,\n        \"COLLISION_GROUP_PZ_CLIP\": 23,\n        \"COLLISION_GROUP_PROPS\": 24,\n        \"LAST_SHARED_COLLISION_GROUP\": 25\n}\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nusing SwiftlyS2.API.Scripting.Generic;\nenum CollisionGroup\n{\n        COLLISION_GROUP_ALWAYS = 0,\n        COLLISION_GROUP_NONPHYSICAL = 1,\n        COLLISION_GROUP_TRIGGER = 2,\n        COLLISION_GROUP_CONDITIONALLY_SOLID = 3,\n        COLLISION_GROUP_FIRST_USER = 4,\n        COLLISION_GROUPS_MAX_ALLOWED = 64,\n        COLLISION_GROUP_DEFAULT = 4,\n        COLLISION_GROUP_DEBRIS = 5,\n        COLLISION_GROUP_INTERACTIVE_DEBRIS = 6,\n        COLLISION_GROUP_INTERACTIVE = 7,\n        COLLISION_GROUP_PLAYER = 8,\n        COLLISION_GROUP_BREAKABLE_GLASS = 9,\n        COLLISION_GROUP_VEHICLE = 10,\n        COLLISION_GROUP_PLAYER_MOVEMENT = 11,\n        COLLISION_GROUP_NPC = 12,\n        COLLISION_GROUP_IN_VEHICLE = 13,\n        COLLISION_GROUP_WEAPON = 14,\n        COLLISION_GROUP_VEHICLE_CLIP = 15,\n        COLLISION_GROUP_PROJECTILE = 16,\n        COLLISION_GROUP_DOOR_BLOCKER = 17,\n        COLLISION_GROUP_PASSABLE_DOOR = 18,\n        COLLISION_GROUP_DISSOLVING = 19,\n        COLLISION_GROUP_PUSHAWAY = 20,\n        COLLISION_GROUP_NPC_ACTOR = 21,\n        COLLISION_GROUP_NPC_SCRIPTED = 22,\n        COLLISION_GROUP_PZ_CLIP = 23,\n        COLLISION_GROUP_PROPS = 24,\n        LAST_SHARED_COLLISION_GROUP = 25\n}\n```\n</TabsContent>\n    </Tabs>",
        "title": "CollisionGroup"
    },
    "types.convarflags": {
        "page": "# ConvarFlags\n\nThese are the convar & command flags available.\n\n<Tabs defaultValue=\"lua\">\n      <TabsList class=\"grid w-full grid-cols-3 flex\">\n        <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n      </TabsList>\n    <TabsContent value=\"lua\">\n```lua\nConvarFlags = {\n        FCVAR_NONE = 0,\n        FCVAR_LINKED_CONCOMMAND = 1<<0,\n        FCVAR_DEVELOPMENTONLY = 1<<1,\n        FCVAR_GAMEDLL = 1<<2,\n        FCVAR_CLIENTDLL = 1<<3,\n        FCVAR_HIDDEN = 1<<4,\n        FCVAR_PROTECTED = 1<<5,\n        FCVAR_SPONLY = 1<<6,\n        FCVAR_ARCHIVE = 1<<7,\n        FCVAR_NOTIFY = 1<<8,\n        FCVAR_USERINFO = 1<<9,\n        FCVAR_REFERENCE = 1<<10,\n        FCVAR_UNLOGGED = 1<<11,\n        FCVAR_INITIAL_SETVALUE = 1<<12,\n        FCVAR_REPLICATED = 1<<13,\n        FCVAR_CHEAT = 1<<14,\n        FCVAR_PER_USER = 1<<15,\n        FCVAR_DEMO = 1<<16,\n        FCVAR_DONTRECORD = 1<<17,\n        FCVAR_PERFORMING_CALLBACKS = 1<<18,\n        FCVAR_RELEASE = 1<<19,\n        FCVAR_MENUBAR_ITEM = 1<<20,\n        FCVAR_COMMANDLINE_ENFORCED = 1<<21,\n        FCVAR_NOT_CONNECTED = 1<<22,\n        FCVAR_VCONSOLE_FUZZY_MATCHING = 1<<23,\n        FCVAR_SERVER_CAN_EXECUTE = 1<<24,\n        FCVAR_CLIENT_CAN_EXECUTE = 1<<25,\n        FCVAR_SERVER_CANNOT_QUERY = 1<<26,\n        FCVAR_VCONSOLE_SET_FOCUS = 1<<27,\n        FCVAR_CLIENTCMD_CAN_EXECUTE = 1<<28,\n        FCVAR_EXECUTE_PER_TICK = 1<<29,\n        FCVAR_DEFENSIVE = 1<<32\n}\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\nConvarFlags = {\n        \"FCVAR_NONE\": 0,\n        \"FCVAR_LINKED_CONCOMMAND\": 1<<0,\n        \"FCVAR_DEVELOPMENTONLY\": 1<<1,\n        \"FCVAR_GAMEDLL\": 1<<2,\n        \"FCVAR_CLIENTDLL\": 1<<3,\n        \"FCVAR_HIDDEN\": 1<<4,\n        \"FCVAR_PROTECTED\": 1<<5,\n        \"FCVAR_SPONLY\": 1<<6,\n        \"FCVAR_ARCHIVE\": 1<<7,\n        \"FCVAR_NOTIFY\": 1<<8,\n        \"FCVAR_USERINFO\": 1<<9,\n        \"FCVAR_REFERENCE\": 1<<10,\n        \"FCVAR_UNLOGGED\": 1<<11,\n        \"FCVAR_INITIAL_SETVALUE\": 1<<12,\n        \"FCVAR_REPLICATED\": 1<<13,\n        \"FCVAR_CHEAT\": 1<<14,\n        \"FCVAR_PER_USER\": 1<<15,\n        \"FCVAR_DEMO\": 1<<16,\n        \"FCVAR_DONTRECORD\": 1<<17,\n        \"FCVAR_PERFORMING_CALLBACKS\": 1<<18,\n        \"FCVAR_RELEASE\": 1<<19,\n        \"FCVAR_MENUBAR_ITEM\": 1<<20,\n        \"FCVAR_COMMANDLINE_ENFORCED\": 1<<21,\n        \"FCVAR_NOT_CONNECTED\": 1<<22,\n        \"FCVAR_VCONSOLE_FUZZY_MATCHING\": 1<<23,\n        \"FCVAR_SERVER_CAN_EXECUTE\": 1<<24,\n        \"FCVAR_CLIENT_CAN_EXECUTE\": 1<<25,\n        \"FCVAR_SERVER_CANNOT_QUERY\": 1<<26,\n        \"FCVAR_VCONSOLE_SET_FOCUS\": 1<<27,\n        \"FCVAR_CLIENTCMD_CAN_EXECUTE\": 1<<28,\n        \"FCVAR_EXECUTE_PER_TICK\": 1<<29,\n        \"FCVAR_DEFENSIVE\": 1<<32\n}\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nusing SwiftlyS2.API.Scripting.Generic;\nenum ConvarFlags\n{\n        FCVAR_NONE = 0,\n        FCVAR_LINKED_CONCOMMAND = 1<<0,\n        FCVAR_DEVELOPMENTONLY = 1<<1,\n        FCVAR_GAMEDLL = 1<<2,\n        FCVAR_CLIENTDLL = 1<<3,\n        FCVAR_HIDDEN = 1<<4,\n        FCVAR_PROTECTED = 1<<5,\n        FCVAR_SPONLY = 1<<6,\n        FCVAR_ARCHIVE = 1<<7,\n        FCVAR_NOTIFY = 1<<8,\n        FCVAR_USERINFO = 1<<9,\n        FCVAR_REFERENCE = 1<<10,\n        FCVAR_UNLOGGED = 1<<11,\n        FCVAR_INITIAL_SETVALUE = 1<<12,\n        FCVAR_REPLICATED = 1<<13,\n        FCVAR_CHEAT = 1<<14,\n        FCVAR_PER_USER = 1<<15,\n        FCVAR_DEMO = 1<<16,\n        FCVAR_DONTRECORD = 1<<17,\n        FCVAR_PERFORMING_CALLBACKS = 1<<18,\n        FCVAR_RELEASE = 1<<19,\n        FCVAR_MENUBAR_ITEM = 1<<20,\n        FCVAR_COMMANDLINE_ENFORCED = 1<<21,\n        FCVAR_NOT_CONNECTED = 1<<22,\n        FCVAR_VCONSOLE_FUZZY_MATCHING = 1<<23,\n        FCVAR_SERVER_CAN_EXECUTE = 1<<24,\n        FCVAR_CLIENT_CAN_EXECUTE = 1<<25,\n        FCVAR_SERVER_CANNOT_QUERY = 1<<26,\n        FCVAR_VCONSOLE_SET_FOCUS = 1<<27,\n        FCVAR_CLIENTCMD_CAN_EXECUTE = 1<<28,\n        FCVAR_EXECUTE_PER_TICK = 1<<29,\n        FCVAR_DEFENSIVE = 1<<32\n}\n```\n</TabsContent>\n    </Tabs>",
        "title": "ConvarFlags"
    },
    "types.disconnectreason": {
        "page": "# DisconnectReason\n\nThese are the disconnect reasons available.\n\n<Tabs defaultValue=\"lua\">\n      <TabsList class=\"grid w-full grid-cols-3 flex\">\n        <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n      </TabsList>\n    <TabsContent value=\"lua\">\n```lua\nDisconnectReason = {\n        Invalid = 0,\n        Shutdown = 1,\n        DisconnectByUser = 2,\n        DisconnectByServer = 3,\n        Lost = 4,\n        Overflow = 5,\n        SteamBanned = 6,\n        SteamInUse = 7,\n        SteamTicket = 8,\n        SteamLogon = 9,\n        SteamAuthCancelled = 10,\n        SteamAuthAlreadyUsed = 11,\n        SteamAuthInvalid = 12,\n        SteamVacBanned = 13,\n        SteamLoggedInElsewhere = 14,\n        SteamVacCheckTimedout = 15,\n        SteamDropped = 16,\n        SteamOwnership = 17,\n        ServerInfoOverflow = 18,\n        TickMsgOverflow = 19,\n        StringTableMsgOverflow = 20,\n        DeltaentMsgOverflow = 21,\n        TempentMsgOverflow = 22,\n        SoundsMsgOverflow = 23,\n        SnapshotOverflow = 24,\n        SnapshotError = 25,\n        ReliableOverflow = 26,\n        BadDeltaTick = 27,\n        NoMoreSplits = 28,\n        Timedout = 29,\n        Disconnected = 30,\n        LeavingSplit = 31,\n        DifferentClassTables = 32,\n        BadRelayPassword = 33,\n        BadSpectatorPassword = 34,\n        HLTVRestricted = 35,\n        NoSpectators = 36,\n        HLTVUnavailable = 37,\n        HLTVStop = 38,\n        Kicked = 39,\n        BanAdded = 40,\n        KickBanAdded = 41,\n        HLTVDirect = 42,\n        PureServerClientExtra = 43,\n        PureServerMismatch = 44,\n        UserCmd = 45,\n        RejectedByGame = 46,\n        MessageParseError = 47,\n        InvalidMessageError = 48,\n        BadServerPassword = 49,\n        DirectConnectReservation = 50,\n        ConnectionFailure = 51,\n        NoPeerGroupHandlers = 52,\n        Reconnection = 53,\n        LoopShutdown = 54,\n        LoopDeactivate = 55,\n        HostEndGame = 56,\n        LoopLevelLoadActivate = 57,\n        CreateServerFailed = 58,\n        Exiting = 59,\n        RequestHostStateIdle = 60,\n        RequestHostStateHLTVRelay = 61,\n        ClientConsistencyFail = 62,\n        UnableToCRCMap = 63,\n        ClientNoMap = 64,\n        ClientDifferentMap = 65,\n        ServerRequiresSteam = 66,\n        SteamDenyMisc = 67,\n        SteamDenyBadAnticheat = 68,\n        ServerShutdown = 69,\n        ReplayIncompatible = 71,\n        ConnectRequestTimedOut = 72,\n        ServerIncompatible = 73,\n        LocalProblemManyRelays = 74,\n        LocalProblemHostedServerPrimaryRelay = 75,\n        LocalProblemNetworkConfig = 76,\n        LocalProblemOther = 77,\n        RemoteTimeout = 79,\n        RemoteTimeoutConnecting = 80,\n        RemoteOther = 81,\n        RemoteBadCrypt = 82,\n        RemoteCertNotTrusted = 83,\n        Unusual = 84,\n        InternalError = 85,\n        RejectBadChallenge = 128,\n        RejectNoLobby = 129,\n        RejectBackgroundMap = 130,\n        RejectSinglePlayer = 131,\n        RejectHiddenGame = 132,\n        RejectLanRestrict = 133,\n        RejectBadPassword = 134,\n        RejectServerFull = 135,\n        RejectInvalidReservation = 136,\n        RejectFailedChannel = 137,\n        RejectConnectFromLobby = 138,\n        RejectReservedForLobby = 139,\n        RejectInvalidKeyLength = 140,\n        RejectOldProtocol = 141,\n        RejectNewProtocol = 142,\n        RejectInvalidConnection = 143,\n        RejectInvalidCertLen = 144,\n        RejectInvalidSteamCertLen = 145,\n        RejectSteam = 146,\n        RejectServerAuthDisabled = 147,\n        RejectServerCDKeyAuthInvalid = 148,\n        RejectBanned = 149,\n        KickedTeamKilling = 150,\n        KickedTKStart = 151,\n        KickedUntrustedAccount = 152,\n        KickedConvictedAccount = 153,\n        KickedCompetitiveCooldown = 154,\n        KickedTeamHurting = 155,\n        KickedHostageKilling = 156,\n        KickedVotedOff = 157,\n        KickedIdle = 158,\n        KickedSuicide = 159,\n        KickedNoSteamLogin = 160,\n        KickedNoSteamTicket = 161,\n        KickedInputAutomation = 162,\n        KickedVACNetAbnormalBehavior = 163\n}\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\nDisconnectReason = {\n        \"Invalid\": 0,\n        \"Shutdown\": 1,\n        \"DisconnectByUser\": 2,\n        \"DisconnectByServer\": 3,\n        \"Lost\": 4,\n        \"Overflow\": 5,\n        \"SteamBanned\": 6,\n        \"SteamInUse\": 7,\n        \"SteamTicket\": 8,\n        \"SteamLogon\": 9,\n        \"SteamAuthCancelled\": 10,\n        \"SteamAuthAlreadyUsed\": 11,\n        \"SteamAuthInvalid\": 12,\n        \"SteamVacBanned\": 13,\n        \"SteamLoggedInElsewhere\": 14,\n        \"SteamVacCheckTimedout\": 15,\n        \"SteamDropped\": 16,\n        \"SteamOwnership\": 17,\n        \"ServerInfoOverflow\": 18,\n        \"TickMsgOverflow\": 19,\n        \"StringTableMsgOverflow\": 20,\n        \"DeltaentMsgOverflow\": 21,\n        \"TempentMsgOverflow\": 22,\n        \"SoundsMsgOverflow\": 23,\n        \"SnapshotOverflow\": 24,\n        \"SnapshotError\": 25,\n        \"ReliableOverflow\": 26,\n        \"BadDeltaTick\": 27,\n        \"NoMoreSplits\": 28,\n        \"Timedout\": 29,\n        \"Disconnected\": 30,\n        \"LeavingSplit\": 31,\n        \"DifferentClassTables\": 32,\n        \"BadRelayPassword\": 33,\n        \"BadSpectatorPassword\": 34,\n        \"HLTVRestricted\": 35,\n        \"NoSpectators\": 36,\n        \"HLTVUnavailable\": 37,\n        \"HLTVStop\": 38,\n        \"Kicked\": 39,\n        \"BanAdded\": 40,\n        \"KickBanAdded\": 41,\n        \"HLTVDirect\": 42,\n        \"PureServerClientExtra\": 43,\n        \"PureServerMismatch\": 44,\n        \"UserCmd\": 45,\n        \"RejectedByGame\": 46,\n        \"MessageParseError\": 47,\n        \"InvalidMessageError\": 48,\n        \"BadServerPassword\": 49,\n        \"DirectConnectReservation\": 50,\n        \"ConnectionFailure\": 51,\n        \"NoPeerGroupHandlers\": 52,\n        \"Reconnection\": 53,\n        \"LoopShutdown\": 54,\n        \"LoopDeactivate\": 55,\n        \"HostEndGame\": 56,\n        \"LoopLevelLoadActivate\": 57,\n        \"CreateServerFailed\": 58,\n        \"Exiting\": 59,\n        \"RequestHostStateIdle\": 60,\n        \"RequestHostStateHLTVRelay\": 61,\n        \"ClientConsistencyFail\": 62,\n        \"UnableToCRCMap\": 63,\n        \"ClientNoMap\": 64,\n        \"ClientDifferentMap\": 65,\n        \"ServerRequiresSteam\": 66,\n        \"SteamDenyMisc\": 67,\n        \"SteamDenyBadAnticheat\": 68,\n        \"ServerShutdown\": 69,\n        \"ReplayIncompatible\": 71,\n        \"ConnectRequestTimedOut\": 72,\n        \"ServerIncompatible\": 73,\n        \"LocalProblemManyRelays\": 74,\n        \"LocalProblemHostedServerPrimaryRelay\": 75,\n        \"LocalProblemNetworkConfig\": 76,\n        \"LocalProblemOther\": 77,\n        \"RemoteTimeout\": 79,\n        \"RemoteTimeoutConnecting\": 80,\n        \"RemoteOther\": 81,\n        \"RemoteBadCrypt\": 82,\n        \"RemoteCertNotTrusted\": 83,\n        \"Unusual\": 84,\n        \"InternalError\": 85,\n        \"RejectBadChallenge\": 128,\n        \"RejectNoLobby\": 129,\n        \"RejectBackgroundMap\": 130,\n        \"RejectSinglePlayer\": 131,\n        \"RejectHiddenGame\": 132,\n        \"RejectLanRestrict\": 133,\n        \"RejectBadPassword\": 134,\n        \"RejectServerFull\": 135,\n        \"RejectInvalidReservation\": 136,\n        \"RejectFailedChannel\": 137,\n        \"RejectConnectFromLobby\": 138,\n        \"RejectReservedForLobby\": 139,\n        \"RejectInvalidKeyLength\": 140,\n        \"RejectOldProtocol\": 141,\n        \"RejectNewProtocol\": 142,\n        \"RejectInvalidConnection\": 143,\n        \"RejectInvalidCertLen\": 144,\n        \"RejectInvalidSteamCertLen\": 145,\n        \"RejectSteam\": 146,\n        \"RejectServerAuthDisabled\": 147,\n        \"RejectServerCDKeyAuthInvalid\": 148,\n        \"RejectBanned\": 149,\n        \"KickedTeamKilling\": 150,\n        \"KickedTKStart\": 151,\n        \"KickedUntrustedAccount\": 152,\n        \"KickedConvictedAccount\": 153,\n        \"KickedCompetitiveCooldown\": 154,\n        \"KickedTeamHurting\": 155,\n        \"KickedHostageKilling\": 156,\n        \"KickedVotedOff\": 157,\n        \"KickedIdle\": 158,\n        \"KickedSuicide\": 159,\n        \"KickedNoSteamLogin\": 160,\n        \"KickedNoSteamTicket\": 161,\n        \"KickedInputAutomation\": 162,\n        \"KickedVACNetAbnormalBehavior\": 163\n}\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nusing SwiftlyS2.API.Scripting.Generic;\nenum DisconnectReason\n{\n        Invalid = 0,\n        Shutdown = 1,\n        DisconnectByUser = 2,\n        DisconnectByServer = 3,\n        Lost = 4,\n        Overflow = 5,\n        SteamBanned = 6,\n        SteamInUse = 7,\n        SteamTicket = 8,\n        SteamLogon = 9,\n        SteamAuthCancelled = 10,\n        SteamAuthAlreadyUsed = 11,\n        SteamAuthInvalid = 12,\n        SteamVacBanned = 13,\n        SteamLoggedInElsewhere = 14,\n        SteamVacCheckTimedout = 15,\n        SteamDropped = 16,\n        SteamOwnership = 17,\n        ServerInfoOverflow = 18,\n        TickMsgOverflow = 19,\n        StringTableMsgOverflow = 20,\n        DeltaentMsgOverflow = 21,\n        TempentMsgOverflow = 22,\n        SoundsMsgOverflow = 23,\n        SnapshotOverflow = 24,\n        SnapshotError = 25,\n        ReliableOverflow = 26,\n        BadDeltaTick = 27,\n        NoMoreSplits = 28,\n        Timedout = 29,\n        Disconnected = 30,\n        LeavingSplit = 31,\n        DifferentClassTables = 32,\n        BadRelayPassword = 33,\n        BadSpectatorPassword = 34,\n        HLTVRestricted = 35,\n        NoSpectators = 36,\n        HLTVUnavailable = 37,\n        HLTVStop = 38,\n        Kicked = 39,\n        BanAdded = 40,\n        KickBanAdded = 41,\n        HLTVDirect = 42,\n        PureServerClientExtra = 43,\n        PureServerMismatch = 44,\n        UserCmd = 45,\n        RejectedByGame = 46,\n        MessageParseError = 47,\n        InvalidMessageError = 48,\n        BadServerPassword = 49,\n        DirectConnectReservation = 50,\n        ConnectionFailure = 51,\n        NoPeerGroupHandlers = 52,\n        Reconnection = 53,\n        LoopShutdown = 54,\n        LoopDeactivate = 55,\n        HostEndGame = 56,\n        LoopLevelLoadActivate = 57,\n        CreateServerFailed = 58,\n        Exiting = 59,\n        RequestHostStateIdle = 60,\n        RequestHostStateHLTVRelay = 61,\n        ClientConsistencyFail = 62,\n        UnableToCRCMap = 63,\n        ClientNoMap = 64,\n        ClientDifferentMap = 65,\n        ServerRequiresSteam = 66,\n        SteamDenyMisc = 67,\n        SteamDenyBadAnticheat = 68,\n        ServerShutdown = 69,\n        ReplayIncompatible = 71,\n        ConnectRequestTimedOut = 72,\n        ServerIncompatible = 73,\n        LocalProblemManyRelays = 74,\n        LocalProblemHostedServerPrimaryRelay = 75,\n        LocalProblemNetworkConfig = 76,\n        LocalProblemOther = 77,\n        RemoteTimeout = 79,\n        RemoteTimeoutConnecting = 80,\n        RemoteOther = 81,\n        RemoteBadCrypt = 82,\n        RemoteCertNotTrusted = 83,\n        Unusual = 84,\n        InternalError = 85,\n        RejectBadChallenge = 128,\n        RejectNoLobby = 129,\n        RejectBackgroundMap = 130,\n        RejectSinglePlayer = 131,\n        RejectHiddenGame = 132,\n        RejectLanRestrict = 133,\n        RejectBadPassword = 134,\n        RejectServerFull = 135,\n        RejectInvalidReservation = 136,\n        RejectFailedChannel = 137,\n        RejectConnectFromLobby = 138,\n        RejectReservedForLobby = 139,\n        RejectInvalidKeyLength = 140,\n        RejectOldProtocol = 141,\n        RejectNewProtocol = 142,\n        RejectInvalidConnection = 143,\n        RejectInvalidCertLen = 144,\n        RejectInvalidSteamCertLen = 145,\n        RejectSteam = 146,\n        RejectServerAuthDisabled = 147,\n        RejectServerCDKeyAuthInvalid = 148,\n        RejectBanned = 149,\n        KickedTeamKilling = 150,\n        KickedTKStart = 151,\n        KickedUntrustedAccount = 152,\n        KickedConvictedAccount = 153,\n        KickedCompetitiveCooldown = 154,\n        KickedTeamHurting = 155,\n        KickedHostageKilling = 156,\n        KickedVotedOff = 157,\n        KickedIdle = 158,\n        KickedSuicide = 159,\n        KickedNoSteamLogin = 160,\n        KickedNoSteamTicket = 161,\n        KickedInputAutomation = 162,\n        KickedVACNetAbnormalBehavior = 163\n}\n```\n</TabsContent>\n    </Tabs>",
        "title": "DisconnectReason"
    },
    "types.econvartype": {
        "page": "# EConVarType\n\nThese are the convar types available.\n\n<Tabs defaultValue=\"lua\">\n      <TabsList class=\"grid w-full grid-cols-3 flex\">\n        <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n      </TabsList>\n    <TabsContent value=\"lua\">\n```lua\nEConVarType = {\n        EConVarType_Invalid = -1,\n        EConVarType_Bool = 0,\n        EConVarType_Int16 = 1,\n        EConVarType_UInt16 = 2,\n        EConVarType_Int32 = 3,\n        EConVarType_UInt32 = 4,\n        EConVarType_Int64 = 5,\n        EConVarType_UInt64 = 6,\n        EConVarType_Float32 = 7,\n        EConVarType_Float64 = 8,\n        EConVarType_String = 9,\n        EConVarType_Color = 10,\n        EConVarType_Vector2 = 11,\n        EConVarType_Vector3 = 12,\n        EConVarType_Vector4 = 13,\n        EConVarType_Qangle = 14\n}\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\nEConVarType = {\n        \"EConVarType_Invalid\": -1,\n        \"EConVarType_Bool\": 0,\n        \"EConVarType_Int16\": 1,\n        \"EConVarType_UInt16\": 2,\n        \"EConVarType_Int32\": 3,\n        \"EConVarType_UInt32\": 4,\n        \"EConVarType_Int64\": 5,\n        \"EConVarType_UInt64\": 6,\n        \"EConVarType_Float32\": 7,\n        \"EConVarType_Float64\": 8,\n        \"EConVarType_String\": 9,\n        \"EConVarType_Color\": 10,\n        \"EConVarType_Vector2\": 11,\n        \"EConVarType_Vector3\": 12,\n        \"EConVarType_Vector4\": 13,\n        \"EConVarType_Qangle\": 14\n}\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nusing SwiftlyS2.API.Scripting.Generic;\nenum EConVarType\n{\n        EConVarType_Invalid = -1,\n        EConVarType_Bool = 0,\n        EConVarType_Int16 = 1,\n        EConVarType_UInt16 = 2,\n        EConVarType_Int32 = 3,\n        EConVarType_UInt32 = 4,\n        EConVarType_Int64 = 5,\n        EConVarType_UInt64 = 6,\n        EConVarType_Float32 = 7,\n        EConVarType_Float64 = 8,\n        EConVarType_String = 9,\n        EConVarType_Color = 10,\n        EConVarType_Vector2 = 11,\n        EConVarType_Vector3 = 12,\n        EConVarType_Vector4 = 13,\n        EConVarType_Qangle = 14\n}\n```\n</TabsContent>\n    </Tabs>",
        "title": "EConVarType"
    },
    "types.eventhandler": {
        "page": "# EventHandler\n\nThis is the EventHandler class used for some identifiers.\n\n<Tabs defaultValue=\"lua\">\n      <TabsList class=\"grid w-full grid-cols-3 flex\">\n        <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n      </TabsList>\n    <TabsContent value=\"lua\">\n\n\n</TabsContent>\n<TabsContent value=\"js\">\n\n\n</TabsContent>\n<TabsContent value=\"cs\">\n\n\n</TabsContent>\n    </Tabs>",
        "title": "EventHandler"
    },
    "types.eventresult": {
        "page": "# EventResult\n\nThese are the event results available.\n\n<Tabs defaultValue=\"lua\">\n      <TabsList class=\"grid w-full grid-cols-3 flex\">\n        <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n      </TabsList>\n    <TabsContent value=\"lua\">\n```lua\nEventResult = {\n        Continue = 0,\n        Stop = 1,\n        Handled = 2\n}\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\nEventResult = {\n        \"Continue\": 0,\n        \"Stop\": 1,\n        \"Handled\": 2\n}\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nusing SwiftlyS2.API.Scripting.Generic;\nenum EventResult\n{\n        Continue = 0,\n        Stop = 1,\n        Handled = 2\n}\n```\n</TabsContent>\n    </Tabs>",
        "title": "EventResult"
    },
    "types.gamephase": {
        "page": "# GamePhase\n\nThese are the game phases available.\n\n<Tabs defaultValue=\"lua\">\n      <TabsList class=\"grid w-full grid-cols-3 flex\">\n        <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n      </TabsList>\n    <TabsContent value=\"lua\">\n```lua\nGamePhase = {\n        GAMEPHASE_WARMUP_ROUND = 0,\n        GAMEPHASE_PLAYING_STANDARD = 1,\n        GAMEPHASE_PLAYING_FIRST_HALF = 2,\n        GAMEPHASE_PLAYING_SECOND_HALF = 3,\n        GAMEPHASE_HALFTIME = 4,\n        GAMEPHASE_MATCH_ENDED = 5,\n        GAMEPHASE_MAX = 6\n}\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\nGamePhase = {\n        \"GAMEPHASE_WARMUP_ROUND\": 0,\n        \"GAMEPHASE_PLAYING_STANDARD\": 1,\n        \"GAMEPHASE_PLAYING_FIRST_HALF\": 2,\n        \"GAMEPHASE_PLAYING_SECOND_HALF\": 3,\n        \"GAMEPHASE_HALFTIME\": 4,\n        \"GAMEPHASE_MATCH_ENDED\": 5,\n        \"GAMEPHASE_MAX\": 6\n}\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nusing SwiftlyS2.API.Scripting.Generic;\nenum GamePhase\n{\n        GAMEPHASE_WARMUP_ROUND = 0,\n        GAMEPHASE_PLAYING_STANDARD = 1,\n        GAMEPHASE_PLAYING_FIRST_HALF = 2,\n        GAMEPHASE_PLAYING_SECOND_HALF = 3,\n        GAMEPHASE_HALFTIME = 4,\n        GAMEPHASE_MATCH_ENDED = 5,\n        GAMEPHASE_MAX = 6\n}\n```\n</TabsContent>\n    </Tabs>",
        "title": "GamePhase"
    },
    "types.hookhandle": {
        "page": "# HookHandle\n\nThis is the HookHandle class used for some identifiers.\n\n<Tabs defaultValue=\"lua\">\n      <TabsList class=\"grid w-full grid-cols-3 flex\">\n        <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n      </TabsList>\n    <TabsContent value=\"lua\">\n\n\n</TabsContent>\n<TabsContent value=\"js\">\n\n\n</TabsContent>\n<TabsContent value=\"cs\">\n\n\n</TabsContent>\n    </Tabs>",
        "title": "HookHandle"
    },
    "types.listenoverride": {
        "page": "# ListenOverride\n\nThese are the listen overrides available.\n\n<Tabs defaultValue=\"lua\">\n      <TabsList class=\"grid w-full grid-cols-3 flex\">\n        <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n      </TabsList>\n    <TabsContent value=\"lua\">\n```lua\nListenOverride = {\n        Listen_Default = 0,\n        Listen_Mute = 1,\n        Listen_Hear = 2\n}\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\nListenOverride = {\n        \"Listen_Default\": 0,\n        \"Listen_Mute\": 1,\n        \"Listen_Hear\": 2\n}\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nusing SwiftlyS2.API.Scripting.Generic;\nenum ListenOverride\n{\n        Listen_Default = 0,\n        Listen_Mute = 1,\n        Listen_Hear = 2\n}\n```\n</TabsContent>\n    </Tabs>",
        "title": "ListenOverride"
    },
    "types.logtype_t": {
        "page": "# LogType_t\n\nThese are the log types available.\n\n<Tabs defaultValue=\"lua\">\n      <TabsList class=\"grid w-full grid-cols-3 flex\">\n        <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n      </TabsList>\n    <TabsContent value=\"lua\">\n```lua\nLogType_t = {\n        Debug = 1,\n        Warning = 2,\n        Error = 3,\n        Common = 4\n}\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\nLogType_t = {\n        \"Debug\": 1,\n        \"Warning\": 2,\n        \"Error\": 3,\n        \"Common\": 4\n}\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nusing SwiftlyS2.API.Scripting.Generic;\nenum LogType_t\n{\n        Debug = 1,\n        Warning = 2,\n        Error = 3,\n        Common = 4\n}\n```\n</TabsContent>\n    </Tabs>",
        "title": "LogType_t"
    },
    "types.messagetype": {
        "page": "# MessageType\n\nThese are the message types available.\n\n<Tabs defaultValue=\"lua\">\n      <TabsList class=\"grid w-full grid-cols-3 flex\">\n        <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n      </TabsList>\n    <TabsContent value=\"lua\">\n```lua\nMessageType = {\n        Notify = 1,\n        Console = 2,\n        Chat = 3,\n        Center = 4\n}\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\nMessageType = {\n        \"Notify\": 1,\n        \"Console\": 2,\n        \"Chat\": 3,\n        \"Center\": 4\n}\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nusing SwiftlyS2.API.Scripting.Generic;\nenum MessageType\n{\n        Notify = 1,\n        Console = 2,\n        Chat = 3,\n        Center = 4\n}\n```\n</TabsContent>\n    </Tabs>",
        "title": "MessageType"
    },
    "types.pluginstate_t": {
        "page": "# PluginState_t\n\nThese are the plugin states available.\n\n<Tabs defaultValue=\"lua\">\n      <TabsList class=\"grid w-full grid-cols-3 flex\">\n        <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n      </TabsList>\n    <TabsContent value=\"lua\">\n```lua\nPluginState_t = {\n        Started = 0,\n        Stopped = 1,\n        Starting = 2\n}\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\nPluginState_t = {\n        \"Started\": 0,\n        \"Stopped\": 1,\n        \"Starting\": 2\n}\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nusing SwiftlyS2.API.Scripting.Generic;\nenum PluginState_t\n{\n        Started = 0,\n        Stopped = 1,\n        Starting = 2\n}\n```\n</TabsContent>\n    </Tabs>",
        "title": "PluginState_t"
    },
    "types.roundendreason_t": {
        "page": "# RoundEndReason_t\n\nThese are the round end reasons available.\n\n<Tabs defaultValue=\"lua\">\n      <TabsList class=\"grid w-full grid-cols-3 flex\">\n        <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n      </TabsList>\n    <TabsContent value=\"lua\">\n```lua\nRoundEndReason_t = {\n        Unknown = 0,\n        TargetBombed = 0x1,\n        TerroristsEscaped = 0x4,\n        CTsPreventEscape = 0x5,\n        EscapingTerroristsNeutralized = 0x6,\n        BombDefused = 0x7,\n        CTsWin = 0x8,\n        TerroristsWin = 0x9,\n        RoundDraw = 0xA,\n        AllHostageRescued = 0xB,\n        TargetSaved = 0xC,\n        HostagesNotRescued = 0xD,\n        TerroristsNotEscaped = 0xE,\n        GameCommencing = 0x10,\n        TerroristsSurrender = 0x11,\n        CTsSurrender = 0x12,\n        TerroristsPlanted = 0x13,\n        CTsReachedHostage = 0x14,\n        SurvivalWin = 0x15,\n        SurvivalDraw = 0x16\n}\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\nRoundEndReason_t = {\n        \"Unknown\": 0,\n        \"TargetBombed\": 0x1,\n        \"TerroristsEscaped\": 0x4,\n        \"CTsPreventEscape\": 0x5,\n        \"EscapingTerroristsNeutralized\": 0x6,\n        \"BombDefused\": 0x7,\n        \"CTsWin\": 0x8,\n        \"TerroristsWin\": 0x9,\n        \"RoundDraw\": 0xA,\n        \"AllHostageRescued\": 0xB,\n        \"TargetSaved\": 0xC,\n        \"HostagesNotRescued\": 0xD,\n        \"TerroristsNotEscaped\": 0xE,\n        \"GameCommencing\": 0x10,\n        \"TerroristsSurrender\": 0x11,\n        \"CTsSurrender\": 0x12,\n        \"TerroristsPlanted\": 0x13,\n        \"CTsReachedHostage\": 0x14,\n        \"SurvivalWin\": 0x15,\n        \"SurvivalDraw\": 0x16\n}\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nusing SwiftlyS2.API.Scripting.Generic;\nenum RoundEndReason_t\n{\n        Unknown = 0,\n        TargetBombed = 0x1,\n        TerroristsEscaped = 0x4,\n        CTsPreventEscape = 0x5,\n        EscapingTerroristsNeutralized = 0x6,\n        BombDefused = 0x7,\n        CTsWin = 0x8,\n        TerroristsWin = 0x9,\n        RoundDraw = 0xA,\n        AllHostageRescued = 0xB,\n        TargetSaved = 0xC,\n        HostagesNotRescued = 0xD,\n        TerroristsNotEscaped = 0xE,\n        GameCommencing = 0x10,\n        TerroristsSurrender = 0x11,\n        CTsSurrender = 0x12,\n        TerroristsPlanted = 0x13,\n        CTsReachedHostage = 0x14,\n        SurvivalWin = 0x15,\n        SurvivalDraw = 0x16\n}\n```\n</TabsContent>\n    </Tabs>",
        "title": "RoundEndReason_t"
    },
    "types.team": {
        "page": "# Team\n\nThese are the teams available.\n\n<Tabs defaultValue=\"lua\">\n      <TabsList class=\"grid w-full grid-cols-3 flex\">\n        <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n      </TabsList>\n    <TabsContent value=\"lua\">\n```lua\nTeam = {\n        None = 0,\n        Spectator = 1,\n        T = 2,\n        CT = 3\n}\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\nTeam = {\n        \"None\": 0,\n        \"Spectator\": 1,\n        \"T\": 2,\n        \"CT\": 3\n}\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nusing SwiftlyS2.API.Scripting.Generic;\nenum Team\n{\n        None = 0,\n        Spectator = 1,\n        T = 2,\n        CT = 3\n}\n```\n</TabsContent>\n    </Tabs>",
        "title": "Team"
    },
    "types.timerhandle": {
        "page": "# TimerHandle\n\nThis is the TimerHandle class used for some identifiers in timers.\n\n<Tabs defaultValue=\"lua\">\n      <TabsList class=\"grid w-full grid-cols-3 flex\">\n        <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n      </TabsList>\n    <TabsContent value=\"lua\">\n\n\n</TabsContent>\n<TabsContent value=\"js\">\n\n\n</TabsContent>\n<TabsContent value=\"cs\">\n\n\n</TabsContent>\n    </Tabs>",
        "title": "TimerHandle"
    },
    "types.voiceflagvalue": {
        "page": "# VoiceFlagValue\n\nThese are the voice flags available.\n\n<Tabs defaultValue=\"lua\">\n      <TabsList class=\"grid w-full grid-cols-3 flex\">\n        <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n      </TabsList>\n    <TabsContent value=\"lua\">\n```lua\nVoiceFlagValue = {\n        Speak_Normal = 0,\n        Speak_Muted = 1,\n        Speak_All = 2,\n        Speak_ListenAll = 4,\n        Speak_Team = 8,\n        Speak_ListenTeam = 16\n}\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\nVoiceFlagValue = {\n        \"Speak_Normal\": 0,\n        \"Speak_Muted\": 1,\n        \"Speak_All\": 2,\n        \"Speak_ListenAll\": 4,\n        \"Speak_Team\": 8,\n        \"Speak_ListenTeam\": 16\n}\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nusing SwiftlyS2.API.Scripting.Generic;\nenum VoiceFlagValue\n{\n        Speak_Normal = 0,\n        Speak_Muted = 1,\n        Speak_All = 2,\n        Speak_ListenAll = 4,\n        Speak_Team = 8,\n        Speak_ListenTeam = 16\n}\n```\n</TabsContent>\n    </Tabs>",
        "title": "VoiceFlagValue"
    },
    "usermessages": {
        "page": "# User Messages\n\nThis is the list of items available for User Messages API.\n\n## Classes\n\n<Catalog filter=\"usermessages.usermessage\"></Catalog>",
        "title": "User Messages",
        "icon": "message"
    },
    "usermessages.usermessage": {
        "page": "# UserMessage\n\nA user message is a wrapper for protobuf messages.\n\n<Tabs defaultValue=\"lua\">\n      <TabsList class=\"grid w-full grid-cols-3 flex\">\n        <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n      </TabsList>\n    <TabsContent value=\"lua\">\n## Constructor\n```lua\n--- @param partial_message_name string\n--- @return UserMessage\nlocal usermessage = UserMessage(partial_message_name)\n```\n# Functions\nHere are listed all the functions.\n## IsValidMessage\n```lua\n--- @return boolean\n usermessage:IsValidMessage()\n```\n## GetMessageName\n```lua\n--- @return string\n usermessage:GetMessageName()\n```\n## GetMessageID\n```lua\n--- @return number\n usermessage:GetMessageID()\n```\n## HasField\n```lua\n--- @param fieldName string\n--- @return boolean\n usermessage:HasField(fieldName)\n```\n## GetInt32\n```lua\n--- @param fieldName string\n--- @return number\n usermessage:GetInt32(fieldName)\n```\n## SetInt32\n```lua\n--- @param fieldName string\n--- @param value number\n--- @return nil\n usermessage:SetInt32(fieldName, value)\n```\n## GetRepeatedInt32\n```lua\n--- @param fieldName string\n--- @param index number\n--- @return number\n usermessage:GetRepeatedInt32(fieldName, index)\n```\n## SetRepeatedInt32\n```lua\n--- @param fieldName string\n--- @param index number\n--- @param value number\n--- @return nil\n usermessage:SetRepeatedInt32(fieldName, index, value)\n```\n## AddInt32\n```lua\n--- @param fieldName string\n--- @param index number\n--- @return nil\n usermessage:AddInt32(fieldName, index)\n```\n## GetInt64\n```lua\n--- @param fieldName string\n--- @return number\n usermessage:GetInt64(fieldName)\n```\n## SetInt64\n```lua\n--- @param fieldName string\n--- @param value number\n--- @return nil\n usermessage:SetInt64(fieldName, value)\n```\n## GetRepeatedInt64\n```lua\n--- @param fieldName string\n--- @param index number\n--- @return number\n usermessage:GetRepeatedInt64(fieldName, index)\n```\n## SetRepeatedInt64\n```lua\n--- @param fieldName string\n--- @param index number\n--- @param value number\n--- @return nil\n usermessage:SetRepeatedInt64(fieldName, index, value)\n```\n## AddInt64\n```lua\n--- @param fieldName string\n--- @param value number\n--- @return nil\n usermessage:AddInt64(fieldName, value)\n```\n## GetUInt32\n```lua\n--- @param fieldName string\n--- @return number\n usermessage:GetUInt32(fieldName)\n```\n## SetUInt32\n```lua\n--- @param fieldName string\n--- @param value number\n--- @return nil\n usermessage:SetUInt32(fieldName, value)\n```\n## GetRepeatedUInt32\n```lua\n--- @param fieldName string\n--- @param index number\n--- @return number\n usermessage:GetRepeatedUInt32(fieldName, index)\n```\n## SetRepeatedUInt32\n```lua\n--- @param fieldName string\n--- @param index number\n--- @param value number\n--- @return nil\n usermessage:SetRepeatedUInt32(fieldName, index, value)\n```\n## AddUInt32\n```lua\n--- @param fieldName string\n--- @param value number\n--- @return nil\n usermessage:AddUInt32(fieldName, value)\n```\n## GetUInt64\n```lua\n--- @param fieldName string\n--- @return number\n usermessage:GetUInt64(fieldName)\n```\n## SetUInt64\n```lua\n--- @param fieldName string\n--- @param value number\n--- @return nil\n usermessage:SetUInt64(fieldName, value)\n```\n## GetRepeatedUInt64\n```lua\n--- @param fieldName string\n--- @param index number\n--- @return number\n usermessage:GetRepeatedUInt64(fieldName, index)\n```\n## SetRepeatedUInt64\n```lua\n--- @param fieldName string\n--- @param index number\n--- @param value number\n--- @return nil\n usermessage:SetRepeatedUInt64(fieldName, index, value)\n```\n## AddUInt64\n```lua\n--- @param fieldName string\n--- @param value number\n--- @return nil\n usermessage:AddUInt64(fieldName, value)\n```\n## GetInt64OrUnsigned\n```lua\n--- @param fieldName string\n--- @return number\n usermessage:GetInt64OrUnsigned(fieldName)\n```\n## SetInt64OrUnsigned\n```lua\n--- @param fieldName string\n--- @param value number\n--- @return nil\n usermessage:SetInt64OrUnsigned(fieldName, value)\n```\n## GetRepeatedInt64OrUnsigned\n```lua\n--- @param fieldName string\n--- @param index number\n--- @return number\n usermessage:GetRepeatedInt64OrUnsigned(fieldName, index)\n```\n## SetRepeatedInt64OrUnsigned\n```lua\n--- @param fieldName string\n--- @param index number\n--- @param value number\n--- @return nil\n usermessage:SetRepeatedInt64OrUnsigned(fieldName, index, value)\n```\n## AddInt64OrUnsigned\n```lua\n--- @param fieldName string\n--- @param value number\n--- @return nil\n usermessage:AddInt64OrUnsigned(fieldName, value)\n```\n## GetBool\n```lua\n--- @param fieldName string\n--- @return boolean\n usermessage:GetBool(fieldName)\n```\n## SetBool\n```lua\n--- @param fieldName string\n--- @param value boolean\n--- @return nil\n usermessage:SetBool(fieldName, value)\n```\n## GetRepeatedBool\n```lua\n--- @param fieldName string\n--- @param index number\n--- @return boolean\n usermessage:GetRepeatedBool(fieldName, index)\n```\n## SetRepeatedBool\n```lua\n--- @param fieldName string\n--- @param index number\n--- @param value boolean\n--- @return nil\n usermessage:SetRepeatedBool(fieldName, index, value)\n```\n## AddBool\n```lua\n--- @param fieldName string\n--- @param value boolean\n--- @return nil\n usermessage:AddBool(fieldName, value)\n```\n## GetFloat\n```lua\n--- @param fieldName string\n--- @return number\n usermessage:GetFloat(fieldName)\n```\n## SetFloat\n```lua\n--- @param fieldName string\n--- @param value number\n--- @return nil\n usermessage:SetFloat(fieldName, value)\n```\n## GetRepeatedFloat\n```lua\n--- @param fieldName string\n--- @param index number\n--- @return number\n usermessage:GetRepeatedFloat(fieldName, index)\n```\n## SetRepeatedFloat\n```lua\n--- @param fieldName string\n--- @param index number\n--- @param value number\n--- @return nil\n usermessage:SetRepeatedFloat(fieldName, index, value)\n```\n## AddFloat\n```lua\n--- @param fieldName string\n--- @param value number\n--- @return nil\n usermessage:AddFloat(fieldName, value)\n```\n## GetDouble\n```lua\n--- @param fieldName string\n--- @return number\n usermessage:GetDouble(fieldName)\n```\n## SetDouble\n```lua\n--- @param fieldName string\n--- @param value number\n--- @return nil\n usermessage:SetDouble(fieldName, value)\n```\n## GetRepeatedDouble\n```lua\n--- @param fieldName string\n--- @param index number\n--- @return number\n usermessage:GetRepeatedDouble(fieldName, index)\n```\n## SetRepeatedDouble\n```lua\n--- @param fieldName string\n--- @param index number\n--- @param value number\n--- @return nil\n usermessage:SetRepeatedDouble(fieldName, index, value)\n```\n## AddDouble\n```lua\n--- @param fieldName string\n--- @param value number\n--- @return nil\n usermessage:AddDouble(fieldName, value)\n```\n## GetFloatOrDouble\n```lua\n--- @param fieldName string\n--- @return number\n usermessage:GetFloatOrDouble(fieldName)\n```\n## SetFloatOrDouble\n```lua\n--- @param fieldName string\n--- @param value number\n--- @return nil\n usermessage:SetFloatOrDouble(fieldName, value)\n```\n## GetRepeatedFloatOrDouble\n```lua\n--- @param fieldName string\n--- @param index number\n--- @return number\n usermessage:GetRepeatedFloatOrDouble(fieldName, index)\n```\n## SetRepeatedFloatOrDouble\n```lua\n--- @param fieldName string\n--- @param index number\n--- @param value number\n--- @return nil\n usermessage:SetRepeatedFloatOrDouble(fieldName, index, value)\n```\n## AddFloatOrDouble\n```lua\n--- @param fieldName string\n--- @param value number\n--- @return nil\n usermessage:AddFloatOrDouble(fieldName, value)\n```\n## GetString\n```lua\n--- @param fieldName string\n--- @return string\n usermessage:GetString(fieldName)\n```\n## SetString\n```lua\n--- @param fieldName string\n--- @param value string\n--- @return nil\n usermessage:SetString(fieldName, value)\n```\n## GetRepeatedString\n```lua\n--- @param fieldName string\n--- @param index number\n--- @return string\n usermessage:GetRepeatedString(fieldName, index)\n```\n## SetRepeatedString\n```lua\n--- @param fieldName string\n--- @param index number\n--- @param value string\n--- @return nil\n usermessage:SetRepeatedString(fieldName, index, value)\n```\n## AddString\n```lua\n--- @param fieldName string\n--- @param value string\n--- @return nil\n usermessage:AddString(fieldName, value)\n```\n## GetBytes\n```lua\n--- @param fieldName string\n--- @return string\n usermessage:GetBytes(fieldName)\n```\n## SetBytes\n```lua\n--- @param fieldName string\n--- @param value string\n--- @return nil\n usermessage:SetBytes(fieldName, value)\n```\n## GetRepeatedBytes\n```lua\n--- @param fieldName string\n--- @param index number\n--- @return string\n usermessage:GetRepeatedBytes(fieldName, index)\n```\n## SetRepeatedBytes\n```lua\n--- @param fieldName string\n--- @param index number\n--- @param value string\n--- @return nil\n usermessage:SetRepeatedBytes(fieldName, index, value)\n```\n## AddBytes\n```lua\n--- @param fieldName string\n--- @param value string\n--- @return nil\n usermessage:AddBytes(fieldName, value)\n```\n## GetColor\n```lua\n--- @param fieldName string\n--- @return Color\n usermessage:GetColor(fieldName)\n```\n## SetColor\n```lua\n--- @param fieldName string\n--- @param value Color\n--- @return nil\n usermessage:SetColor(fieldName, value)\n```\n## GetRepeatedColor\n```lua\n--- @param fieldName string\n--- @param index number\n--- @return Color\n usermessage:GetRepeatedColor(fieldName, index)\n```\n## SetRepeatedColor\n```lua\n--- @param fieldName string\n--- @param index number\n--- @param value Color\n--- @return nil\n usermessage:SetRepeatedColor(fieldName, index, value)\n```\n## AddColor\n```lua\n--- @param fieldName string\n--- @param value Color\n--- @return nil\n usermessage:AddColor(fieldName, value)\n```\n## GetVector2D\n```lua\n--- @param fieldName string\n--- @return Vector2D\n usermessage:GetVector2D(fieldName)\n```\n## SetVector2D\n```lua\n--- @param fieldName string\n--- @param value Vector2D\n--- @return nil\n usermessage:SetVector2D(fieldName, value)\n```\n## GetRepeatedVector2D\n```lua\n--- @param fieldName string\n--- @param index number\n--- @return Vector2D\n usermessage:GetRepeatedVector2D(fieldName, index)\n```\n## SetRepeatedVector2D\n```lua\n--- @param fieldName string\n--- @param index number\n--- @param value Vector2D\n--- @return nil\n usermessage:SetRepeatedVector2D(fieldName, index, value)\n```\n## AddVector2D\n```lua\n--- @param fieldName string\n--- @param value Vector2D\n--- @return nil\n usermessage:AddVector2D(fieldName, value)\n```\n## GetVector\n```lua\n--- @param fieldName string\n--- @return Vector\n usermessage:GetVector(fieldName)\n```\n## SetVector\n```lua\n--- @param fieldName string\n--- @param value Vector\n--- @return nil\n usermessage:SetVector(fieldName, value)\n```\n## GetRepeatedVector\n```lua\n--- @param fieldName string\n--- @param index number\n--- @return Vector\n usermessage:GetRepeatedVector(fieldName, index)\n```\n## SetRepeatedVector\n```lua\n--- @param fieldName string\n--- @param index number\n--- @param value Vector\n--- @return nil\n usermessage:SetRepeatedVector(fieldName, index, value)\n```\n## AddVector\n```lua\n--- @param fieldName string\n--- @param value Vector\n--- @return nil\n usermessage:AddVector(fieldName, value)\n```\n## GetQAngle\n```lua\n--- @param fieldName string\n--- @return QAngle\n usermessage:GetQAngle(fieldName)\n```\n## SetQAngle\n```lua\n--- @param fieldName string\n--- @param value QAngle\n--- @return QAngle\n usermessage:SetQAngle(fieldName, value)\n```\n## GetRepeatedQAngle\n```lua\n--- @param fieldName string\n--- @param index number\n--- @return QAngle\n usermessage:GetRepeatedQAngle(fieldName, index)\n```\n## SetRepeatedQAngle\n```lua\n--- @param fieldName string\n--- @param index number\n--- @param value QAngle\n--- @return nil\n usermessage:SetRepeatedQAngle(fieldName, index, value)\n```\n## AddQAngle\n```lua\n--- @param fieldName string\n--- @param value QAngle\n--- @return nil\n usermessage:AddQAngle(fieldName, value)\n```\n## RemoveRepeatedFieldValue\n```lua\n--- @param fieldName string\n--- @param index number\n--- @return nil\n usermessage:RemoveRepeatedFieldValue(fieldName, index)\n```\n## GetRepeatedFieldCount\n```lua\n--- @param fieldName string\n--- @return number\n usermessage:GetRepeatedFieldCount(fieldName)\n```\n## GetMessage\n```lua\n--- @param fieldName string\n--- @return UserMessage\n usermessage:GetMessage(fieldName)\n```\n## GetRepeatedMessage\n```lua\n--- @param fieldName string\n--- @param index number\n--- @return UserMessage\n usermessage:GetRepeatedMessage(fieldName, index)\n```\n## AddMessage\n```lua\n--- @param fieldName string\n--- @return UserMessage\n usermessage:AddMessage(fieldName)\n```\n## SendToPlayer\n```lua\n--- @param playerid number\n--- @return nil\n usermessage:SendToPlayer(playerid)\n```\n## SendToAllPlayers\n```lua\n--- @return nil\n usermessage:SendToAllPlayers()\n```\n## AddClient\n```lua\n--- @param playerid number\n--- @return nil\n usermessage:AddClient(playerid)\n```\n## RemoveClient\n```lua\n--- @param playerid number\n--- @return nil\n usermessage:RemoveClient(playerid)\n```\n## ClearClients\n```lua\n--- @return nil\n usermessage:ClearClients()\n```\n## AddClients\n```lua\n--- @return nil\n usermessage:AddClients()\n```\n## GetClients\n```lua\n--- @return table\n usermessage:GetClients()\n```\n\n### Example\n```lua\nAddEventHandler(\"OnUserMessageSend\", function(event, um, isreliable)\n    local msgid = um:GetMessageID()\n\n    if msgid == 418 or msgid == 411 then\n        return EventResult.Stop\n    end\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n## Constructor\n```js\n/**\n * @param {string} partial_message_name\n * @return UserMessage\n */\nlet usermessage = UserMessage(partial_message_name)\n```\n# Functions\nHere are listed all the functions.\n## IsValidMessage\n```js\n/**\n * @return bool\n */\n usermessage.IsValidMessage()\n```\n## GetMessageName\n```js\n/**\n * @return string\n */\n usermessage.GetMessageName()\n```\n## GetMessageID\n```js\n/**\n * @return number\n */\n usermessage.GetMessageID()\n```\n## HasField\n```js\n/**\n * @param {string} fieldName\n * @return bool\n */\n usermessage.HasField(fieldName)\n```\n## GetInt32\n```js\n/**\n * @param {string} fieldName\n * @return number\n */\n usermessage.GetInt32(fieldName)\n```\n## SetInt32\n```js\n/**\n * @param {string} fieldName\n * @param {number} value\n * @return void\n */\n usermessage.SetInt32(fieldName, value)\n```\n## GetRepeatedInt32\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @return number\n */\n usermessage.GetRepeatedInt32(fieldName, index)\n```\n## SetRepeatedInt32\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @param {number} value\n * @return void\n */\n usermessage.SetRepeatedInt32(fieldName, index, value)\n```\n## AddInt32\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @return void\n */\n usermessage.AddInt32(fieldName, index)\n```\n## GetInt64\n```js\n/**\n * @param {string} fieldName\n * @return number\n */\n usermessage.GetInt64(fieldName)\n```\n## SetInt64\n```js\n/**\n * @param {string} fieldName\n * @param {number} value\n * @return void\n */\n usermessage.SetInt64(fieldName, value)\n```\n## GetRepeatedInt64\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @return number\n */\n usermessage.GetRepeatedInt64(fieldName, index)\n```\n## SetRepeatedInt64\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @param {number} value\n * @return void\n */\n usermessage.SetRepeatedInt64(fieldName, index, value)\n```\n## AddInt64\n```js\n/**\n * @param {string} fieldName\n * @param {number} value\n * @return void\n */\n usermessage.AddInt64(fieldName, value)\n```\n## GetUInt32\n```js\n/**\n * @param {string} fieldName\n * @return number\n */\n usermessage.GetUInt32(fieldName)\n```\n## SetUInt32\n```js\n/**\n * @param {string} fieldName\n * @param {number} value\n * @return void\n */\n usermessage.SetUInt32(fieldName, value)\n```\n## GetRepeatedUInt32\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @return number\n */\n usermessage.GetRepeatedUInt32(fieldName, index)\n```\n## SetRepeatedUInt32\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @param {number} value\n * @return void\n */\n usermessage.SetRepeatedUInt32(fieldName, index, value)\n```\n## AddUInt32\n```js\n/**\n * @param {string} fieldName\n * @param {number} value\n * @return void\n */\n usermessage.AddUInt32(fieldName, value)\n```\n## GetUInt64\n```js\n/**\n * @param {string} fieldName\n * @return number\n */\n usermessage.GetUInt64(fieldName)\n```\n## SetUInt64\n```js\n/**\n * @param {string} fieldName\n * @param {number} value\n * @return void\n */\n usermessage.SetUInt64(fieldName, value)\n```\n## GetRepeatedUInt64\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @return number\n */\n usermessage.GetRepeatedUInt64(fieldName, index)\n```\n## SetRepeatedUInt64\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @param {number} value\n * @return void\n */\n usermessage.SetRepeatedUInt64(fieldName, index, value)\n```\n## AddUInt64\n```js\n/**\n * @param {string} fieldName\n * @param {number} value\n * @return void\n */\n usermessage.AddUInt64(fieldName, value)\n```\n## GetInt64OrUnsigned\n```js\n/**\n * @param {string} fieldName\n * @return number\n */\n usermessage.GetInt64OrUnsigned(fieldName)\n```\n## SetInt64OrUnsigned\n```js\n/**\n * @param {string} fieldName\n * @param {number} value\n * @return void\n */\n usermessage.SetInt64OrUnsigned(fieldName, value)\n```\n## GetRepeatedInt64OrUnsigned\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @return number\n */\n usermessage.GetRepeatedInt64OrUnsigned(fieldName, index)\n```\n## SetRepeatedInt64OrUnsigned\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @param {number} value\n * @return void\n */\n usermessage.SetRepeatedInt64OrUnsigned(fieldName, index, value)\n```\n## AddInt64OrUnsigned\n```js\n/**\n * @param {string} fieldName\n * @param {number} value\n * @return void\n */\n usermessage.AddInt64OrUnsigned(fieldName, value)\n```\n## GetBool\n```js\n/**\n * @param {string} fieldName\n * @return bool\n */\n usermessage.GetBool(fieldName)\n```\n## SetBool\n```js\n/**\n * @param {string} fieldName\n * @param {bool} value\n * @return void\n */\n usermessage.SetBool(fieldName, value)\n```\n## GetRepeatedBool\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @return bool\n */\n usermessage.GetRepeatedBool(fieldName, index)\n```\n## SetRepeatedBool\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @param {bool} value\n * @return void\n */\n usermessage.SetRepeatedBool(fieldName, index, value)\n```\n## AddBool\n```js\n/**\n * @param {string} fieldName\n * @param {bool} value\n * @return void\n */\n usermessage.AddBool(fieldName, value)\n```\n## GetFloat\n```js\n/**\n * @param {string} fieldName\n * @return number\n */\n usermessage.GetFloat(fieldName)\n```\n## SetFloat\n```js\n/**\n * @param {string} fieldName\n * @param {number} value\n * @return void\n */\n usermessage.SetFloat(fieldName, value)\n```\n## GetRepeatedFloat\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @return number\n */\n usermessage.GetRepeatedFloat(fieldName, index)\n```\n## SetRepeatedFloat\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @param {number} value\n * @return void\n */\n usermessage.SetRepeatedFloat(fieldName, index, value)\n```\n## AddFloat\n```js\n/**\n * @param {string} fieldName\n * @param {number} value\n * @return void\n */\n usermessage.AddFloat(fieldName, value)\n```\n## GetDouble\n```js\n/**\n * @param {string} fieldName\n * @return number\n */\n usermessage.GetDouble(fieldName)\n```\n## SetDouble\n```js\n/**\n * @param {string} fieldName\n * @param {number} value\n * @return void\n */\n usermessage.SetDouble(fieldName, value)\n```\n## GetRepeatedDouble\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @return number\n */\n usermessage.GetRepeatedDouble(fieldName, index)\n```\n## SetRepeatedDouble\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @param {number} value\n * @return void\n */\n usermessage.SetRepeatedDouble(fieldName, index, value)\n```\n## AddDouble\n```js\n/**\n * @param {string} fieldName\n * @param {number} value\n * @return void\n */\n usermessage.AddDouble(fieldName, value)\n```\n## GetFloatOrDouble\n```js\n/**\n * @param {string} fieldName\n * @return number\n */\n usermessage.GetFloatOrDouble(fieldName)\n```\n## SetFloatOrDouble\n```js\n/**\n * @param {string} fieldName\n * @param {number} value\n * @return void\n */\n usermessage.SetFloatOrDouble(fieldName, value)\n```\n## GetRepeatedFloatOrDouble\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @return number\n */\n usermessage.GetRepeatedFloatOrDouble(fieldName, index)\n```\n## SetRepeatedFloatOrDouble\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @param {number} value\n * @return void\n */\n usermessage.SetRepeatedFloatOrDouble(fieldName, index, value)\n```\n## AddFloatOrDouble\n```js\n/**\n * @param {string} fieldName\n * @param {number} value\n * @return void\n */\n usermessage.AddFloatOrDouble(fieldName, value)\n```\n## GetString\n```js\n/**\n * @param {string} fieldName\n * @return string\n */\n usermessage.GetString(fieldName)\n```\n## SetString\n```js\n/**\n * @param {string} fieldName\n * @param {string} value\n * @return void\n */\n usermessage.SetString(fieldName, value)\n```\n## GetRepeatedString\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @return string\n */\n usermessage.GetRepeatedString(fieldName, index)\n```\n## SetRepeatedString\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @param {string} value\n * @return void\n */\n usermessage.SetRepeatedString(fieldName, index, value)\n```\n## AddString\n```js\n/**\n * @param {string} fieldName\n * @param {string} value\n * @return void\n */\n usermessage.AddString(fieldName, value)\n```\n## GetBytes\n```js\n/**\n * @param {string} fieldName\n * @return string\n */\n usermessage.GetBytes(fieldName)\n```\n## SetBytes\n```js\n/**\n * @param {string} fieldName\n * @param {string} value\n * @return void\n */\n usermessage.SetBytes(fieldName, value)\n```\n## GetRepeatedBytes\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @return string\n */\n usermessage.GetRepeatedBytes(fieldName, index)\n```\n## SetRepeatedBytes\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @param {string} value\n * @return void\n */\n usermessage.SetRepeatedBytes(fieldName, index, value)\n```\n## AddBytes\n```js\n/**\n * @param {string} fieldName\n * @param {string} value\n * @return void\n */\n usermessage.AddBytes(fieldName, value)\n```\n## GetColor\n```js\n/**\n * @param {string} fieldName\n * @return Color\n */\n usermessage.GetColor(fieldName)\n```\n## SetColor\n```js\n/**\n * @param {string} fieldName\n * @param {Color} value\n * @return void\n */\n usermessage.SetColor(fieldName, value)\n```\n## GetRepeatedColor\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @return Color\n */\n usermessage.GetRepeatedColor(fieldName, index)\n```\n## SetRepeatedColor\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @param {Color} value\n * @return void\n */\n usermessage.SetRepeatedColor(fieldName, index, value)\n```\n## AddColor\n```js\n/**\n * @param {string} fieldName\n * @param {Color} value\n * @return void\n */\n usermessage.AddColor(fieldName, value)\n```\n## GetVector2D\n```js\n/**\n * @param {string} fieldName\n * @return Vector2D\n */\n usermessage.GetVector2D(fieldName)\n```\n## SetVector2D\n```js\n/**\n * @param {string} fieldName\n * @param {Vector2D} value\n * @return void\n */\n usermessage.SetVector2D(fieldName, value)\n```\n## GetRepeatedVector2D\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @return Vector2D\n */\n usermessage.GetRepeatedVector2D(fieldName, index)\n```\n## SetRepeatedVector2D\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @param {Vector2D} value\n * @return void\n */\n usermessage.SetRepeatedVector2D(fieldName, index, value)\n```\n## AddVector2D\n```js\n/**\n * @param {string} fieldName\n * @param {Vector2D} value\n * @return void\n */\n usermessage.AddVector2D(fieldName, value)\n```\n## GetVector\n```js\n/**\n * @param {string} fieldName\n * @return Vector\n */\n usermessage.GetVector(fieldName)\n```\n## SetVector\n```js\n/**\n * @param {string} fieldName\n * @param {Vector} value\n * @return void\n */\n usermessage.SetVector(fieldName, value)\n```\n## GetRepeatedVector\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @return Vector\n */\n usermessage.GetRepeatedVector(fieldName, index)\n```\n## SetRepeatedVector\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @param {Vector} value\n * @return void\n */\n usermessage.SetRepeatedVector(fieldName, index, value)\n```\n## AddVector\n```js\n/**\n * @param {string} fieldName\n * @param {Vector} value\n * @return void\n */\n usermessage.AddVector(fieldName, value)\n```\n## GetQAngle\n```js\n/**\n * @param {string} fieldName\n * @return QAngle\n */\n usermessage.GetQAngle(fieldName)\n```\n## SetQAngle\n```js\n/**\n * @param {string} fieldName\n * @param {QAngle} value\n * @return QAngle\n */\n usermessage.SetQAngle(fieldName, value)\n```\n## GetRepeatedQAngle\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @return QAngle\n */\n usermessage.GetRepeatedQAngle(fieldName, index)\n```\n## SetRepeatedQAngle\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @param {QAngle} value\n * @return void\n */\n usermessage.SetRepeatedQAngle(fieldName, index, value)\n```\n## AddQAngle\n```js\n/**\n * @param {string} fieldName\n * @param {QAngle} value\n * @return void\n */\n usermessage.AddQAngle(fieldName, value)\n```\n## RemoveRepeatedFieldValue\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @return void\n */\n usermessage.RemoveRepeatedFieldValue(fieldName, index)\n```\n## GetRepeatedFieldCount\n```js\n/**\n * @param {string} fieldName\n * @return number\n */\n usermessage.GetRepeatedFieldCount(fieldName)\n```\n## GetMessage\n```js\n/**\n * @param {string} fieldName\n * @return UserMessage\n */\n usermessage.GetMessage(fieldName)\n```\n## GetRepeatedMessage\n```js\n/**\n * @param {string} fieldName\n * @param {number} index\n * @return UserMessage\n */\n usermessage.GetRepeatedMessage(fieldName, index)\n```\n## AddMessage\n```js\n/**\n * @param {string} fieldName\n * @return UserMessage\n */\n usermessage.AddMessage(fieldName)\n```\n## SendToPlayer\n```js\n/**\n * @param {number} playerid\n * @return void\n */\n usermessage.SendToPlayer(playerid)\n```\n## SendToAllPlayers\n```js\n/**\n * @return void\n */\n usermessage.SendToAllPlayers()\n```\n## AddClient\n```js\n/**\n * @param {number} playerid\n * @return void\n */\n usermessage.AddClient(playerid)\n```\n## RemoveClient\n```js\n/**\n * @param {number} playerid\n * @return void\n */\n usermessage.RemoveClient(playerid)\n```\n## ClearClients\n```js\n/**\n * @return void\n */\n usermessage.ClearClients()\n```\n## AddClients\n```js\n/**\n * @return void\n */\n usermessage.AddClients()\n```\n## GetClients\n```js\n/**\n * @return number[]\n */\n usermessage.GetClients()\n```\n\n### Example\n```js\nAddEventHandler(\"OnUserMessageSend\", (event, um, isreliable) => {\n    let msgid = um.GetMessageID()\n\n    if (msgid == 418 || msgid == 411) {\n        return EventResult.Stop\n    }\n})\n\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n## Constructor\n```cs\nvar usermessage = UserMessages.UserMessage(string partial_message_name)\n```\n# Functions\nHere are listed all the functions.\n## IsValidMessage\n```cs\nbool usermessage.IsValidMessage()\n```\n## GetMessageName\n```cs\nstring usermessage.GetMessageName()\n```\n## GetMessageID\n```cs\nint usermessage.GetMessageID()\n```\n## HasField\n```cs\nbool usermessage.HasField(string fieldName)\n```\n## GetInt32\n```cs\nint usermessage.GetInt32(string fieldName)\n```\n## SetInt32\n```cs\nvoid usermessage.SetInt32(string fieldName, int value)\n```\n## GetRepeatedInt32\n```cs\nint usermessage.GetRepeatedInt32(string fieldName, int index)\n```\n## SetRepeatedInt32\n```cs\nvoid usermessage.SetRepeatedInt32(string fieldName, int index, int value)\n```\n## AddInt32\n```cs\nvoid usermessage.AddInt32(string fieldName, int index)\n```\n## GetInt64\n```cs\nlong usermessage.GetInt64(string fieldName)\n```\n## SetInt64\n```cs\nvoid usermessage.SetInt64(string fieldName, long value)\n```\n## GetRepeatedInt64\n```cs\nlong usermessage.GetRepeatedInt64(string fieldName, int index)\n```\n## SetRepeatedInt64\n```cs\nvoid usermessage.SetRepeatedInt64(string fieldName, int index, long value)\n```\n## AddInt64\n```cs\nvoid usermessage.AddInt64(string fieldName, long value)\n```\n## GetUInt32\n```cs\nuint usermessage.GetUInt32(string fieldName)\n```\n## SetUInt32\n```cs\nvoid usermessage.SetUInt32(string fieldName, uint value)\n```\n## GetRepeatedUInt32\n```cs\nuint usermessage.GetRepeatedUInt32(string fieldName, int index)\n```\n## SetRepeatedUInt32\n```cs\nvoid usermessage.SetRepeatedUInt32(string fieldName, int index, uint value)\n```\n## AddUInt32\n```cs\nvoid usermessage.AddUInt32(string fieldName, uint value)\n```\n## GetUInt64\n```cs\nulong usermessage.GetUInt64(string fieldName)\n```\n## SetUInt64\n```cs\nvoid usermessage.SetUInt64(string fieldName, ulong value)\n```\n## GetRepeatedUInt64\n```cs\nulong usermessage.GetRepeatedUInt64(string fieldName, int index)\n```\n## SetRepeatedUInt64\n```cs\nvoid usermessage.SetRepeatedUInt64(string fieldName, int index, ulong value)\n```\n## AddUInt64\n```cs\nvoid usermessage.AddUInt64(string fieldName, ulong value)\n```\n## GetInt64OrUnsigned\n```cs\nlong usermessage.GetInt64OrUnsigned(string fieldName)\n```\n## SetInt64OrUnsigned\n```cs\nvoid usermessage.SetInt64OrUnsigned(string fieldName, long value)\n```\n## GetRepeatedInt64OrUnsigned\n```cs\nlong usermessage.GetRepeatedInt64OrUnsigned(string fieldName, int index)\n```\n## SetRepeatedInt64OrUnsigned\n```cs\nvoid usermessage.SetRepeatedInt64OrUnsigned(string fieldName, int index, long value)\n```\n## AddInt64OrUnsigned\n```cs\nvoid usermessage.AddInt64OrUnsigned(string fieldName, long value)\n```\n## GetBool\n```cs\nbool usermessage.GetBool(string fieldName)\n```\n## SetBool\n```cs\nvoid usermessage.SetBool(string fieldName, bool value)\n```\n## GetRepeatedBool\n```cs\nbool usermessage.GetRepeatedBool(string fieldName, int index)\n```\n## SetRepeatedBool\n```cs\nvoid usermessage.SetRepeatedBool(string fieldName, int index, bool value)\n```\n## AddBool\n```cs\nvoid usermessage.AddBool(string fieldName, bool value)\n```\n## GetFloat\n```cs\nfloat usermessage.GetFloat(string fieldName)\n```\n## SetFloat\n```cs\nvoid usermessage.SetFloat(string fieldName, float value)\n```\n## GetRepeatedFloat\n```cs\nfloat usermessage.GetRepeatedFloat(string fieldName, int index)\n```\n## SetRepeatedFloat\n```cs\nvoid usermessage.SetRepeatedFloat(string fieldName, int index, float value)\n```\n## AddFloat\n```cs\nvoid usermessage.AddFloat(string fieldName, float value)\n```\n## GetDouble\n```cs\ndouble usermessage.GetDouble(string fieldName)\n```\n## SetDouble\n```cs\nvoid usermessage.SetDouble(string fieldName, double value)\n```\n## GetRepeatedDouble\n```cs\ndouble usermessage.GetRepeatedDouble(string fieldName, int index)\n```\n## SetRepeatedDouble\n```cs\nvoid usermessage.SetRepeatedDouble(string fieldName, int index, double value)\n```\n## AddDouble\n```cs\nvoid usermessage.AddDouble(string fieldName, double value)\n```\n## GetFloatOrDouble\n```cs\nfloat usermessage.GetFloatOrDouble(string fieldName)\n```\n## SetFloatOrDouble\n```cs\nvoid usermessage.SetFloatOrDouble(string fieldName, float value)\n```\n## GetRepeatedFloatOrDouble\n```cs\nfloat usermessage.GetRepeatedFloatOrDouble(string fieldName, int index)\n```\n## SetRepeatedFloatOrDouble\n```cs\nvoid usermessage.SetRepeatedFloatOrDouble(string fieldName, int index, float value)\n```\n## AddFloatOrDouble\n```cs\nvoid usermessage.AddFloatOrDouble(string fieldName, float value)\n```\n## GetString\n```cs\nstring usermessage.GetString(string fieldName)\n```\n## SetString\n```cs\nvoid usermessage.SetString(string fieldName, string value)\n```\n## GetRepeatedString\n```cs\nstring usermessage.GetRepeatedString(string fieldName, int index)\n```\n## SetRepeatedString\n```cs\nvoid usermessage.SetRepeatedString(string fieldName, int index, string value)\n```\n## AddString\n```cs\nvoid usermessage.AddString(string fieldName, string value)\n```\n## GetBytes\n```cs\nstring usermessage.GetBytes(string fieldName)\n```\n## SetBytes\n```cs\nvoid usermessage.SetBytes(string fieldName, string value)\n```\n## GetRepeatedBytes\n```cs\nstring usermessage.GetRepeatedBytes(string fieldName, int index)\n```\n## SetRepeatedBytes\n```cs\nvoid usermessage.SetRepeatedBytes(string fieldName, int index, string value)\n```\n## AddBytes\n```cs\nvoid usermessage.AddBytes(string fieldName, string value)\n```\n## GetColor\n```cs\nColor usermessage.GetColor(string fieldName)\n```\n## SetColor\n```cs\nvoid usermessage.SetColor(string fieldName, Color value)\n```\n## GetRepeatedColor\n```cs\nColor usermessage.GetRepeatedColor(string fieldName, int index)\n```\n## SetRepeatedColor\n```cs\nvoid usermessage.SetRepeatedColor(string fieldName, int index, Color value)\n```\n## AddColor\n```cs\nvoid usermessage.AddColor(string fieldName, Color value)\n```\n## GetVector2D\n```cs\nVector2D usermessage.GetVector2D(string fieldName)\n```\n## SetVector2D\n```cs\nvoid usermessage.SetVector2D(string fieldName, Vector2D value)\n```\n## GetRepeatedVector2D\n```cs\nVector2D usermessage.GetRepeatedVector2D(string fieldName, int index)\n```\n## SetRepeatedVector2D\n```cs\nvoid usermessage.SetRepeatedVector2D(string fieldName, int index, Vector2D value)\n```\n## AddVector2D\n```cs\nvoid usermessage.AddVector2D(string fieldName, Vector2D value)\n```\n## GetVector\n```cs\nVector usermessage.GetVector(string fieldName)\n```\n## SetVector\n```cs\nvoid usermessage.SetVector(string fieldName, Vector value)\n```\n## GetRepeatedVector\n```cs\nVector usermessage.GetRepeatedVector(string fieldName, int index)\n```\n## SetRepeatedVector\n```cs\nvoid usermessage.SetRepeatedVector(string fieldName, int index, Vector value)\n```\n## AddVector\n```cs\nvoid usermessage.AddVector(string fieldName, Vector value)\n```\n## GetQAngle\n```cs\nQAngle usermessage.GetQAngle(string fieldName)\n```\n## SetQAngle\n```cs\nQAngle usermessage.SetQAngle(string fieldName, QAngle value)\n```\n## GetRepeatedQAngle\n```cs\nQAngle usermessage.GetRepeatedQAngle(string fieldName, int index)\n```\n## SetRepeatedQAngle\n```cs\nvoid usermessage.SetRepeatedQAngle(string fieldName, int index, QAngle value)\n```\n## AddQAngle\n```cs\nvoid usermessage.AddQAngle(string fieldName, QAngle value)\n```\n## RemoveRepeatedFieldValue\n```cs\nvoid usermessage.RemoveRepeatedFieldValue(string fieldName, int index)\n```\n## GetRepeatedFieldCount\n```cs\nint usermessage.GetRepeatedFieldCount(string fieldName)\n```\n## GetMessage\n```cs\nUserMessage usermessage.GetMessage(string fieldName)\n```\n## GetRepeatedMessage\n```cs\nUserMessage usermessage.GetRepeatedMessage(string fieldName, int index)\n```\n## AddMessage\n```cs\nUserMessage usermessage.AddMessage(string fieldName)\n```\n## SendToPlayer\n```cs\nvoid usermessage.SendToPlayer(int playerid)\n```\n## SendToAllPlayers\n```cs\nvoid usermessage.SendToAllPlayers()\n```\n## AddClient\n```cs\nvoid usermessage.AddClient(int playerid)\n```\n## RemoveClient\n```cs\nvoid usermessage.RemoveClient(int playerid)\n```\n## ClearClients\n```cs\nvoid usermessage.ClearClients()\n```\n## AddClients\n```cs\nvoid usermessage.AddClients()\n```\n## GetClients\n```cs\nint32[] usermessage.GetClients()\n```\n\n</TabsContent>\n    </Tabs>",
        "title": "UserMessage"
    },
    "utils": {
        "page": "# Utils\n\nThis is the list of items available for Utils API.\n\n",
        "title": "Utils",
        "icon": "laptop-code"
    },
    "utils.json": {
        "page": "# JSON\n\nThis is the list of items available for JSON API.\n\n## Functions\n\n<Catalog filter=\"utils.json.decode,utils.json.encode\"></Catalog>",
        "title": "JSON",
        "icon": "arrow-to-dot"
    },
    "utils.json.decode": {
        "page": "# Decode\n\nDecodes a JSON string into a table.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param value string\n--- @return any\n json.decode(value)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} value\n * @return any\n */\n JSON.parse(value)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nobject JsonSerializer.Deserialize<T>(string value)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Decode"
    },
    "utils.json.encode": {
        "page": "# Encode\n\nEncodes a value into a json string.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param value any\n--- @return string\n json.encode(value)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {any} value\n * @return string\n */\n JSON.stringify(value)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nstring JsonSerializer.Serialize(object value)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Encode"
    },
    "utils.misc": {
        "page": "# Misc\n\nThis is the list of items available for Misc API.\n\n## Functions\n\n<Catalog filter=\"utils.misc.computeprettytime,utils.misc.getccsgamerules,utils.misc.getpluginslist,utils.misc.getusermessage,utils.misc.isvaliditem,utils.misc.isvalidweapon,utils.misc.stateupdate,utils.misc.stringsplit,utils.misc.stringtrim,utils.misc.switch,utils.misc.tablecontains,utils.misc.tablefilter,utils.misc.tablefind,utils.misc.tablemap,utils.misc.uuid\"></Catalog>",
        "title": "Misc",
        "icon": "laptop-code"
    },
    "utils.misc.computeprettytime": {
        "page": "# ComputePrettyTime\n\nTransforms seconds into a pretty string format.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param seconds number\n--- @return string\n ComputePrettyTime(seconds)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {number} seconds\n * @return string\n */\n ComputePrettyTime(seconds)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nstring Generic.ComputePrettyTime(ulong seconds)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "ComputePrettyTime"
    },
    "utils.misc.getccsgamerules": {
        "page": "# GetCCSGameRules\n\nReturns the CCSGameRules of the server.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return CCSGameRules\n GetCCSGameRules()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return CCSGameRules\n */\n GetCCSGameRules()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nCCSGameRules Generic.GetCCSGameRules()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetCCSGameRules"
    },
    "utils.misc.getpluginslist": {
        "page": "# GetPluginsList\n\nReturns all the plugins loaded on the server.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return table\n GetPluginsList()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return Object.<string, string>[]\n */\n GetPluginsList()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nDictionary<string, string>[] Generic.GetPluginsList()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetPluginsList"
    },
    "utils.misc.getusermessage": {
        "page": "# GetUserMessage\n\nReturns the user message from uuid.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param uuid UserMessage\n--- @return UserMessage\n GetUserMessage(uuid)\n```\n> [!warning]\n> This function has been deprecated due to events now giving directly the object. It will be removed in v1.8.0.\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {UserMessage} uuid\n * @return UserMessage\n */\n GetUserMessage(uuid)\n```\n> [!warning]\n> This function has been deprecated due to events now giving directly the object. It will be removed in v1.8.0.\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nUserMessage Generic.GetUserMessage(UserMessage uuid)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetUserMessage"
    },
    "utils.misc.isvaliditem": {
        "page": "# IsValidItem\n\nChecks if the provided item name is valid.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param name string\n--- @return boolean\n IsValidItem(name)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} name\n * @return bool\n */\n IsValidItem(name)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nbool Generic.IsValidItem(string name)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "IsValidItem"
    },
    "utils.misc.isvalidweapon": {
        "page": "# IsValidWeapon\n\nChecks if the provided weapon name is valid.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param name string\n--- @return boolean\n IsValidWeapon(name)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} name\n * @return bool\n */\n IsValidWeapon(name)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nbool Generic.IsValidWeapon(string name)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "IsValidWeapon"
    },
    "utils.misc.stateupdate": {
        "page": "# StateUpdate\n\nUpdates the state of a specific field.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param entity SDKClass\n--- @param classname string\n--- @param field string\n--- @return nil\n StateUpdate(entity, classname, field)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {SDKClass} entity\n * @param {string} classname\n * @param {string} field\n * @return void\n */\n StateUpdate(entity, classname, field)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid Generic.StateUpdate(SDKClass entity, string classname, string field)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "StateUpdate"
    },
    "utils.misc.stringsplit": {
        "page": "# String Split\n\nSplits a string into a list of strings.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-1 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param value string\n--- @param delimiter string\n--- @return table\n string.split(value, delimiter)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "String Split"
    },
    "utils.misc.stringtrim": {
        "page": "# String Trim\n\nTrims a string.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-1 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param value string\n--- @return string\n string.trim(value)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "String Trim"
    },
    "utils.misc.switch": {
        "page": "# Switch\n\nAllows for a switch-like behavior in Lua, matching a value against a set of cases. It supports functions or direct values for each case and includes a default fallback.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-1 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param key string\n--- @param switch_items table\n--- @return any\n switch(key, switch_items)\n```\n\n### Example\n```lua\nlocal result = switch(\"hello\", {\n    hello = function() return \"world\" end,\n    goodbye = \"farewell\",\n    default = function() return \"unknown\" end\n})\n\nprint(result)\n\n```\n</TabsContent>\n</Tabs>",
        "title": "Switch"
    },
    "utils.misc.tablecontains": {
        "page": "# Table Contains\n\nChecks if a table contains a specific value.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-1 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param list table\n--- @param element any\n--- @return boolean\n table.contains(list, element)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Table Contains"
    },
    "utils.misc.tablefilter": {
        "page": "# Table Filter\n\nFilters elements of a table based on a provided predicate function, returning a new table with elements that satisfy the condition.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-1 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param list table\n--- @param callback fun(element:any):boolean\n--- @return table\n table.filter(list, callback)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Table Filter"
    },
    "utils.misc.tablefind": {
        "page": "# Table Find\n\nReturn the index of the value.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-1 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param list table\n--- @param element any\n--- @return number|nil\n table.find(list, element)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Table Find"
    },
    "utils.misc.tablemap": {
        "page": "# Table Map\n\nMaps a given function to each element in a table, returning a new table with the transformed values.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-1 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param list table\n--- @param callback fun(element:any):any\n--- @return table\n table.map(list, callback)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "Table Map"
    },
    "utils.misc.uuid": {
        "page": "# uuid\n\nGenerates a UUID v4.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return string\n uuid()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return string\n */\n uuid()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nstring Generic.uuid()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "uuid"
    },
    "utils.os": {
        "page": "# OS\n\nThis is the list of items available for OS API.\n\n## Functions\n\n<Catalog filter=\"utils.os.getos,utils.os.islinux,utils.os.iswindows\"></Catalog>",
        "title": "OS",
        "icon": "computer"
    },
    "utils.os.getos": {
        "page": "# GetOS\n\nReturns the current OS.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return string\n GetOS()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return string\n */\n GetOS()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nstring Generic.GetOS()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetOS"
    },
    "utils.os.islinux": {
        "page": "# IsLinux\n\nChecks if the current OS is Linux.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return boolean\n IsLinux()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return bool\n */\n IsLinux()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nbool Generic.IsLinux()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "IsLinux"
    },
    "utils.os.iswindows": {
        "page": "# IsWindows\n\nChecks if the current OS is Windows.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return boolean\n IsWindows()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return bool\n */\n IsWindows()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nbool Generic.IsWindows()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "IsWindows"
    },
    "utils.targetselector": {
        "page": "# Target Selector\n\nThis is the list of items available for Target Selector API.\n\n## Functions\n\n<Catalog filter=\"utils.targetselector.findplayersbytarget,utils.targetselector.getplayer\"></Catalog>",
        "title": "Target Selector",
        "icon": "user"
    },
    "utils.targetselector.findplayersbytarget": {
        "page": "# FindPlayersByTarget\n\nReturns the players which could be selected using the target.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param target string\n--- @param matchbots boolean\n--- @return table\n FindPlayersByTarget(target, matchbots)\n```\n#### Target Options\nThe supported target options are the following:\n```\n@ct - Only CT\n@t - Only T\n@spec - Only Spectators\n@alive - Alive Players\n@dying - Dying players\n@dead - Dead players\n@all - All players\n#USERID - By userid\nSTEAMID64 - By SteamID64\nSTEAMID - By SteamID\nNAME - By Partial Name\n```\nMore targets can be added using the event `FindPlayerByTarget`.\n\n### Example\n```lua\ncommands:Register(\"getct\", function(playerid, args, argsCount, silent, prefix)\n    local players = FindPlayersByTarget(\"@ct\", true)\n    print(\"There are \" .. #players .. \" in CT.\")\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} target\n * @param {bool} matchbots\n * @return Player[]\n */\n FindPlayersByTarget(target, matchbots)\n```\n#### Target Options\nThe supported target options are the following:\n```\n@ct - Only CT\n@t - Only T\n@spec - Only Spectators\n@alive - Alive Players\n@dying - Dying players\n@dead - Dead players\n@all - All players\n#USERID - By userid\nSTEAMID64 - By SteamID64\nSTEAMID - By SteamID\nNAME - By Partial Name\n```\nMore targets can be added using the event `FindPlayerByTarget`.\n\n### Example\n```js\ncommands.Register(\"getct\", (playerid, args, argsCount, silent, prefix) => {\n    let players = FindPlayersByTarget(\"@ct\", true)\n    print(`There are ${players.length} in CT.`)\n})\n\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nPlayer[] Generic.FindPlayersByTarget(string target, bool matchbots)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "FindPlayersByTarget"
    },
    "utils.targetselector.getplayer": {
        "page": "# GetPlayer\n\nReturns the player object from playerid.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param playerid number\n--- @return Player|nil\n GetPlayer(playerid)\n```\n\n### Example\n```lua\ncommands:Register(\"player\", function(playerid, args, argsCount, silent, prefix)\n    local player = GetPlayer(playerid)\n    if player then\n        print(\"This player is on the server, now we can check if it's also a valid player\")\n    else\n        print(\"This player is not on server\")\n    end\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {number} playerid\n * @return Player?\n */\n GetPlayer(playerid)\n```\n\n### Example\n```js\ncommands.Register(\"player\", (playerid, args, argsCount, silent, prefix) => {\n    let player = GetPlayer(playerid)\n    if (player) console.log(\"This player is on the server, now we can check if it's also a valid player\")\n    else console.log(\"This player is not on server\")\n})\n\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nPlayer? Generic.GetPlayer(int playerid)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetPlayer"
    },
    "utils.time": {
        "page": "# Time\n\nThis is the list of items available for Time API.\n\n## Functions\n\n<Catalog filter=\"utils.time.gettime\"></Catalog>",
        "title": "Time",
        "icon": "clock"
    },
    "utils.time.gettime": {
        "page": "# GetTime\n\nReturns the current UNIX time in milliseconds.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return number\n GetTime()\n```\n\n### Example\n```lua\nprint(GetTime())\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return number\n */\n GetTime()\n```\n\n### Example\n```js\nconsole.log(GetTime())\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nulong Generic.GetTime()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetTime"
    },
    "vgui": {
        "page": "# VGUI\n\nThis is the list of items available for VGUI API.\n\n## Functions\n\n<Catalog filter=\"vgui.removetext,vgui.setcolor,vgui.settextmessage,vgui.settextposition,vgui.showtext\"></Catalog>",
        "title": "VGUI",
        "icon": "vector-square"
    },
    "vgui.removetext": {
        "page": "# RemoveText\n\nRemoves a text based on it's id.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param textID number\n--- @return nil\n vgui:RemoveText(textID)\n```\n\n### Example\n```lua\ncommands:Register(\"removetext\", function(playerid, args, argsCount, silent, prefix)\n    local textId = vgui:ShowText(playerid, Color(255, 255, 255, 255), \"Temp Message\", 0.5, 0.5, \"Arial\")\n    vgui:RemoveText(textId)\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {number} textID\n * @return void\n */\n vgui.RemoveText(textID)\n```\n\n### Example\n```js\ncommands.Register(\"removetext\", (playerid, args, argc, silent, prefix) => {\n    let textId = vgui.ShowText(playerid, Color(255, 255, 255, 255), \"Temp Message\", 0.5, 0.5, \"Arial\")\n    vgui.RemoveText(textId)\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid VGUI.RemoveText(long textID)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "RemoveText"
    },
    "vgui.setcolor": {
        "page": "# SetColor\n\nSets the color of a text.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param textID number\n--- @param color Color\n--- @return nil\n vgui:SetColor(textID, color)\n```\n\n### Example\n```lua\ncommands:Register(\"updatecolor\", function(playerid, args, argsCount, silent, prefix)\n    vgui:SetColor(3, Color(0, 186, 105, 255))\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {number} textID\n * @param {Color} color\n * @return void\n */\n vgui.SetColor(textID, color)\n```\n\n### Example\n```js\ncommands.Register(\"updatetext\", (playerid, args, argc, silent, prefix) => {\n    vgui.SetColor(3, Color(0, 186, 105, 255))\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid VGUI.SetColor(long textID, Color color)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "SetColor"
    },
    "vgui.settextmessage": {
        "page": "# SetTextMessage\n\nSets the message of a text.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param textID number\n--- @param message string\n--- @return nil\n vgui:SetTextMessage(textID, message)\n```\n\n### Example\n```lua\ncommands:Register(\"updatetext\", function(playerid, args, argsCount, silent, prefix)\n    vgui:SetTextMessage(3, \"New text!\")\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {number} textID\n * @param {string} message\n * @return void\n */\n vgui.SetTextMessage(textID, message)\n```\n\n### Example\n```js\ncommands.Register(\"updatetext\", (playerid, args, argc, silent, prefix) => {\n    vgui.SetTextMessage(3, \"New text!\")\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid VGUI.SetTextMessage(long textID, string message)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "SetTextMessage"
    },
    "vgui.settextposition": {
        "page": "# SetTextPosition\n\nSets the position of a text.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param textID number\n--- @param posX number\n--- @param posY number\n--- @return nil\n vgui:SetTextPosition(textID, posX, posY)\n```\n### Positions\n\nPositions are in between 0.0 and 1.0.\n\n### Example\n```lua\ncommands:Register(\"updateposition\", function(playerid, args, argsCount, silent, prefix)\n    vgui:SetTextPosition(3, 0.95, 0.90)\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {number} textID\n * @param {number} posX\n * @param {number} posY\n * @return void\n */\n vgui.SetTextPosition(textID, posX, posY)\n```\n### Positions\n\nPositions are in between 0.0 and 1.0.\n\n### Example\n```js\ncommands.Register(\"updateposition\", (playerid, args, argc, silent, prefix) => {\n    vgui.SetTextPosition(3, 0.95, 0.90)\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid VGUI.SetTextPosition(long textID, float posX, float posY)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "SetTextPosition"
    },
    "vgui.showtext": {
        "page": "# ShowText\n\nShows a text to a player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param playerid number\n--- @param color Color\n--- @param text string\n--- @param posX number\n--- @param posY number\n--- @param font_name string\n--- @param background boolean|nil\n--- @return number\n vgui:ShowText(playerid, color, text, posX, posY, font_name, background)\n```\n### Positions\n\nPositions are in between 0.0 and 1.0.\n\n### Fonts\n\nA list of fonts can be found on [Microsoft - Windows 10 Font List](https://learn.microsoft.com/en-us/typography/fonts/windows_10_font_list).\n\n### Example\n```lua\ncommands:Register(\"showtext\", function(playerid, args, argsCount, silent, prefix)\n    local welcomeId = vgui:ShowText(playerid, Color(0, 255, 0, 255), \"Welcome!\", 0.5, 0.1, \"Verdana\", true)\nend)\n\n```\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {number} playerid\n * @param {Color} color\n * @param {string} text\n * @param {number} posX\n * @param {number} posY\n * @param {string} font_name\n * @param {bool?} background\n * @return number\n */\n vgui.ShowText(playerid, color, text, posX, posY, font_name, background)\n```\n### Positions\n\nPositions are in between 0.0 and 1.0.\n\n### Fonts\n\nA list of fonts can be found on [Microsoft - Windows 10 Font List](https://learn.microsoft.com/en-us/typography/fonts/windows_10_font_list).\n\n### Example\n```js\ncommands.Register(\"showtext\", (playerid, args, argc, silent, prefix) => {\n    let welcomeId = vgui.ShowText(playerid, Color(0, 255, 0, 255), \"Welcome!\", 0.5, 0.1, \"Verdana\", true)\n});\n```\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nlong VGUI.ShowText(int playerid, Color color, string text, float posX, float posY, string font_name, bool? background)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "ShowText"
    },
    "weapons": {
        "page": "# Weapons\n\nThis is the list of items available for Weapons API.\n\n## Classes\n\n<Catalog filter=\"weapons.weapon\"></Catalog>",
        "title": "Weapons",
        "icon": "gun"
    },
    "weapons.weapon": {
        "page": "# Weapon\n\nA weapon is an object which stores informations about a player's weapon.\n\n<Tabs defaultValue=\"lua\">\n      <TabsList class=\"grid w-full grid-cols-3 flex\">\n        <TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n      </TabsList>\n    <TabsContent value=\"lua\">\n## Constructor\n```lua\n--- @param playerid number\n--- @param ptr SDKClass\n--- @return Weapon\nlocal weapon = Weapon(playerid, ptr)\n```\n# Functions\nHere are listed all the functions.\n## CBasePlayerWeapon\n```lua\n--- @return CBasePlayerWeapon\n weapon:CBasePlayerWeapon()\n```\n## CCSWeaponBase\n```lua\n--- @return CCSWeaponBase\n weapon:CCSWeaponBase()\n```\n## CBasePlayerWeaponVData\n```lua\n--- @return CBasePlayerWeaponVData\n weapon:CBasePlayerWeaponVData()\n```\n## CCSWeaponBaseVData\n```lua\n--- @return CCSWeaponBaseVData\n weapon:CCSWeaponBaseVData()\n```\n## SetDefaultAttributes\n```lua\n--- @return nil\n weapon:SetDefaultAttributes()\n```\n## Remove\n```lua\n--- @return nil\n weapon:Remove()\n```\n## Drop\n```lua\n--- @return nil\n weapon:Drop()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n## Constructor\n```js\n/**\n * @param {number} playerid\n * @param {SDKClass} ptr\n * @return Weapon\n */\nlet weapon = Weapon(playerid, ptr)\n```\n# Functions\nHere are listed all the functions.\n## CBasePlayerWeapon\n```js\n/**\n * @return CBasePlayerWeapon\n */\n weapon.CBasePlayerWeapon()\n```\n## CCSWeaponBase\n```js\n/**\n * @return CCSWeaponBase\n */\n weapon.CCSWeaponBase()\n```\n## CBasePlayerWeaponVData\n```js\n/**\n * @return CBasePlayerWeaponVData\n */\n weapon.CBasePlayerWeaponVData()\n```\n## CCSWeaponBaseVData\n```js\n/**\n * @return CCSWeaponBaseVData\n */\n weapon.CCSWeaponBaseVData()\n```\n## SetDefaultAttributes\n```js\n/**\n * @return void\n */\n weapon.SetDefaultAttributes()\n```\n## Remove\n```js\n/**\n * @return void\n */\n weapon.Remove()\n```\n## Drop\n```js\n/**\n * @return void\n */\n weapon.Drop()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n## Constructor\n```cs\nvar weapon = Weapons.Weapon(int playerid, SDKClass ptr)\n```\n# Functions\nHere are listed all the functions.\n## CBasePlayerWeapon\n```cs\nCBasePlayerWeapon weapon.CBasePlayerWeapon()\n```\n## CCSWeaponBase\n```cs\nCCSWeaponBase weapon.CCSWeaponBase()\n```\n## CBasePlayerWeaponVData\n```cs\nCBasePlayerWeaponVData weapon.CBasePlayerWeaponVData()\n```\n## CCSWeaponBaseVData\n```cs\nCCSWeaponBaseVData weapon.CCSWeaponBaseVData()\n```\n## SetDefaultAttributes\n```cs\nvoid weapon.SetDefaultAttributes()\n```\n## Remove\n```cs\nvoid weapon.Remove()\n```\n## Drop\n```cs\nvoid weapon.Drop()\n```\n\n</TabsContent>\n    </Tabs>",
        "title": "Weapon"
    },
    "weapons.weaponsmanager": {
        "page": "# Weapon Manager\n\nThis is the list of items available for Weapon Manager API.\n\n## Functions\n\n<Catalog filter=\"weapons.weaponsmanager.dropweapons,weapons.weaponsmanager.getfirstinslot,weapons.weaponsmanager.getinslot,weapons.weaponsmanager.getweapons,weapons.weaponsmanager.giveweapon,weapons.weaponsmanager.removebyclassname,weapons.weaponsmanager.removebyitemdefinition,weapons.weaponsmanager.removebyslot,weapons.weaponsmanager.removeweapons\"></Catalog>",
        "title": "Weapon Manager",
        "icon": "person-rifle"
    },
    "weapons.weaponsmanager.dropweapons": {
        "page": "# DropWeapons\n\nDrops all the weapons of the player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return nil\n weaponmanager:DropWeapons()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return void\n */\n weaponmanager.DropWeapons()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid WeaponManager.DropWeapons()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "DropWeapons"
    },
    "weapons.weaponsmanager.getfirstinslot": {
        "page": "# GetFIrstInSlot\n\nReturns the first weapon in the specified slot.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param slot gear_slot_t\n--- @return Weapon\n weaponmanager:GetFIrstInSlot(slot)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {gear_slot_t} slot\n * @return Weapon\n */\n weaponmanager.GetFIrstInSlot(slot)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nWeapon WeaponManager.GetFIrstInSlot(gear_slot_t slot)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetFIrstInSlot"
    },
    "weapons.weaponsmanager.getinslot": {
        "page": "# GetInSlot\n\nReturns the weapons in the specified slot.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param slot gear_slot_t\n--- @return table\n weaponmanager:GetInSlot(slot)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {gear_slot_t} slot\n * @return Weapon[]\n */\n weaponmanager.GetInSlot(slot)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nWeapon[] WeaponManager.GetInSlot(gear_slot_t slot)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetInSlot"
    },
    "weapons.weaponsmanager.getweapons": {
        "page": "# GetWeapons\n\nReturns a table of all the player weapons.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return table\n weaponmanager:GetWeapons()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return Weapon[]\n */\n weaponmanager.GetWeapons()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nWeapon[] WeaponManager.GetWeapons()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GetWeapons"
    },
    "weapons.weaponsmanager.giveweapon": {
        "page": "# GiveWeapon\n\nGives the specified weapon to player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param weapon_name string\n--- @return nil\n weaponmanager:GiveWeapon(weapon_name)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} weapon_name\n * @return void\n */\n weaponmanager.GiveWeapon(weapon_name)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid WeaponManager.GiveWeapon(string weapon_name)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "GiveWeapon"
    },
    "weapons.weaponsmanager.removebyclassname": {
        "page": "# RemoveByClassname\n\nRemoves the weapons with the specified classname.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param classname string\n--- @return nil\n weaponmanager:RemoveByClassname(classname)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {string} classname\n * @return void\n */\n weaponmanager.RemoveByClassname(classname)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid WeaponManager.RemoveByClassname(string classname)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "RemoveByClassname"
    },
    "weapons.weaponsmanager.removebyitemdefinition": {
        "page": "# RemoveByItemDefinition\n\nRemoves the weapons with the specified item definition index.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param idx number\n--- @return nil\n weaponmanager:RemoveByItemDefinition(idx)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {number} idx\n * @return void\n */\n weaponmanager.RemoveByItemDefinition(idx)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid WeaponManager.RemoveByItemDefinition(long idx)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "RemoveByItemDefinition"
    },
    "weapons.weaponsmanager.removebyslot": {
        "page": "# RemoveBySlot\n\nRemoves the weapons with the specified slot.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @param slot gear_slot_t\n--- @return nil\n weaponmanager:RemoveBySlot(slot)\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @param {gear_slot_t} slot\n * @return void\n */\n weaponmanager.RemoveBySlot(slot)\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid WeaponManager.RemoveBySlot(gear_slot_t slot)\n```\n\n</TabsContent>\n</Tabs>",
        "title": "RemoveBySlot"
    },
    "weapons.weaponsmanager.removeweapons": {
        "page": "# RemoveWeapons\n\nRemoves all the weapons of the player.\n\n<Tabs defaultValue=\"lua\">\n  <TabsList class=\"grid w-full grid-cols-3 flex\">\n\t<TabsTrigger value=\"lua\">Lua</TabsTrigger>\n<TabsTrigger value=\"js\">JavaScript/TypeScript</TabsTrigger>\n<TabsTrigger value=\"cs\">C#</TabsTrigger>\n  </TabsList>\n<TabsContent value=\"lua\">\n```lua\n--- @return nil\n weaponmanager:RemoveWeapons()\n```\n\n</TabsContent>\n<TabsContent value=\"js\">\n```js\n/**\n * @return void\n */\n weaponmanager.RemoveWeapons()\n```\n\n</TabsContent>\n<TabsContent value=\"cs\">\n```cs\nvoid WeaponManager.RemoveWeapons()\n```\n\n</TabsContent>\n</Tabs>",
        "title": "RemoveWeapons"
    }
}