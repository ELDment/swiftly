import os
import fnmatch
import json

MMSPlugin.plugin_name = 'swiftly'
MMSPlugin.plugin_alias = 'swiftly'

for sdk_target in MMSPlugin.sdk_targets:
	sdk = sdk_target.sdk
	cxx = sdk_target.cxx

	binary = MMSPlugin.HL2Library(builder, cxx, MMSPlugin.plugin_name, sdk)

	for root, dirs, files in os.walk(os.path.join(builder.sourcePath, "src")):
		for _file in files:
			if fnmatch.fnmatch(_file, '*.cpp'):
				binary.sources.append(os.path.join(root, _file).replace("\\", "/"))

	for root, dirs, files in os.walk(os.path.join(builder.sourcePath, "vendor", "json-lua", "src")):
		for _file in files:
			if fnmatch.fnmatch(_file, '*.cpp'):
				binary.sources.append(os.path.join(root, _file).replace("\\", "/"))

	for root, dirs, files in os.walk(os.path.join(builder.sourcePath, "vendor", "embedder", "src")):
		for _file in files:
			if fnmatch.fnmatch(_file, '*.cpp'):
				binary.sources.append(os.path.join(root, _file).replace("\\", "/"))

	for root, dirs, files in os.walk(os.path.join(builder.sourcePath, "vendor", "asmjit", "src", "asmjit")):
		for _file in files:
			if fnmatch.fnmatch(_file, '*.cpp'):
				binary.sources.append(os.path.join(root, _file).replace("\\", "/"))

	binary.sources.append("vendor/dynlib/module.cpp")
	binary.sources.append("vendor/msgpack-lua/msgpack.cpp")

	binary.sources.append(os.path.join(sdk['path'], 'entity2', 'entitysystem.cpp'))
	binary.sources.append(os.path.join(sdk['path'], 'entity2', 'entityidentity.cpp'))
	binary.sources.append(os.path.join(sdk['path'], 'entity2', 'entitykeyvalues.cpp'))
	binary.sources.append(os.path.join(sdk['path'], 'tier1', 'keyvalues3.cpp'))

	with open(os.path.join(builder.sourcePath, "vendor", "embedder", "libs", "links.json")) as f:
		embedder_linking = json.load(f)

	libs = embedder_linking["libraries"][binary.compiler.target.platform]
	incls = embedder_linking["includes"]
	for lib in libs:
		binary.compiler.postlink += [os.path.join(builder.sourcePath, "vendor", "embedder", "libs", lib)]
	for incl in incls:
		binary.compiler.cxxincludes += [os.path.join(builder.sourcePath, 'vendor', 'embedder', 'libs', incl)]

	if binary.compiler.target.platform == 'linux':
		binary.compiler.cxxflags += [
			"-Wno-invalid-offsetof",
			"-Wno-return-local-addr",
			"-Wno-overloaded-virtual",
			"-Wno-unknown-pragmas",
			"-Wno-non-virtual-dtor",
			"-Wno-attributes",
			"-Wno-array-bounds",
			"-Wno-int-to-pointer-cast",
			"-Wno-sign-compare",
			"-Wno-write-strings",
			"-Wno-class-memaccess",
			"-fexceptions",
		]
		binary.compiler.cflags += [
			"-Wno-return-local-addr",
			"-Wno-unknown-pragmas",
			"-Wno-attributes",
			"-Wno-array-bounds",
			"-Wno-int-to-pointer-cast",
			"-Wno-sign-compare",
			"-Wno-write-strings",
			"-fexceptions",
		]
		binary.compiler.postlink += [
			os.path.join(builder.sourcePath, 'vendor', 'funchook', 'lib', 'libfunchook.a'),
      		os.path.join(builder.sourcePath, 'vendor', 'funchook', 'lib', 'libdistorm.a'),
      		os.path.join(builder.sourcePath, 'vendor', 'dynohook', 'linuxsteamrt64', 'lib', 'libdynohook.a'),
      		os.path.join(builder.sourcePath, 'vendor', 'zydis', 'linuxsteamrt64', 'libZydis.a'),
      		os.path.join(builder.sourcePath, 'vendor', 'dyncall', 'linuxsteamrt64', 'lib', 'libdyncall_s.a'),
      		os.path.join(builder.sourcePath, 'vendor', 'bzip2', 'linuxsteamrt64', 'lib', 'libbz2.a'),

			"-lgnutls",
			"-lz",
            "-lpthread",
			"-lssl",
			"-lcrypto",
            "-lm",
            "-ldl",
            "-lreadline",
            "-lrt",
            "-lidn2",
            "-lpsl",
            "-lbrotlidec",
            "-lbacktrace",
            "-lstdc++",
			os.path.join(sdk['path'], 'lib', 'linux64', 'libsteam_api.so')
		]
		binary.compiler.defines += [
			"_LINUX",
            "LINUX",
            "POSIX",
            "GNUC",
            "COMPILER_GCC",
            "PLATFORM_64BITS",
            "META_IS_SOURCE2",
            "_GLIBCXX_USE_CXX11_ABI=0",
		]
	else:
		binary.compiler.cxxflags += [
			"/Zc:__cplusplus",
			"/Ox",
			"/Zo",
			"/Oy-",
			"/Z7",
			"/TP",
			"/MT",
			"/W3",
			"/Z7",
			"/IGNORE:4101,4267,4244,4005,4003,4530",
		]
		binary.compiler.postlink += [
			os.path.join(builder.sourcePath, 'vendor', 'funchook', 'lib', 'funchook.lib'),
		    os.path.join(builder.sourcePath, 'vendor', 'funchook', 'lib', 'distorm.lib'),
      		os.path.join(builder.sourcePath, 'vendor', 'dynohook', 'win64', 'lib', 'dynohook.lib'),
      		os.path.join(builder.sourcePath, 'vendor', 'zydis', 'win64', 'Zydis.lib'),
      		os.path.join(builder.sourcePath, 'vendor', 'dyncall', 'win64', 'lib', 'dyncall_s.lib'),
      		os.path.join(builder.sourcePath, 'vendor', 'bzip2', 'win64', 'lib', 'bz2.lib'),

			"psapi.lib",
            "winmm.lib",
            "ws2_32.lib",
            "wldap32.lib",
            "advapi32.lib",
            "kernel32.lib",
            "comdlg32.lib",
            "crypt32.lib",
            "normaliz.lib",
            "wsock32.lib",
            "legacy_stdio_definitions.lib",
            "legacy_stdio_wide_specifiers.lib",
            "user32.lib",
            "gdi32.lib",
            "winspool.lib",
            "shell32.lib",
            "ole32.lib",
            "oleaut32.lib",
            "uuid.lib",
            "odbc32.lib",
            "odbccp32.lib",
            "msvcrt.lib",
			os.path.join(sdk['path'], 'lib', 'public', 'win64', 'steam_api64.lib')
		]
		binary.compiler.defines += [
			"COMPILER_MSVC",
            "COMPILER_MSVC64",
            "WIN32",
            "_WIN32",
            "WINDOWS",
            "_WINDOWS",
            "CRT_SECURE_NO_WARNINGS",
            "_CRT_SECURE_NO_WARNINGS",
            "CRT_SECURE_NO_DEPRECATE",
            "_CRT_SECURE_NO_DEPRECATE",
            "CRT_NONSTDC_NO_DEPRECATE",
            "_CRT_NONSTDC_NO_DEPRECATE",
            "_MBCS",
            "META_IS_SOURCE2",
            "X64BITS",
            "PLATFORM_64BITS",
            "NDEBUG"
		]
	
	binary.compiler.defines += [
		"GITHUB_SHA=\"" + (os.getenv('GITHUB_SHA') == None and "LOCAL" or os.getenv('GITHUB_SHA')) + "\"",
		"HAVE_STRUCT_TIMESPEC",
		"BUILDING",
		"MSGPACK_NO_BOOST",
	]

	if os.getenv('SWIFTLY_DEBUG') != None:
		binary.compiler.defines += [
			"SWIFTLY_DEBUG"
		]

	if os.getenv("SWIFTLY_VERSION") != None:
		binary.compiler.defines += [
			"SWIFTLY_VERSION=\"" + os.getenv("SWIFTLY_VERSION") + "\""
		]

	binary.compiler.cxxincludes += [
		os.path.join(builder.sourcePath, 'vendor'),
		os.path.join(builder.sourcePath, 'vendor', 'other'),
		os.path.join(builder.sourcePath, 'vendor', 'embedder', 'src'),
		os.path.join(builder.sourcePath, 'vendor', 'dynlib'),
		os.path.join(builder.sourcePath, 'vendor', 'msgpack', 'include'),
		os.path.join(builder.sourcePath, 'vendor', 'json', 'include'),
		os.path.join(builder.sourcePath, 'vendor', 'funchook', 'include'),
		os.path.join(builder.sourcePath, 'vendor', 'texttable'),
		os.path.join(builder.sourcePath, 'vendor', 'asmjit', 'src'),
		os.path.join(builder.sourcePath, 'vendor', 'dynohook', ('win64' if binary.compiler.target.platform == 'windows' else 'linuxsteamrt64'), 'include'),
		os.path.join(builder.sourcePath, 'vendor', 'dyncall', ('win64' if binary.compiler.target.platform == 'windows' else 'linuxsteamrt64'), 'include'),
		os.path.join(builder.sourcePath, 'vendor', 'bzip2', ('win64' if binary.compiler.target.platform == 'windows' else 'linuxsteamrt64'), 'include'),

		os.path.join(sdk['path']),
		os.path.join(sdk['path'], 'public'),
		os.path.join(sdk['path'], 'public', 'entity2'),
		os.path.join(sdk['path'], 'game', 'server'),
		os.path.join(sdk['path'], 'game', 'shared'),
		os.path.join(sdk['path'], 'common'),
		os.path.join(sdk['path'], 'public', 'engine'),
		os.path.join(sdk['path'], 'public', 'mathlib'),
		os.path.join(sdk['path'], 'public', 'tier0'),
		os.path.join(sdk['path'], 'public', 'tier1'),
		os.path.join(sdk['path'], 'public', 'mathlib'),
		os.path.join(sdk['path'], 'public', 'game', 'server'),
		os.path.join('alliedmodders', 'metamod', 'core'),
		os.path.join('alliedmodders', 'metamod', 'core', 'sourcehook')
	]

	protobufSources = []
	for root, dirs, files in os.walk(os.path.join(builder.sourcePath, "protobufs")):
		for _file in files:
			if fnmatch.fnmatch(_file, '*.proto'):
				protobufSources.append(os.path.join(root, _file).replace("\\", "/"))

	protoc_builder = builder.tools.Protoc(protoc = sdk_target.protoc, sources = protobufSources)
	protoc_builder.protoc.includes = [
		os.path.join(sdk['path'], 'thirdparty', 'protobuf-3.21.8', 'src'),
		os.path.join(builder.sourcePath, 'protobufs')
	]

	binary.custom = [protoc_builder]

	nodes = builder.Add(binary)
	MMSPlugin.binaries += [nodes]